/* automatically generated by rust-bindgen 0.58.1 */

use objc::{class, msg_send, sel, sel_impl};

use objc;
#[allow(non_camel_case_types)]
pub type id = *mut objc::runtime::Object;
pub type __int32_t = ::std::os::raw::c_int;
pub type __darwin_pid_t = __int32_t;
pub type pid_t = __darwin_pid_t;
pub type va_list = __builtin_va_list;
pub type SInt16 = ::std::os::raw::c_short;
pub type UInt32 = ::std::os::raw::c_uint;
pub type SInt32 = ::std::os::raw::c_int;
pub type FourCharCode = UInt32;
pub type OSType = FourCharCode;
pub type ResType = FourCharCode;
pub type Boolean = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __CFRunLoop {
    _unused: [u8; 0],
}
pub type CFRunLoopRef = *mut __CFRunLoop;
#[repr(transparent)]
#[derive(Clone)]
pub struct Class(pub id);
impl std::ops::Deref for Class {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for Class {}
impl Class {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(Class), alloc) })
    }
}
impl IClass for Class {}
pub trait IClass: Sized + std::ops::Deref {}
pub type IMP = ::std::option::Option<unsafe extern "C" fn()>;
pub type BOOL = ::std::os::raw::c_schar;
pub type NSInteger = ::std::os::raw::c_long;
pub type NSUInteger = ::std::os::raw::c_ulong;
pub trait PNSObject: Sized + std::ops::Deref {
    unsafe fn isEqual_(&self, object: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEqual: object)
    }
    unsafe fn class(&self) -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, class)
    }
    unsafe fn self_(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, self)
    }
    unsafe fn performSelector_(&self, aSelector: objc::runtime::Sel) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, performSelector: aSelector)
    }
    unsafe fn performSelector_withObject_(&self, aSelector: objc::runtime::Sel, object: id) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performSelector : aSelector withObject : object)
    }
    unsafe fn performSelector_withObject_withObject_(
        &self,
        aSelector: objc::runtime::Sel,
        object1: id,
        object2: id,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performSelector : aSelector withObject : object1 withObject : object2)
    }
    unsafe fn isProxy(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isProxy)
    }
    unsafe fn isKindOfClass_(&self, aClass: Class) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isKindOfClass: aClass)
    }
    unsafe fn isMemberOfClass_(&self, aClass: Class) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isMemberOfClass: aClass)
    }
    unsafe fn conformsToProtocol_(&self, aProtocol: Protocol) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, conformsToProtocol: aProtocol)
    }
    unsafe fn respondsToSelector_(&self, aSelector: objc::runtime::Sel) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, respondsToSelector: aSelector)
    }
    unsafe fn retain(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, retain)
    }
    unsafe fn release(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, release)
    }
    unsafe fn autorelease(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, autorelease)
    }
    unsafe fn retainCount(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, retainCount)
    }
    unsafe fn zone(&self) -> *mut _NSZone
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, zone)
    }
    unsafe fn hash(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hash)
    }
    unsafe fn superclass(&self) -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, superclass)
    }
    unsafe fn description(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, description)
    }
    unsafe fn debugDescription(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, debugDescription)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NSZone {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSObject(pub id);
impl std::ops::Deref for NSObject {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSObject {}
impl NSObject {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSObject), alloc) })
    }
}
impl PNSObject for NSObject {}
impl INSObject for NSObject {}
pub trait INSObject: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn dealloc(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dealloc)
    }
    unsafe fn finalize(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, finalize)
    }
    unsafe fn copy(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, copy)
    }
    unsafe fn mutableCopy(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, mutableCopy)
    }
    unsafe fn methodForSelector_(&self, aSelector: objc::runtime::Sel) -> IMP
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, methodForSelector: aSelector)
    }
    unsafe fn doesNotRecognizeSelector_(&self, aSelector: objc::runtime::Sel)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, doesNotRecognizeSelector: aSelector)
    }
    unsafe fn forwardingTargetForSelector_(&self, aSelector: objc::runtime::Sel) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, forwardingTargetForSelector: aSelector)
    }
    unsafe fn forwardInvocation_(&self, anInvocation: NSInvocation)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, forwardInvocation: anInvocation)
    }
    unsafe fn methodSignatureForSelector_(&self, aSelector: objc::runtime::Sel) -> NSMethodSignature
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, methodSignatureForSelector: aSelector)
    }
    unsafe fn allowsWeakReference(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowsWeakReference)
    }
    unsafe fn retainWeakReference(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, retainWeakReference)
    }
    unsafe fn load()
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), load)
    }
    unsafe fn initialize()
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), initialize)
    }
    unsafe fn new() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), new)
    }
    unsafe fn allocWithZone_(zone: *mut _NSZone) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), allocWithZone: zone)
    }
    unsafe fn alloc() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), alloc)
    }
    unsafe fn copyWithZone_(zone: *mut _NSZone) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), copyWithZone: zone)
    }
    unsafe fn mutableCopyWithZone_(zone: *mut _NSZone) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), mutableCopyWithZone: zone)
    }
    unsafe fn instancesRespondToSelector_(aSelector: objc::runtime::Sel) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), instancesRespondToSelector: aSelector)
    }
    unsafe fn conformsToProtocol_(protocol: Protocol) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), conformsToProtocol: protocol)
    }
    unsafe fn instanceMethodForSelector_(aSelector: objc::runtime::Sel) -> IMP
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), instanceMethodForSelector: aSelector)
    }
    unsafe fn instanceMethodSignatureForSelector_(
        aSelector: objc::runtime::Sel,
    ) -> NSMethodSignature
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSObject),
            instanceMethodSignatureForSelector: aSelector
        )
    }
    unsafe fn isSubclassOfClass_(aClass: Class) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), isSubclassOfClass: aClass)
    }
    unsafe fn resolveClassMethod_(sel: objc::runtime::Sel) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), resolveClassMethod: sel)
    }
    unsafe fn resolveInstanceMethod_(sel: objc::runtime::Sel) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), resolveInstanceMethod: sel)
    }
    unsafe fn hash() -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), hash)
    }
    unsafe fn superclass() -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), superclass)
    }
    unsafe fn class() -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), class)
    }
    unsafe fn description() -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), description)
    }
    unsafe fn debugDescription() -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), debugDescription)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct Protocol(pub id);
impl std::ops::Deref for Protocol {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for Protocol {}
impl Protocol {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(Protocol), alloc) })
    }
}
impl IProtocol for Protocol {}
pub trait IProtocol: Sized + std::ops::Deref {}
pub type NSRunLoopMode = NSString;
pub const NSComparisonResult_NSOrderedAscending: NSComparisonResult = -1;
pub const NSComparisonResult_NSOrderedSame: NSComparisonResult = 0;
pub const NSComparisonResult_NSOrderedDescending: NSComparisonResult = 1;
pub type NSComparisonResult = NSInteger;
pub type NSComparator = *mut ::std::os::raw::c_void;
pub const NSEnumerationOptions_NSEnumerationConcurrent: NSEnumerationOptions = 1;
pub const NSEnumerationOptions_NSEnumerationReverse: NSEnumerationOptions = 2;
pub type NSEnumerationOptions = NSUInteger;
pub const NSSortOptions_NSSortConcurrent: NSSortOptions = 1;
pub const NSSortOptions_NSSortStable: NSSortOptions = 16;
pub type NSSortOptions = NSUInteger;
pub const NSQualityOfService_NSQualityOfServiceUserInteractive: NSQualityOfService = 33;
pub const NSQualityOfService_NSQualityOfServiceUserInitiated: NSQualityOfService = 25;
pub const NSQualityOfService_NSQualityOfServiceUtility: NSQualityOfService = 17;
pub const NSQualityOfService_NSQualityOfServiceBackground: NSQualityOfService = 9;
pub const NSQualityOfService_NSQualityOfServiceDefault: NSQualityOfService = -1;
pub type NSQualityOfService = NSInteger;
pub type NSZone = _NSZone;
pub trait PNSCopying: Sized + std::ops::Deref {
    unsafe fn copyWithZone_(&self, zone: *mut NSZone) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, copyWithZone: zone)
    }
}
pub trait PNSMutableCopying: Sized + std::ops::Deref {
    unsafe fn mutableCopyWithZone_(&self, zone: *mut NSZone) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, mutableCopyWithZone: zone)
    }
}
pub trait PNSCoding: Sized + std::ops::Deref {
    unsafe fn encodeWithCoder_(&self, coder: NSCoder)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, encodeWithCoder: coder)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
}
pub trait PNSSecureCoding: Sized + std::ops::Deref {
    unsafe fn supportsSecureCoding() -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSSecureCoding), supportsSecureCoding)
    }
}
impl NSObject_NSCoderMethods for NSObject {}
pub trait NSObject_NSCoderMethods: Sized + std::ops::Deref {
    unsafe fn replacementObjectForCoder_(&self, coder: NSCoder) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, replacementObjectForCoder: coder)
    }
    unsafe fn awakeAfterUsingCoder_(&self, coder: NSCoder) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, awakeAfterUsingCoder: coder)
    }
    unsafe fn classForCoder(&self) -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, classForCoder)
    }
    unsafe fn version() -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), version)
    }
    unsafe fn setVersion_(aVersion: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), setVersion: aVersion)
    }
}
impl NSObject_NSDeprecatedMethods for NSObject {}
pub trait NSObject_NSDeprecatedMethods: Sized + std::ops::Deref {
    unsafe fn poseAsClass_(aClass: Class)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), poseAsClass: aClass)
    }
}
impl NSObject_NSDiscardableContentProxy for NSObject {}
pub trait NSObject_NSDiscardableContentProxy: Sized + std::ops::Deref {
    unsafe fn autoContentAccessingProxy(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, autoContentAccessingProxy)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NSFastEnumerationState {
    pub state: ::std::os::raw::c_ulong,
    pub itemsPtr: *mut id,
    pub mutationsPtr: *mut ::std::os::raw::c_ulong,
    pub extra: [::std::os::raw::c_ulong; 5usize],
}
#[test]
fn bindgen_test_layout_NSFastEnumerationState() {
    assert_eq!(
        ::std::mem::size_of::<NSFastEnumerationState>(),
        64usize,
        concat!("Size of: ", stringify!(NSFastEnumerationState))
    );
    assert_eq!(
        ::std::mem::align_of::<NSFastEnumerationState>(),
        8usize,
        concat!("Alignment of ", stringify!(NSFastEnumerationState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NSFastEnumerationState>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NSFastEnumerationState),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NSFastEnumerationState>())).itemsPtr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NSFastEnumerationState),
            "::",
            stringify!(itemsPtr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<NSFastEnumerationState>())).mutationsPtr as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NSFastEnumerationState),
            "::",
            stringify!(mutationsPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NSFastEnumerationState>())).extra as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NSFastEnumerationState),
            "::",
            stringify!(extra)
        )
    );
}
pub trait PNSFastEnumeration: Sized + std::ops::Deref {
    unsafe fn countByEnumeratingWithState_objects_count_(
        &self,
        state: *mut NSFastEnumerationState,
        buffer: *mut id,
        len: NSUInteger,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , countByEnumeratingWithState : state objects : buffer count : len)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSEnumerator(pub id);
impl std::ops::Deref for NSEnumerator {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSEnumerator {}
impl NSEnumerator {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSEnumerator), alloc) })
    }
}
impl PNSFastEnumeration for NSEnumerator {}
impl INSObject for NSEnumerator {}
impl PNSObject for NSEnumerator {}
impl From<NSEnumerator> for NSObject {
    fn from(child: NSEnumerator) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSEnumerator {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSEnumerator, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSEnumerator)) };
        if is_kind_of {
            Ok(NSEnumerator(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSEnumerator")
        }
    }
}
impl<ObjectType: 'static> INSEnumerator<ObjectType> for NSEnumerator {}
pub trait INSEnumerator<ObjectType>: Sized + std::ops::Deref {
    unsafe fn nextObject(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, nextObject)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSValue(pub id);
impl std::ops::Deref for NSValue {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSValue {}
impl NSValue {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSValue), alloc) })
    }
}
impl PNSCopying for NSValue {}
impl PNSSecureCoding for NSValue {}
impl INSObject for NSValue {}
impl PNSObject for NSValue {}
impl From<NSValue> for NSObject {
    fn from(child: NSValue) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSValue {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSValue, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSValue)) };
        if is_kind_of {
            Ok(NSValue(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSValue")
        }
    }
}
impl INSValue for NSValue {}
pub trait INSValue: Sized + std::ops::Deref {
    unsafe fn getValue_size_(&self, value: *mut ::std::os::raw::c_void, size: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getValue : value size : size)
    }
    unsafe fn initWithBytes_objCType_(
        &self,
        value: *const ::std::os::raw::c_void,
        type_: *const ::std::os::raw::c_char,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithBytes : value objCType : type_)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn objCType(&self) -> *const ::std::os::raw::c_char
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objCType)
    }
}
impl NSValue_NSValueCreation for NSValue {}
pub trait NSValue_NSValueCreation: Sized + std::ops::Deref {
    unsafe fn valueWithBytes_objCType_(
        value: *const ::std::os::raw::c_void,
        type_: *const ::std::os::raw::c_char,
    ) -> NSValue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSValue) , valueWithBytes : value objCType : type_)
    }
    unsafe fn value_withObjCType_(
        value: *const ::std::os::raw::c_void,
        type_: *const ::std::os::raw::c_char,
    ) -> NSValue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSValue) , value : value withObjCType : type_)
    }
}
impl NSValue_NSValueExtensionMethods for NSValue {}
pub trait NSValue_NSValueExtensionMethods: Sized + std::ops::Deref {
    unsafe fn isEqualToValue_(&self, value: NSValue) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEqualToValue: value)
    }
    unsafe fn nonretainedObjectValue(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, nonretainedObjectValue)
    }
    unsafe fn pointerValue(&self) -> *mut ::std::os::raw::c_void
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, pointerValue)
    }
    unsafe fn valueWithNonretainedObject_(anObject: id) -> NSValue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSValue), valueWithNonretainedObject: anObject)
    }
    unsafe fn valueWithPointer_(pointer: *const ::std::os::raw::c_void) -> NSValue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSValue), valueWithPointer: pointer)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSNumber(pub id);
impl std::ops::Deref for NSNumber {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSNumber {}
impl NSNumber {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSNumber), alloc) })
    }
}
impl INSValue for NSNumber {}
impl PNSCopying for NSNumber {}
impl PNSSecureCoding for NSNumber {}
impl From<NSNumber> for NSValue {
    fn from(child: NSNumber) -> NSValue {
        NSValue(child.0)
    }
}
impl std::convert::TryFrom<NSValue> for NSNumber {
    type Error = &'static str;
    fn try_from(parent: NSValue) -> Result<NSNumber, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSNumber)) };
        if is_kind_of {
            Ok(NSNumber(parent.0))
        } else {
            Err("This NSValue cannot be downcasted to NSNumber")
        }
    }
}
impl INSObject for NSNumber {}
impl PNSObject for NSNumber {}
impl From<NSNumber> for NSObject {
    fn from(child: NSNumber) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSNumber {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSNumber, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSNumber)) };
        if is_kind_of {
            Ok(NSNumber(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSNumber")
        }
    }
}
impl INSNumber for NSNumber {}
pub trait INSNumber: Sized + std::ops::Deref {
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn initWithChar_(&self, value: ::std::os::raw::c_char) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithChar: value)
    }
    unsafe fn initWithUnsignedChar_(&self, value: ::std::os::raw::c_uchar) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithUnsignedChar: value)
    }
    unsafe fn initWithShort_(&self, value: ::std::os::raw::c_short) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithShort: value)
    }
    unsafe fn initWithUnsignedShort_(&self, value: ::std::os::raw::c_ushort) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithUnsignedShort: value)
    }
    unsafe fn initWithInt_(&self, value: ::std::os::raw::c_int) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithInt: value)
    }
    unsafe fn initWithUnsignedInt_(&self, value: ::std::os::raw::c_uint) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithUnsignedInt: value)
    }
    unsafe fn initWithLong_(&self, value: ::std::os::raw::c_long) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithLong: value)
    }
    unsafe fn initWithUnsignedLong_(&self, value: ::std::os::raw::c_ulong) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithUnsignedLong: value)
    }
    unsafe fn initWithLongLong_(&self, value: ::std::os::raw::c_longlong) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithLongLong: value)
    }
    unsafe fn initWithUnsignedLongLong_(&self, value: ::std::os::raw::c_ulonglong) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithUnsignedLongLong: value)
    }
    unsafe fn initWithFloat_(&self, value: f32) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithFloat: value)
    }
    unsafe fn initWithDouble_(&self, value: f64) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithDouble: value)
    }
    unsafe fn initWithBool_(&self, value: BOOL) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithBool: value)
    }
    unsafe fn initWithInteger_(&self, value: NSInteger) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithInteger: value)
    }
    unsafe fn initWithUnsignedInteger_(&self, value: NSUInteger) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithUnsignedInteger: value)
    }
    unsafe fn compare_(&self, otherNumber: NSNumber) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, compare: otherNumber)
    }
    unsafe fn isEqualToNumber_(&self, number: NSNumber) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEqualToNumber: number)
    }
    unsafe fn descriptionWithLocale_(&self, locale: id) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, descriptionWithLocale: locale)
    }
    unsafe fn charValue(&self) -> ::std::os::raw::c_char
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, charValue)
    }
    unsafe fn unsignedCharValue(&self) -> ::std::os::raw::c_uchar
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unsignedCharValue)
    }
    unsafe fn shortValue(&self) -> ::std::os::raw::c_short
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shortValue)
    }
    unsafe fn unsignedShortValue(&self) -> ::std::os::raw::c_ushort
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unsignedShortValue)
    }
    unsafe fn intValue(&self) -> ::std::os::raw::c_int
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, intValue)
    }
    unsafe fn unsignedIntValue(&self) -> ::std::os::raw::c_uint
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unsignedIntValue)
    }
    unsafe fn longValue(&self) -> ::std::os::raw::c_long
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, longValue)
    }
    unsafe fn unsignedLongValue(&self) -> ::std::os::raw::c_ulong
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unsignedLongValue)
    }
    unsafe fn longLongValue(&self) -> ::std::os::raw::c_longlong
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, longLongValue)
    }
    unsafe fn unsignedLongLongValue(&self) -> ::std::os::raw::c_ulonglong
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unsignedLongLongValue)
    }
    unsafe fn floatValue(&self) -> f32
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, floatValue)
    }
    unsafe fn doubleValue(&self) -> f64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, doubleValue)
    }
    unsafe fn boolValue(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, boolValue)
    }
    unsafe fn integerValue(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, integerValue)
    }
    unsafe fn unsignedIntegerValue(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unsignedIntegerValue)
    }
    unsafe fn stringValue(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringValue)
    }
}
impl NSValue_NSDeprecated for NSValue {}
pub trait NSValue_NSDeprecated: Sized + std::ops::Deref {
    unsafe fn getValue_(&self, value: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, getValue: value)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NSRange {
    pub location: NSUInteger,
    pub length: NSUInteger,
}
#[test]
fn bindgen_test_layout__NSRange() {
    assert_eq!(
        ::std::mem::size_of::<_NSRange>(),
        16usize,
        concat!("Size of: ", stringify!(_NSRange))
    );
    assert_eq!(
        ::std::mem::align_of::<_NSRange>(),
        8usize,
        concat!("Alignment of ", stringify!(_NSRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_NSRange>())).location as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_NSRange),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_NSRange>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_NSRange),
            "::",
            stringify!(length)
        )
    );
}
pub type NSRange = _NSRange;
pub type NSRangePointer = *mut NSRange;
impl NSValue_NSValueRangeExtensions for NSValue {}
pub trait NSValue_NSValueRangeExtensions: Sized + std::ops::Deref {
    unsafe fn rangeValue(&self) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, rangeValue)
    }
    unsafe fn valueWithRange_(range: NSRange) -> NSValue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSValue), valueWithRange: range)
    }
}
pub const NSCollectionChangeType_NSCollectionChangeInsert: NSCollectionChangeType = 0;
pub const NSCollectionChangeType_NSCollectionChangeRemove: NSCollectionChangeType = 1;
pub type NSCollectionChangeType = NSInteger;
#[repr(transparent)]
#[derive(Clone)]
pub struct NSOrderedCollectionChange(pub id);
impl std::ops::Deref for NSOrderedCollectionChange {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSOrderedCollectionChange {}
impl NSOrderedCollectionChange {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSOrderedCollectionChange), alloc) })
    }
}
impl INSObject for NSOrderedCollectionChange {}
impl PNSObject for NSOrderedCollectionChange {}
impl From<NSOrderedCollectionChange> for NSObject {
    fn from(child: NSOrderedCollectionChange) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSOrderedCollectionChange {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSOrderedCollectionChange, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSOrderedCollectionChange)) };
        if is_kind_of {
            Ok(NSOrderedCollectionChange(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSOrderedCollectionChange")
        }
    }
}
impl<ObjectType: 'static> INSOrderedCollectionChange<ObjectType> for NSOrderedCollectionChange {}
pub trait INSOrderedCollectionChange<ObjectType>: Sized + std::ops::Deref {
    unsafe fn init(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithObject_type_index_(
        &self,
        anObject: id,
        type_: NSCollectionChangeType,
        index: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithObject : anObject type : type_ index : index)
    }
    unsafe fn initWithObject_type_index_associatedIndex_(
        &self,
        anObject: id,
        type_: NSCollectionChangeType,
        index: NSUInteger,
        associatedIndex: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithObject : anObject type : type_ index : index associatedIndex : associatedIndex)
    }
    unsafe fn object(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, object)
    }
    unsafe fn changeType(&self) -> NSCollectionChangeType
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, changeType)
    }
    unsafe fn index(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, index)
    }
    unsafe fn associatedIndex(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, associatedIndex)
    }
    unsafe fn changeWithObject_type_index_(
        anObject: id,
        type_: NSCollectionChangeType,
        index: NSUInteger,
    ) -> NSOrderedCollectionChange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSOrderedCollectionChange) , changeWithObject : anObject type : type_ index : index)
    }
    unsafe fn changeWithObject_type_index_associatedIndex_(
        anObject: id,
        type_: NSCollectionChangeType,
        index: NSUInteger,
        associatedIndex: NSUInteger,
    ) -> NSOrderedCollectionChange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSOrderedCollectionChange) , changeWithObject : anObject type : type_ index : index associatedIndex : associatedIndex)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSIndexSet(pub id);
impl std::ops::Deref for NSIndexSet {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSIndexSet {}
impl NSIndexSet {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSIndexSet), alloc) })
    }
}
impl PNSCopying for NSIndexSet {}
impl PNSMutableCopying for NSIndexSet {}
impl PNSSecureCoding for NSIndexSet {}
impl INSObject for NSIndexSet {}
impl PNSObject for NSIndexSet {}
impl From<NSIndexSet> for NSObject {
    fn from(child: NSIndexSet) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSIndexSet {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSIndexSet, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSIndexSet)) };
        if is_kind_of {
            Ok(NSIndexSet(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSIndexSet")
        }
    }
}
impl INSIndexSet for NSIndexSet {}
pub trait INSIndexSet: Sized + std::ops::Deref {
    unsafe fn initWithIndexesInRange_(&self, range: NSRange) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithIndexesInRange: range)
    }
    unsafe fn initWithIndexSet_(&self, indexSet: NSIndexSet) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithIndexSet: indexSet)
    }
    unsafe fn initWithIndex_(&self, value: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithIndex: value)
    }
    unsafe fn isEqualToIndexSet_(&self, indexSet: NSIndexSet) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEqualToIndexSet: indexSet)
    }
    unsafe fn indexGreaterThanIndex_(&self, value: NSUInteger) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, indexGreaterThanIndex: value)
    }
    unsafe fn indexLessThanIndex_(&self, value: NSUInteger) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, indexLessThanIndex: value)
    }
    unsafe fn indexGreaterThanOrEqualToIndex_(&self, value: NSUInteger) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, indexGreaterThanOrEqualToIndex: value)
    }
    unsafe fn indexLessThanOrEqualToIndex_(&self, value: NSUInteger) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, indexLessThanOrEqualToIndex: value)
    }
    unsafe fn getIndexes_maxCount_inIndexRange_(
        &self,
        indexBuffer: *mut NSUInteger,
        bufferSize: NSUInteger,
        range: NSRangePointer,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getIndexes : indexBuffer maxCount : bufferSize inIndexRange : range)
    }
    unsafe fn countOfIndexesInRange_(&self, range: NSRange) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, countOfIndexesInRange: range)
    }
    unsafe fn containsIndex_(&self, value: NSUInteger) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, containsIndex: value)
    }
    unsafe fn containsIndexesInRange_(&self, range: NSRange) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, containsIndexesInRange: range)
    }
    unsafe fn containsIndexes_(&self, indexSet: NSIndexSet) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, containsIndexes: indexSet)
    }
    unsafe fn intersectsIndexesInRange_(&self, range: NSRange) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, intersectsIndexesInRange: range)
    }
    unsafe fn enumerateIndexesUsingBlock_(&self, block: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, enumerateIndexesUsingBlock: block)
    }
    unsafe fn enumerateIndexesWithOptions_usingBlock_(
        &self,
        opts: NSEnumerationOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumerateIndexesWithOptions : opts usingBlock : block)
    }
    unsafe fn enumerateIndexesInRange_options_usingBlock_(
        &self,
        range: NSRange,
        opts: NSEnumerationOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumerateIndexesInRange : range options : opts usingBlock : block)
    }
    unsafe fn indexPassingTest_(&self, predicate: *mut ::std::os::raw::c_void) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, indexPassingTest: predicate)
    }
    unsafe fn indexWithOptions_passingTest_(
        &self,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , indexWithOptions : opts passingTest : predicate)
    }
    unsafe fn indexInRange_options_passingTest_(
        &self,
        range: NSRange,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , indexInRange : range options : opts passingTest : predicate)
    }
    unsafe fn indexesPassingTest_(&self, predicate: *mut ::std::os::raw::c_void) -> NSIndexSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, indexesPassingTest: predicate)
    }
    unsafe fn indexesWithOptions_passingTest_(
        &self,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSIndexSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , indexesWithOptions : opts passingTest : predicate)
    }
    unsafe fn indexesInRange_options_passingTest_(
        &self,
        range: NSRange,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSIndexSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , indexesInRange : range options : opts passingTest : predicate)
    }
    unsafe fn enumerateRangesUsingBlock_(&self, block: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, enumerateRangesUsingBlock: block)
    }
    unsafe fn enumerateRangesWithOptions_usingBlock_(
        &self,
        opts: NSEnumerationOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumerateRangesWithOptions : opts usingBlock : block)
    }
    unsafe fn enumerateRangesInRange_options_usingBlock_(
        &self,
        range: NSRange,
        opts: NSEnumerationOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumerateRangesInRange : range options : opts usingBlock : block)
    }
    unsafe fn count(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, count)
    }
    unsafe fn firstIndex(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, firstIndex)
    }
    unsafe fn lastIndex(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, lastIndex)
    }
    unsafe fn indexSet() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSIndexSet), indexSet)
    }
    unsafe fn indexSetWithIndex_(value: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSIndexSet), indexSetWithIndex: value)
    }
    unsafe fn indexSetWithIndexesInRange_(range: NSRange) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSIndexSet), indexSetWithIndexesInRange: range)
    }
}
pub const NSOrderedCollectionDifferenceCalculationOptions_NSOrderedCollectionDifferenceCalculationOmitInsertedObjects : NSOrderedCollectionDifferenceCalculationOptions = 1 ;
pub const NSOrderedCollectionDifferenceCalculationOptions_NSOrderedCollectionDifferenceCalculationOmitRemovedObjects : NSOrderedCollectionDifferenceCalculationOptions = 2 ;
pub const NSOrderedCollectionDifferenceCalculationOptions_NSOrderedCollectionDifferenceCalculationInferMoves : NSOrderedCollectionDifferenceCalculationOptions = 4 ;
pub type NSOrderedCollectionDifferenceCalculationOptions = NSUInteger;
#[repr(transparent)]
#[derive(Clone)]
pub struct NSOrderedCollectionDifference(pub id);
impl std::ops::Deref for NSOrderedCollectionDifference {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSOrderedCollectionDifference {}
impl NSOrderedCollectionDifference {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSOrderedCollectionDifference), alloc) })
    }
}
impl PNSFastEnumeration for NSOrderedCollectionDifference {}
impl INSObject for NSOrderedCollectionDifference {}
impl PNSObject for NSOrderedCollectionDifference {}
impl From<NSOrderedCollectionDifference> for NSObject {
    fn from(child: NSOrderedCollectionDifference) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSOrderedCollectionDifference {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSOrderedCollectionDifference, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSOrderedCollectionDifference)) };
        if is_kind_of {
            Ok(NSOrderedCollectionDifference(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSOrderedCollectionDifference")
        }
    }
}
impl<ObjectType: 'static> INSOrderedCollectionDifference<ObjectType>
    for NSOrderedCollectionDifference
{
}
pub trait INSOrderedCollectionDifference<ObjectType>: Sized + std::ops::Deref {
    unsafe fn initWithChanges_(&self, changes: NSArray) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithChanges: changes)
    }
    unsafe fn initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_additionalChanges_(
        &self,
        inserts: NSIndexSet,
        insertedObjects: NSArray,
        removes: NSIndexSet,
        removedObjects: NSArray,
        changes: NSArray,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithInsertIndexes : inserts insertedObjects : insertedObjects removeIndexes : removes removedObjects : removedObjects additionalChanges : changes)
    }
    unsafe fn initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_(
        &self,
        inserts: NSIndexSet,
        insertedObjects: NSArray,
        removes: NSIndexSet,
        removedObjects: NSArray,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithInsertIndexes : inserts insertedObjects : insertedObjects removeIndexes : removes removedObjects : removedObjects)
    }
    unsafe fn differenceByTransformingChangesWithBlock_(
        &self,
        block: *mut ::std::os::raw::c_void,
    ) -> NSOrderedCollectionDifference
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, differenceByTransformingChangesWithBlock: block)
    }
    unsafe fn inverseDifference(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, inverseDifference)
    }
    unsafe fn insertions(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, insertions)
    }
    unsafe fn removals(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removals)
    }
    unsafe fn hasChanges(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hasChanges)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSArray(pub id);
impl std::ops::Deref for NSArray {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSArray {}
impl NSArray {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSArray), alloc) })
    }
}
impl PNSCopying for NSArray {}
impl PNSMutableCopying for NSArray {}
impl PNSSecureCoding for NSArray {}
impl PNSFastEnumeration for NSArray {}
impl INSObject for NSArray {}
impl PNSObject for NSArray {}
impl From<NSArray> for NSObject {
    fn from(child: NSArray) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSArray {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSArray, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSArray)) };
        if is_kind_of {
            Ok(NSArray(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSArray")
        }
    }
}
impl<ObjectType: 'static> INSArray<ObjectType> for NSArray {}
pub trait INSArray<ObjectType>: Sized + std::ops::Deref {
    unsafe fn objectAtIndex_(&self, index: NSUInteger) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectAtIndex: index)
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithObjects_count_(&self, objects: *mut id, cnt: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithObjects : objects count : cnt)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn count(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, count)
    }
}
pub const NSBinarySearchingOptions_NSBinarySearchingFirstEqual: NSBinarySearchingOptions = 256;
pub const NSBinarySearchingOptions_NSBinarySearchingLastEqual: NSBinarySearchingOptions = 512;
pub const NSBinarySearchingOptions_NSBinarySearchingInsertionIndex: NSBinarySearchingOptions = 1024;
pub type NSBinarySearchingOptions = NSUInteger;
#[repr(transparent)]
#[derive(Clone)]
pub struct NSMutableArray(pub id);
impl std::ops::Deref for NSMutableArray {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMutableArray {}
impl NSMutableArray {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSMutableArray), alloc) })
    }
}
impl<ObjectType: 'static> INSArray<ObjectType> for NSMutableArray {}
impl PNSCopying for NSMutableArray {}
impl PNSMutableCopying for NSMutableArray {}
impl PNSSecureCoding for NSMutableArray {}
impl PNSFastEnumeration for NSMutableArray {}
impl INSObject for NSMutableArray {}
impl PNSObject for NSMutableArray {}
impl From<NSMutableArray> for NSObject {
    fn from(child: NSMutableArray) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMutableArray {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMutableArray, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSMutableArray)) };
        if is_kind_of {
            Ok(NSMutableArray(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMutableArray")
        }
    }
}
impl<ObjectType: 'static> INSMutableArray<ObjectType> for NSMutableArray {}
pub trait INSMutableArray<ObjectType>: Sized + std::ops::Deref {
    unsafe fn addObject_(&self, anObject: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addObject: anObject)
    }
    unsafe fn insertObject_atIndex_(&self, anObject: id, index: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , insertObject : anObject atIndex : index)
    }
    unsafe fn removeLastObject(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeLastObject)
    }
    unsafe fn removeObjectAtIndex_(&self, index: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeObjectAtIndex: index)
    }
    unsafe fn replaceObjectAtIndex_withObject_(&self, index: NSUInteger, anObject: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , replaceObjectAtIndex : index withObject : anObject)
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithCapacity_(&self, numItems: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCapacity: numItems)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
}
pub type unichar = ::std::os::raw::c_ushort;
#[repr(transparent)]
#[derive(Clone)]
pub struct NSString(pub id);
impl std::ops::Deref for NSString {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSString {}
impl NSString {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSString), alloc) })
    }
}
impl PNSCopying for NSString {}
impl PNSMutableCopying for NSString {}
impl PNSSecureCoding for NSString {}
impl INSObject for NSString {}
impl PNSObject for NSString {}
impl From<NSString> for NSObject {
    fn from(child: NSString) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSString {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSString, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSString)) };
        if is_kind_of {
            Ok(NSString(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSString")
        }
    }
}
impl INSString for NSString {}
pub trait INSString: Sized + std::ops::Deref {
    unsafe fn characterAtIndex_(&self, index: NSUInteger) -> unichar
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, characterAtIndex: index)
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn length(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, length)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSDictionary(pub id);
impl std::ops::Deref for NSDictionary {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDictionary {}
impl NSDictionary {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSDictionary), alloc) })
    }
}
impl PNSCopying for NSDictionary {}
impl PNSMutableCopying for NSDictionary {}
impl PNSSecureCoding for NSDictionary {}
impl PNSFastEnumeration for NSDictionary {}
impl INSObject for NSDictionary {}
impl PNSObject for NSDictionary {}
impl From<NSDictionary> for NSObject {
    fn from(child: NSDictionary) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSDictionary {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSDictionary, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSDictionary)) };
        if is_kind_of {
            Ok(NSDictionary(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSDictionary")
        }
    }
}
impl<KeyType: 'static, ObjectType: 'static> INSDictionary<KeyType, ObjectType> for NSDictionary {}
pub trait INSDictionary<KeyType, ObjectType>: Sized + std::ops::Deref {
    unsafe fn objectForKey_(&self, aKey: id) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectForKey: aKey)
    }
    unsafe fn keyEnumerator(&self) -> NSEnumerator
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, keyEnumerator)
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithObjects_forKeys_count_(
        &self,
        objects: *mut id,
        keys: *mut *mut u64,
        cnt: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithObjects : objects forKeys : keys count : cnt)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn count(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, count)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSMutableDictionary(pub id);
impl std::ops::Deref for NSMutableDictionary {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMutableDictionary {}
impl NSMutableDictionary {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSMutableDictionary), alloc) })
    }
}
impl<KeyType: 'static, ObjectType: 'static> INSDictionary<KeyType, ObjectType>
    for NSMutableDictionary
{
}
impl PNSCopying for NSMutableDictionary {}
impl PNSMutableCopying for NSMutableDictionary {}
impl PNSSecureCoding for NSMutableDictionary {}
impl PNSFastEnumeration for NSMutableDictionary {}
impl INSObject for NSMutableDictionary {}
impl PNSObject for NSMutableDictionary {}
impl From<NSMutableDictionary> for NSObject {
    fn from(child: NSMutableDictionary) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMutableDictionary {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMutableDictionary, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSMutableDictionary)) };
        if is_kind_of {
            Ok(NSMutableDictionary(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMutableDictionary")
        }
    }
}
impl<KeyType: 'static, ObjectType: 'static> INSMutableDictionary<KeyType, ObjectType>
    for NSMutableDictionary
{
}
pub trait INSMutableDictionary<KeyType, ObjectType>: Sized + std::ops::Deref {
    unsafe fn removeObjectForKey_(&self, aKey: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeObjectForKey: aKey)
    }
    unsafe fn setObject_forKey_(&self, anObject: id, aKey: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setObject : anObject forKey : aKey)
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithCapacity_(&self, numItems: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCapacity: numItems)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSSet(pub id);
impl std::ops::Deref for NSSet {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSSet {}
impl NSSet {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSSet), alloc) })
    }
}
impl PNSCopying for NSSet {}
impl PNSMutableCopying for NSSet {}
impl PNSSecureCoding for NSSet {}
impl PNSFastEnumeration for NSSet {}
impl INSObject for NSSet {}
impl PNSObject for NSSet {}
impl From<NSSet> for NSObject {
    fn from(child: NSSet) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSSet {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSSet, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSSet)) };
        if is_kind_of {
            Ok(NSSet(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSSet")
        }
    }
}
impl<ObjectType: 'static> INSSet<ObjectType> for NSSet {}
pub trait INSSet<ObjectType>: Sized + std::ops::Deref {
    unsafe fn member_(&self, object: id) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, member: object)
    }
    unsafe fn objectEnumerator(&self) -> NSEnumerator
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectEnumerator)
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithObjects_count_(&self, objects: *mut id, cnt: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithObjects : objects count : cnt)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn count(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, count)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSMutableSet(pub id);
impl std::ops::Deref for NSMutableSet {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMutableSet {}
impl NSMutableSet {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSMutableSet), alloc) })
    }
}
impl<ObjectType: 'static> INSSet<ObjectType> for NSMutableSet {}
impl PNSCopying for NSMutableSet {}
impl PNSMutableCopying for NSMutableSet {}
impl PNSSecureCoding for NSMutableSet {}
impl PNSFastEnumeration for NSMutableSet {}
impl INSObject for NSMutableSet {}
impl PNSObject for NSMutableSet {}
impl From<NSMutableSet> for NSObject {
    fn from(child: NSMutableSet) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMutableSet {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMutableSet, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSMutableSet)) };
        if is_kind_of {
            Ok(NSMutableSet(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMutableSet")
        }
    }
}
impl<ObjectType: 'static> INSMutableSet<ObjectType> for NSMutableSet {}
pub trait INSMutableSet<ObjectType>: Sized + std::ops::Deref {
    unsafe fn addObject_(&self, object: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addObject: object)
    }
    unsafe fn removeObject_(&self, object: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeObject: object)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithCapacity_(&self, numItems: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCapacity: numItems)
    }
}
pub type NSTimeInterval = f64;
#[repr(transparent)]
#[derive(Clone)]
pub struct NSDate(pub id);
impl std::ops::Deref for NSDate {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDate {}
impl NSDate {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSDate), alloc) })
    }
}
impl PNSCopying for NSDate {}
impl PNSSecureCoding for NSDate {}
impl INSObject for NSDate {}
impl PNSObject for NSDate {}
impl From<NSDate> for NSObject {
    fn from(child: NSDate) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSDate {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSDate, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSDate)) };
        if is_kind_of {
            Ok(NSDate(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSDate")
        }
    }
}
impl INSDate for NSDate {}
pub trait INSDate: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithTimeIntervalSinceReferenceDate_(&self, ti: NSTimeInterval) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithTimeIntervalSinceReferenceDate: ti)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn timeIntervalSinceReferenceDate(&self) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeIntervalSinceReferenceDate)
    }
}
impl NSDate_NSExtendedDate for NSDate {}
pub trait NSDate_NSExtendedDate: Sized + std::ops::Deref {
    unsafe fn timeIntervalSinceDate_(&self, anotherDate: NSDate) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeIntervalSinceDate: anotherDate)
    }
    unsafe fn addTimeInterval_(&self, seconds: NSTimeInterval) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addTimeInterval: seconds)
    }
    unsafe fn dateByAddingTimeInterval_(&self, ti: NSTimeInterval) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dateByAddingTimeInterval: ti)
    }
    unsafe fn earlierDate_(&self, anotherDate: NSDate) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, earlierDate: anotherDate)
    }
    unsafe fn laterDate_(&self, anotherDate: NSDate) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, laterDate: anotherDate)
    }
    unsafe fn compare_(&self, other: NSDate) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, compare: other)
    }
    unsafe fn isEqualToDate_(&self, otherDate: NSDate) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEqualToDate: otherDate)
    }
    unsafe fn descriptionWithLocale_(&self, locale: id) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, descriptionWithLocale: locale)
    }
    unsafe fn timeIntervalSinceNow(&self) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeIntervalSinceNow)
    }
    unsafe fn timeIntervalSince1970(&self) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeIntervalSince1970)
    }
    unsafe fn description(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, description)
    }
    unsafe fn timeIntervalSinceReferenceDate() -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDate), timeIntervalSinceReferenceDate)
    }
}
impl NSDate_NSDateCreation for NSDate {}
pub trait NSDate_NSDateCreation: Sized + std::ops::Deref {
    unsafe fn initWithTimeIntervalSinceNow_(&self, secs: NSTimeInterval) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithTimeIntervalSinceNow: secs)
    }
    unsafe fn initWithTimeIntervalSince1970_(&self, secs: NSTimeInterval) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithTimeIntervalSince1970: secs)
    }
    unsafe fn initWithTimeInterval_sinceDate_(
        &self,
        secsToBeAdded: NSTimeInterval,
        date: NSDate,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithTimeInterval : secsToBeAdded sinceDate : date)
    }
    unsafe fn date() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDate), date)
    }
    unsafe fn dateWithTimeIntervalSinceNow_(secs: NSTimeInterval) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDate), dateWithTimeIntervalSinceNow: secs)
    }
    unsafe fn dateWithTimeIntervalSinceReferenceDate_(ti: NSTimeInterval) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDate), dateWithTimeIntervalSinceReferenceDate: ti)
    }
    unsafe fn dateWithTimeIntervalSince1970_(secs: NSTimeInterval) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDate), dateWithTimeIntervalSince1970: secs)
    }
    unsafe fn dateWithTimeInterval_sinceDate_(
        secsToBeAdded: NSTimeInterval,
        date: NSDate,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSDate) , dateWithTimeInterval : secsToBeAdded sinceDate : date)
    }
    unsafe fn distantFuture() -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDate), distantFuture)
    }
    unsafe fn distantPast() -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDate), distantPast)
    }
    unsafe fn now() -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDate), now)
    }
}
pub type NSCalendarIdentifier = NSString;
pub const NSCalendarUnit_NSCalendarUnitEra: NSCalendarUnit = 2;
pub const NSCalendarUnit_NSCalendarUnitYear: NSCalendarUnit = 4;
pub const NSCalendarUnit_NSCalendarUnitMonth: NSCalendarUnit = 8;
pub const NSCalendarUnit_NSCalendarUnitDay: NSCalendarUnit = 16;
pub const NSCalendarUnit_NSCalendarUnitHour: NSCalendarUnit = 32;
pub const NSCalendarUnit_NSCalendarUnitMinute: NSCalendarUnit = 64;
pub const NSCalendarUnit_NSCalendarUnitSecond: NSCalendarUnit = 128;
pub const NSCalendarUnit_NSCalendarUnitWeekday: NSCalendarUnit = 512;
pub const NSCalendarUnit_NSCalendarUnitWeekdayOrdinal: NSCalendarUnit = 1024;
pub const NSCalendarUnit_NSCalendarUnitQuarter: NSCalendarUnit = 2048;
pub const NSCalendarUnit_NSCalendarUnitWeekOfMonth: NSCalendarUnit = 4096;
pub const NSCalendarUnit_NSCalendarUnitWeekOfYear: NSCalendarUnit = 8192;
pub const NSCalendarUnit_NSCalendarUnitYearForWeekOfYear: NSCalendarUnit = 16384;
pub const NSCalendarUnit_NSCalendarUnitNanosecond: NSCalendarUnit = 32768;
pub const NSCalendarUnit_NSCalendarUnitCalendar: NSCalendarUnit = 1048576;
pub const NSCalendarUnit_NSCalendarUnitTimeZone: NSCalendarUnit = 2097152;
pub const NSCalendarUnit_NSEraCalendarUnit: NSCalendarUnit = 2;
pub const NSCalendarUnit_NSYearCalendarUnit: NSCalendarUnit = 4;
pub const NSCalendarUnit_NSMonthCalendarUnit: NSCalendarUnit = 8;
pub const NSCalendarUnit_NSDayCalendarUnit: NSCalendarUnit = 16;
pub const NSCalendarUnit_NSHourCalendarUnit: NSCalendarUnit = 32;
pub const NSCalendarUnit_NSMinuteCalendarUnit: NSCalendarUnit = 64;
pub const NSCalendarUnit_NSSecondCalendarUnit: NSCalendarUnit = 128;
pub const NSCalendarUnit_NSWeekCalendarUnit: NSCalendarUnit = 256;
pub const NSCalendarUnit_NSWeekdayCalendarUnit: NSCalendarUnit = 512;
pub const NSCalendarUnit_NSWeekdayOrdinalCalendarUnit: NSCalendarUnit = 1024;
pub const NSCalendarUnit_NSQuarterCalendarUnit: NSCalendarUnit = 2048;
pub const NSCalendarUnit_NSWeekOfMonthCalendarUnit: NSCalendarUnit = 4096;
pub const NSCalendarUnit_NSWeekOfYearCalendarUnit: NSCalendarUnit = 8192;
pub const NSCalendarUnit_NSYearForWeekOfYearCalendarUnit: NSCalendarUnit = 16384;
pub const NSCalendarUnit_NSCalendarCalendarUnit: NSCalendarUnit = 1048576;
pub const NSCalendarUnit_NSTimeZoneCalendarUnit: NSCalendarUnit = 2097152;
pub type NSCalendarUnit = NSUInteger;
pub const NSCalendarOptions_NSCalendarWrapComponents: NSCalendarOptions = 1;
pub const NSCalendarOptions_NSCalendarMatchStrictly: NSCalendarOptions = 2;
pub const NSCalendarOptions_NSCalendarSearchBackwards: NSCalendarOptions = 4;
pub const NSCalendarOptions_NSCalendarMatchPreviousTimePreservingSmallerUnits: NSCalendarOptions =
    256;
pub const NSCalendarOptions_NSCalendarMatchNextTimePreservingSmallerUnits: NSCalendarOptions = 512;
pub const NSCalendarOptions_NSCalendarMatchNextTime: NSCalendarOptions = 1024;
pub const NSCalendarOptions_NSCalendarMatchFirst: NSCalendarOptions = 4096;
pub const NSCalendarOptions_NSCalendarMatchLast: NSCalendarOptions = 8192;
pub type NSCalendarOptions = NSUInteger;
#[repr(transparent)]
#[derive(Clone)]
pub struct NSCalendar(pub id);
impl std::ops::Deref for NSCalendar {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSCalendar {}
impl NSCalendar {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSCalendar), alloc) })
    }
}
impl PNSCopying for NSCalendar {}
impl PNSSecureCoding for NSCalendar {}
impl INSObject for NSCalendar {}
impl PNSObject for NSCalendar {}
impl From<NSCalendar> for NSObject {
    fn from(child: NSCalendar) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSCalendar {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSCalendar, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSCalendar)) };
        if is_kind_of {
            Ok(NSCalendar(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSCalendar")
        }
    }
}
impl INSCalendar for NSCalendar {}
pub trait INSCalendar: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithCalendarIdentifier_(&self, ident: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCalendarIdentifier: ident)
    }
    unsafe fn minimumRangeOfUnit_(&self, unit: NSCalendarUnit) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, minimumRangeOfUnit: unit)
    }
    unsafe fn maximumRangeOfUnit_(&self, unit: NSCalendarUnit) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, maximumRangeOfUnit: unit)
    }
    unsafe fn rangeOfUnit_inUnit_forDate_(
        &self,
        smaller: NSCalendarUnit,
        larger: NSCalendarUnit,
        date: NSDate,
    ) -> NSRange
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , rangeOfUnit : smaller inUnit : larger forDate : date)
    }
    unsafe fn ordinalityOfUnit_inUnit_forDate_(
        &self,
        smaller: NSCalendarUnit,
        larger: NSCalendarUnit,
        date: NSDate,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , ordinalityOfUnit : smaller inUnit : larger forDate : date)
    }
    unsafe fn rangeOfUnit_startDate_interval_forDate_(
        &self,
        unit: NSCalendarUnit,
        datep: *mut NSDate,
        tip: *mut NSTimeInterval,
        date: NSDate,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , rangeOfUnit : unit startDate : datep interval : tip forDate : date)
    }
    unsafe fn dateFromComponents_(&self, comps: NSDateComponents) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dateFromComponents: comps)
    }
    unsafe fn components_fromDate_(
        &self,
        unitFlags: NSCalendarUnit,
        date: NSDate,
    ) -> NSDateComponents
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , components : unitFlags fromDate : date)
    }
    unsafe fn dateByAddingComponents_toDate_options_(
        &self,
        comps: NSDateComponents,
        date: NSDate,
        opts: NSCalendarOptions,
    ) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , dateByAddingComponents : comps toDate : date options : opts)
    }
    unsafe fn components_fromDate_toDate_options_(
        &self,
        unitFlags: NSCalendarUnit,
        startingDate: NSDate,
        resultDate: NSDate,
        opts: NSCalendarOptions,
    ) -> NSDateComponents
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , components : unitFlags fromDate : startingDate toDate : resultDate options : opts)
    }
    unsafe fn getEra_year_month_day_fromDate_(
        &self,
        eraValuePointer: *mut NSInteger,
        yearValuePointer: *mut NSInteger,
        monthValuePointer: *mut NSInteger,
        dayValuePointer: *mut NSInteger,
        date: NSDate,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getEra : eraValuePointer year : yearValuePointer month : monthValuePointer day : dayValuePointer fromDate : date)
    }
    unsafe fn getEra_yearForWeekOfYear_weekOfYear_weekday_fromDate_(
        &self,
        eraValuePointer: *mut NSInteger,
        yearValuePointer: *mut NSInteger,
        weekValuePointer: *mut NSInteger,
        weekdayValuePointer: *mut NSInteger,
        date: NSDate,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getEra : eraValuePointer yearForWeekOfYear : yearValuePointer weekOfYear : weekValuePointer weekday : weekdayValuePointer fromDate : date)
    }
    unsafe fn getHour_minute_second_nanosecond_fromDate_(
        &self,
        hourValuePointer: *mut NSInteger,
        minuteValuePointer: *mut NSInteger,
        secondValuePointer: *mut NSInteger,
        nanosecondValuePointer: *mut NSInteger,
        date: NSDate,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getHour : hourValuePointer minute : minuteValuePointer second : secondValuePointer nanosecond : nanosecondValuePointer fromDate : date)
    }
    unsafe fn component_fromDate_(&self, unit: NSCalendarUnit, date: NSDate) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , component : unit fromDate : date)
    }
    unsafe fn dateWithEra_year_month_day_hour_minute_second_nanosecond_(
        &self,
        eraValue: NSInteger,
        yearValue: NSInteger,
        monthValue: NSInteger,
        dayValue: NSInteger,
        hourValue: NSInteger,
        minuteValue: NSInteger,
        secondValue: NSInteger,
        nanosecondValue: NSInteger,
    ) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , dateWithEra : eraValue year : yearValue month : monthValue day : dayValue hour : hourValue minute : minuteValue second : secondValue nanosecond : nanosecondValue)
    }
    unsafe fn dateWithEra_yearForWeekOfYear_weekOfYear_weekday_hour_minute_second_nanosecond_(
        &self,
        eraValue: NSInteger,
        yearValue: NSInteger,
        weekValue: NSInteger,
        weekdayValue: NSInteger,
        hourValue: NSInteger,
        minuteValue: NSInteger,
        secondValue: NSInteger,
        nanosecondValue: NSInteger,
    ) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , dateWithEra : eraValue yearForWeekOfYear : yearValue weekOfYear : weekValue weekday : weekdayValue hour : hourValue minute : minuteValue second : secondValue nanosecond : nanosecondValue)
    }
    unsafe fn startOfDayForDate_(&self, date: NSDate) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, startOfDayForDate: date)
    }
    unsafe fn componentsInTimeZone_fromDate_(
        &self,
        timezone: NSTimeZone,
        date: NSDate,
    ) -> NSDateComponents
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , componentsInTimeZone : timezone fromDate : date)
    }
    unsafe fn compareDate_toDate_toUnitGranularity_(
        &self,
        date1: NSDate,
        date2: NSDate,
        unit: NSCalendarUnit,
    ) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , compareDate : date1 toDate : date2 toUnitGranularity : unit)
    }
    unsafe fn isDate_equalToDate_toUnitGranularity_(
        &self,
        date1: NSDate,
        date2: NSDate,
        unit: NSCalendarUnit,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , isDate : date1 equalToDate : date2 toUnitGranularity : unit)
    }
    unsafe fn isDate_inSameDayAsDate_(&self, date1: NSDate, date2: NSDate) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , isDate : date1 inSameDayAsDate : date2)
    }
    unsafe fn isDateInToday_(&self, date: NSDate) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isDateInToday: date)
    }
    unsafe fn isDateInYesterday_(&self, date: NSDate) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isDateInYesterday: date)
    }
    unsafe fn isDateInTomorrow_(&self, date: NSDate) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isDateInTomorrow: date)
    }
    unsafe fn isDateInWeekend_(&self, date: NSDate) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isDateInWeekend: date)
    }
    unsafe fn rangeOfWeekendStartDate_interval_containingDate_(
        &self,
        datep: *mut NSDate,
        tip: *mut NSTimeInterval,
        date: NSDate,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , rangeOfWeekendStartDate : datep interval : tip containingDate : date)
    }
    unsafe fn nextWeekendStartDate_interval_options_afterDate_(
        &self,
        datep: *mut NSDate,
        tip: *mut NSTimeInterval,
        options: NSCalendarOptions,
        date: NSDate,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , nextWeekendStartDate : datep interval : tip options : options afterDate : date)
    }
    unsafe fn components_fromDateComponents_toDateComponents_options_(
        &self,
        unitFlags: NSCalendarUnit,
        startingDateComp: NSDateComponents,
        resultDateComp: NSDateComponents,
        options: NSCalendarOptions,
    ) -> NSDateComponents
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , components : unitFlags fromDateComponents : startingDateComp toDateComponents : resultDateComp options : options)
    }
    unsafe fn dateByAddingUnit_value_toDate_options_(
        &self,
        unit: NSCalendarUnit,
        value: NSInteger,
        date: NSDate,
        options: NSCalendarOptions,
    ) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , dateByAddingUnit : unit value : value toDate : date options : options)
    }
    unsafe fn enumerateDatesStartingAfterDate_matchingComponents_options_usingBlock_(
        &self,
        start: NSDate,
        comps: NSDateComponents,
        opts: NSCalendarOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumerateDatesStartingAfterDate : start matchingComponents : comps options : opts usingBlock : block)
    }
    unsafe fn nextDateAfterDate_matchingComponents_options_(
        &self,
        date: NSDate,
        comps: NSDateComponents,
        options: NSCalendarOptions,
    ) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , nextDateAfterDate : date matchingComponents : comps options : options)
    }
    unsafe fn nextDateAfterDate_matchingUnit_value_options_(
        &self,
        date: NSDate,
        unit: NSCalendarUnit,
        value: NSInteger,
        options: NSCalendarOptions,
    ) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , nextDateAfterDate : date matchingUnit : unit value : value options : options)
    }
    unsafe fn nextDateAfterDate_matchingHour_minute_second_options_(
        &self,
        date: NSDate,
        hourValue: NSInteger,
        minuteValue: NSInteger,
        secondValue: NSInteger,
        options: NSCalendarOptions,
    ) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , nextDateAfterDate : date matchingHour : hourValue minute : minuteValue second : secondValue options : options)
    }
    unsafe fn dateBySettingUnit_value_ofDate_options_(
        &self,
        unit: NSCalendarUnit,
        v: NSInteger,
        date: NSDate,
        opts: NSCalendarOptions,
    ) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , dateBySettingUnit : unit value : v ofDate : date options : opts)
    }
    unsafe fn dateBySettingHour_minute_second_ofDate_options_(
        &self,
        h: NSInteger,
        m: NSInteger,
        s: NSInteger,
        date: NSDate,
        opts: NSCalendarOptions,
    ) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , dateBySettingHour : h minute : m second : s ofDate : date options : opts)
    }
    unsafe fn date_matchesComponents_(&self, date: NSDate, components: NSDateComponents) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , date : date matchesComponents : components)
    }
    unsafe fn calendarIdentifier(&self) -> NSCalendarIdentifier
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, calendarIdentifier)
    }
    unsafe fn locale(&self) -> NSLocale
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, locale)
    }
    unsafe fn setLocale_(&self, locale: NSLocale)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setLocale: locale)
    }
    unsafe fn timeZone(&self) -> NSTimeZone
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeZone)
    }
    unsafe fn setTimeZone_(&self, timeZone: NSTimeZone)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTimeZone: timeZone)
    }
    unsafe fn firstWeekday(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, firstWeekday)
    }
    unsafe fn setFirstWeekday_(&self, firstWeekday: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setFirstWeekday: firstWeekday)
    }
    unsafe fn minimumDaysInFirstWeek(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, minimumDaysInFirstWeek)
    }
    unsafe fn setMinimumDaysInFirstWeek_(&self, minimumDaysInFirstWeek: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMinimumDaysInFirstWeek: minimumDaysInFirstWeek)
    }
    unsafe fn eraSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, eraSymbols)
    }
    unsafe fn longEraSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, longEraSymbols)
    }
    unsafe fn monthSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, monthSymbols)
    }
    unsafe fn shortMonthSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shortMonthSymbols)
    }
    unsafe fn veryShortMonthSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, veryShortMonthSymbols)
    }
    unsafe fn standaloneMonthSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, standaloneMonthSymbols)
    }
    unsafe fn shortStandaloneMonthSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shortStandaloneMonthSymbols)
    }
    unsafe fn veryShortStandaloneMonthSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, veryShortStandaloneMonthSymbols)
    }
    unsafe fn weekdaySymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, weekdaySymbols)
    }
    unsafe fn shortWeekdaySymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shortWeekdaySymbols)
    }
    unsafe fn veryShortWeekdaySymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, veryShortWeekdaySymbols)
    }
    unsafe fn standaloneWeekdaySymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, standaloneWeekdaySymbols)
    }
    unsafe fn shortStandaloneWeekdaySymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shortStandaloneWeekdaySymbols)
    }
    unsafe fn veryShortStandaloneWeekdaySymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, veryShortStandaloneWeekdaySymbols)
    }
    unsafe fn quarterSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, quarterSymbols)
    }
    unsafe fn shortQuarterSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shortQuarterSymbols)
    }
    unsafe fn standaloneQuarterSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, standaloneQuarterSymbols)
    }
    unsafe fn shortStandaloneQuarterSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shortStandaloneQuarterSymbols)
    }
    unsafe fn AMSymbol(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, AMSymbol)
    }
    unsafe fn PMSymbol(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, PMSymbol)
    }
    unsafe fn calendarWithIdentifier_(calendarIdentifierConstant: NSString) -> NSCalendar
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSCalendar),
            calendarWithIdentifier: calendarIdentifierConstant
        )
    }
    unsafe fn currentCalendar() -> NSCalendar
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCalendar), currentCalendar)
    }
    unsafe fn autoupdatingCurrentCalendar() -> NSCalendar
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCalendar), autoupdatingCurrentCalendar)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSDateComponents(pub id);
impl std::ops::Deref for NSDateComponents {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDateComponents {}
impl NSDateComponents {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSDateComponents), alloc) })
    }
}
impl PNSCopying for NSDateComponents {}
impl PNSSecureCoding for NSDateComponents {}
impl INSObject for NSDateComponents {}
impl PNSObject for NSDateComponents {}
impl From<NSDateComponents> for NSObject {
    fn from(child: NSDateComponents) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSDateComponents {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSDateComponents, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSDateComponents)) };
        if is_kind_of {
            Ok(NSDateComponents(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSDateComponents")
        }
    }
}
impl INSDateComponents for NSDateComponents {}
pub trait INSDateComponents: Sized + std::ops::Deref {
    unsafe fn week(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, week)
    }
    unsafe fn setWeek_(&self, v: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setWeek: v)
    }
    unsafe fn setValue_forComponent_(&self, value: NSInteger, unit: NSCalendarUnit)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setValue : value forComponent : unit)
    }
    unsafe fn valueForComponent_(&self, unit: NSCalendarUnit) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, valueForComponent: unit)
    }
    unsafe fn isValidDateInCalendar_(&self, calendar: NSCalendar) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isValidDateInCalendar: calendar)
    }
    unsafe fn calendar(&self) -> NSCalendar
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, calendar)
    }
    unsafe fn setCalendar_(&self, calendar: NSCalendar)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCalendar: calendar)
    }
    unsafe fn timeZone(&self) -> NSTimeZone
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeZone)
    }
    unsafe fn setTimeZone_(&self, timeZone: NSTimeZone)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTimeZone: timeZone)
    }
    unsafe fn era(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, era)
    }
    unsafe fn setEra_(&self, era: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setEra: era)
    }
    unsafe fn year(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, year)
    }
    unsafe fn setYear_(&self, year: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setYear: year)
    }
    unsafe fn month(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, month)
    }
    unsafe fn setMonth_(&self, month: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMonth: month)
    }
    unsafe fn day(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, day)
    }
    unsafe fn setDay_(&self, day: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDay: day)
    }
    unsafe fn hour(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hour)
    }
    unsafe fn setHour_(&self, hour: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setHour: hour)
    }
    unsafe fn minute(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, minute)
    }
    unsafe fn setMinute_(&self, minute: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMinute: minute)
    }
    unsafe fn second(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, second)
    }
    unsafe fn setSecond_(&self, second: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setSecond: second)
    }
    unsafe fn nanosecond(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, nanosecond)
    }
    unsafe fn setNanosecond_(&self, nanosecond: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setNanosecond: nanosecond)
    }
    unsafe fn weekday(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, weekday)
    }
    unsafe fn setWeekday_(&self, weekday: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setWeekday: weekday)
    }
    unsafe fn weekdayOrdinal(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, weekdayOrdinal)
    }
    unsafe fn setWeekdayOrdinal_(&self, weekdayOrdinal: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setWeekdayOrdinal: weekdayOrdinal)
    }
    unsafe fn quarter(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, quarter)
    }
    unsafe fn setQuarter_(&self, quarter: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setQuarter: quarter)
    }
    unsafe fn weekOfMonth(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, weekOfMonth)
    }
    unsafe fn setWeekOfMonth_(&self, weekOfMonth: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setWeekOfMonth: weekOfMonth)
    }
    unsafe fn weekOfYear(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, weekOfYear)
    }
    unsafe fn setWeekOfYear_(&self, weekOfYear: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setWeekOfYear: weekOfYear)
    }
    unsafe fn yearForWeekOfYear(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, yearForWeekOfYear)
    }
    unsafe fn setYearForWeekOfYear_(&self, yearForWeekOfYear: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setYearForWeekOfYear: yearForWeekOfYear)
    }
    unsafe fn isLeapMonth(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isLeapMonth)
    }
    unsafe fn setLeapMonth_(&self, leapMonth: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setLeapMonth: leapMonth)
    }
    unsafe fn date(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, date)
    }
    unsafe fn isValidDate(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isValidDate)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSCoder(pub id);
impl std::ops::Deref for NSCoder {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSCoder {}
impl NSCoder {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSCoder), alloc) })
    }
}
impl INSObject for NSCoder {}
impl PNSObject for NSCoder {}
impl From<NSCoder> for NSObject {
    fn from(child: NSCoder) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSCoder {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSCoder, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSCoder)) };
        if is_kind_of {
            Ok(NSCoder(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSCoder")
        }
    }
}
impl INSCoder for NSCoder {}
pub trait INSCoder: Sized + std::ops::Deref {
    unsafe fn encodeValueOfObjCType_at_(
        &self,
        type_: *const ::std::os::raw::c_char,
        addr: *const ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeValueOfObjCType : type_ at : addr)
    }
    unsafe fn encodeDataObject_(&self, data: NSData)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, encodeDataObject: data)
    }
    unsafe fn decodeDataObject(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decodeDataObject)
    }
    unsafe fn decodeValueOfObjCType_at_size_(
        &self,
        type_: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
        size: NSUInteger,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , decodeValueOfObjCType : type_ at : data size : size)
    }
    unsafe fn versionForClassName_(&self, className: NSString) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, versionForClassName: className)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSData(pub id);
impl std::ops::Deref for NSData {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSData {}
impl NSData {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSData), alloc) })
    }
}
impl PNSCopying for NSData {}
impl PNSMutableCopying for NSData {}
impl PNSSecureCoding for NSData {}
impl INSObject for NSData {}
impl PNSObject for NSData {}
impl From<NSData> for NSObject {
    fn from(child: NSData) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSData {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSData, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSData)) };
        if is_kind_of {
            Ok(NSData(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSData")
        }
    }
}
impl INSData for NSData {}
pub trait INSData: Sized + std::ops::Deref {
    unsafe fn length(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, length)
    }
    unsafe fn bytes(&self) -> *const ::std::os::raw::c_void
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, bytes)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSMutableData(pub id);
impl std::ops::Deref for NSMutableData {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMutableData {}
impl NSMutableData {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSMutableData), alloc) })
    }
}
impl INSData for NSMutableData {}
impl PNSCopying for NSMutableData {}
impl PNSMutableCopying for NSMutableData {}
impl PNSSecureCoding for NSMutableData {}
impl From<NSMutableData> for NSData {
    fn from(child: NSMutableData) -> NSData {
        NSData(child.0)
    }
}
impl std::convert::TryFrom<NSData> for NSMutableData {
    type Error = &'static str;
    fn try_from(parent: NSData) -> Result<NSMutableData, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSMutableData)) };
        if is_kind_of {
            Ok(NSMutableData(parent.0))
        } else {
            Err("This NSData cannot be downcasted to NSMutableData")
        }
    }
}
impl INSObject for NSMutableData {}
impl PNSObject for NSMutableData {}
impl From<NSMutableData> for NSObject {
    fn from(child: NSMutableData) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMutableData {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMutableData, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSMutableData)) };
        if is_kind_of {
            Ok(NSMutableData(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMutableData")
        }
    }
}
impl INSMutableData for NSMutableData {}
pub trait INSMutableData: Sized + std::ops::Deref {
    unsafe fn mutableBytes(&self) -> *mut ::std::os::raw::c_void
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, mutableBytes)
    }
    unsafe fn length(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, length)
    }
    unsafe fn setLength_(&self, length: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setLength: length)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSDateInterval(pub id);
impl std::ops::Deref for NSDateInterval {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDateInterval {}
impl NSDateInterval {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSDateInterval), alloc) })
    }
}
impl PNSCopying for NSDateInterval {}
impl PNSSecureCoding for NSDateInterval {}
impl INSObject for NSDateInterval {}
impl PNSObject for NSDateInterval {}
impl From<NSDateInterval> for NSObject {
    fn from(child: NSDateInterval) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSDateInterval {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSDateInterval, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSDateInterval)) };
        if is_kind_of {
            Ok(NSDateInterval(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSDateInterval")
        }
    }
}
impl INSDateInterval for NSDateInterval {}
pub trait INSDateInterval: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn initWithStartDate_duration_(
        &self,
        startDate: NSDate,
        duration: NSTimeInterval,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithStartDate : startDate duration : duration)
    }
    unsafe fn initWithStartDate_endDate_(&self, startDate: NSDate, endDate: NSDate) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithStartDate : startDate endDate : endDate)
    }
    unsafe fn compare_(&self, dateInterval: NSDateInterval) -> NSComparisonResult
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, compare: dateInterval)
    }
    unsafe fn isEqualToDateInterval_(&self, dateInterval: NSDateInterval) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEqualToDateInterval: dateInterval)
    }
    unsafe fn intersectsDateInterval_(&self, dateInterval: NSDateInterval) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, intersectsDateInterval: dateInterval)
    }
    unsafe fn intersectionWithDateInterval_(&self, dateInterval: NSDateInterval) -> NSDateInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, intersectionWithDateInterval: dateInterval)
    }
    unsafe fn containsDate_(&self, date: NSDate) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, containsDate: date)
    }
    unsafe fn startDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, startDate)
    }
    unsafe fn endDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, endDate)
    }
    unsafe fn duration(&self) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, duration)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSAttributedString(pub id);
impl std::ops::Deref for NSAttributedString {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSAttributedString {}
impl NSAttributedString {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSAttributedString), alloc) })
    }
}
impl PNSCopying for NSAttributedString {}
impl PNSMutableCopying for NSAttributedString {}
impl PNSSecureCoding for NSAttributedString {}
impl INSObject for NSAttributedString {}
impl PNSObject for NSAttributedString {}
impl From<NSAttributedString> for NSObject {
    fn from(child: NSAttributedString) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSAttributedString {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSAttributedString, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSAttributedString)) };
        if is_kind_of {
            Ok(NSAttributedString(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSAttributedString")
        }
    }
}
impl INSAttributedString for NSAttributedString {}
pub trait INSAttributedString: Sized + std::ops::Deref {
    unsafe fn attributesAtIndex_effectiveRange_(
        &self,
        location: NSUInteger,
        range: NSRangePointer,
    ) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , attributesAtIndex : location effectiveRange : range)
    }
    unsafe fn string(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, string)
    }
}
pub const NSFormattingContext_NSFormattingContextUnknown: NSFormattingContext = 0;
pub const NSFormattingContext_NSFormattingContextDynamic: NSFormattingContext = 1;
pub const NSFormattingContext_NSFormattingContextStandalone: NSFormattingContext = 2;
pub const NSFormattingContext_NSFormattingContextListItem: NSFormattingContext = 3;
pub const NSFormattingContext_NSFormattingContextBeginningOfSentence: NSFormattingContext = 4;
pub const NSFormattingContext_NSFormattingContextMiddleOfSentence: NSFormattingContext = 5;
pub type NSFormattingContext = NSInteger;
#[repr(transparent)]
#[derive(Clone)]
pub struct NSFormatter(pub id);
impl std::ops::Deref for NSFormatter {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSFormatter {}
impl NSFormatter {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSFormatter), alloc) })
    }
}
impl PNSCopying for NSFormatter {}
impl PNSCoding for NSFormatter {}
impl INSObject for NSFormatter {}
impl PNSObject for NSFormatter {}
impl From<NSFormatter> for NSObject {
    fn from(child: NSFormatter) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSFormatter {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSFormatter, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSFormatter)) };
        if is_kind_of {
            Ok(NSFormatter(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSFormatter")
        }
    }
}
impl INSFormatter for NSFormatter {}
pub trait INSFormatter: Sized + std::ops::Deref {
    unsafe fn stringForObjectValue_(&self, obj: id) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringForObjectValue: obj)
    }
    unsafe fn attributedStringForObjectValue_withDefaultAttributes_(
        &self,
        obj: id,
        attrs: NSDictionary,
    ) -> NSAttributedString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , attributedStringForObjectValue : obj withDefaultAttributes : attrs)
    }
    unsafe fn editingStringForObjectValue_(&self, obj: id) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, editingStringForObjectValue: obj)
    }
    unsafe fn getObjectValue_forString_errorDescription_(
        &self,
        obj: *mut id,
        string: NSString,
        error: *mut NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getObjectValue : obj forString : string errorDescription : error)
    }
    unsafe fn isPartialStringValid_newEditingString_errorDescription_(
        &self,
        partialString: NSString,
        newString: *mut NSString,
        error: *mut NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , isPartialStringValid : partialString newEditingString : newString errorDescription : error)
    }
    unsafe fn isPartialStringValid_proposedSelectedRange_originalString_originalSelectedRange_errorDescription_(
        &self,
        partialStringPtr: *mut NSString,
        proposedSelRangePtr: NSRangePointer,
        origString: NSString,
        origSelRange: NSRange,
        error: *mut NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , isPartialStringValid : partialStringPtr proposedSelectedRange : proposedSelRangePtr originalString : origString originalSelectedRange : origSelRange errorDescription : error)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSDateFormatter(pub id);
impl std::ops::Deref for NSDateFormatter {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDateFormatter {}
impl NSDateFormatter {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSDateFormatter), alloc) })
    }
}
impl INSFormatter for NSDateFormatter {}
impl PNSCopying for NSDateFormatter {}
impl PNSCoding for NSDateFormatter {}
impl From<NSDateFormatter> for NSFormatter {
    fn from(child: NSDateFormatter) -> NSFormatter {
        NSFormatter(child.0)
    }
}
impl std::convert::TryFrom<NSFormatter> for NSDateFormatter {
    type Error = &'static str;
    fn try_from(parent: NSFormatter) -> Result<NSDateFormatter, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSDateFormatter)) };
        if is_kind_of {
            Ok(NSDateFormatter(parent.0))
        } else {
            Err("This NSFormatter cannot be downcasted to NSDateFormatter")
        }
    }
}
impl INSObject for NSDateFormatter {}
impl PNSObject for NSDateFormatter {}
impl From<NSDateFormatter> for NSObject {
    fn from(child: NSDateFormatter) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSDateFormatter {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSDateFormatter, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSDateFormatter)) };
        if is_kind_of {
            Ok(NSDateFormatter(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSDateFormatter")
        }
    }
}
impl INSDateFormatter for NSDateFormatter {}
pub trait INSDateFormatter: Sized + std::ops::Deref {
    unsafe fn getObjectValue_forString_range_error_(
        &self,
        obj: *mut id,
        string: NSString,
        rangep: *mut NSRange,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getObjectValue : obj forString : string range : rangep error : error)
    }
    unsafe fn stringFromDate_(&self, date: NSDate) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringFromDate: date)
    }
    unsafe fn dateFromString_(&self, string: NSString) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dateFromString: string)
    }
    unsafe fn setLocalizedDateFormatFromTemplate_(&self, dateFormatTemplate: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setLocalizedDateFormatFromTemplate: dateFormatTemplate
        )
    }
    unsafe fn formattingContext(&self) -> NSFormattingContext
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, formattingContext)
    }
    unsafe fn setFormattingContext_(&self, formattingContext: NSFormattingContext)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setFormattingContext: formattingContext)
    }
    unsafe fn dateFormat(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dateFormat)
    }
    unsafe fn setDateFormat_(&self, dateFormat: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDateFormat: dateFormat)
    }
    unsafe fn dateStyle(&self) -> NSDateFormatterStyle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dateStyle)
    }
    unsafe fn setDateStyle_(&self, dateStyle: NSDateFormatterStyle)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDateStyle: dateStyle)
    }
    unsafe fn timeStyle(&self) -> NSDateFormatterStyle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeStyle)
    }
    unsafe fn setTimeStyle_(&self, timeStyle: NSDateFormatterStyle)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTimeStyle: timeStyle)
    }
    unsafe fn locale(&self) -> NSLocale
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, locale)
    }
    unsafe fn setLocale_(&self, locale: NSLocale)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setLocale: locale)
    }
    unsafe fn generatesCalendarDates(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, generatesCalendarDates)
    }
    unsafe fn setGeneratesCalendarDates_(&self, generatesCalendarDates: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setGeneratesCalendarDates: generatesCalendarDates)
    }
    unsafe fn formatterBehavior(&self) -> NSDateFormatterBehavior
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, formatterBehavior)
    }
    unsafe fn setFormatterBehavior_(&self, formatterBehavior: NSDateFormatterBehavior)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setFormatterBehavior: formatterBehavior)
    }
    unsafe fn timeZone(&self) -> NSTimeZone
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeZone)
    }
    unsafe fn setTimeZone_(&self, timeZone: NSTimeZone)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTimeZone: timeZone)
    }
    unsafe fn calendar(&self) -> NSCalendar
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, calendar)
    }
    unsafe fn setCalendar_(&self, calendar: NSCalendar)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCalendar: calendar)
    }
    unsafe fn isLenient(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isLenient)
    }
    unsafe fn setLenient_(&self, lenient: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setLenient: lenient)
    }
    unsafe fn twoDigitStartDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, twoDigitStartDate)
    }
    unsafe fn setTwoDigitStartDate_(&self, twoDigitStartDate: NSDate)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTwoDigitStartDate: twoDigitStartDate)
    }
    unsafe fn defaultDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, defaultDate)
    }
    unsafe fn setDefaultDate_(&self, defaultDate: NSDate)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDefaultDate: defaultDate)
    }
    unsafe fn eraSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, eraSymbols)
    }
    unsafe fn setEraSymbols_(&self, eraSymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setEraSymbols: eraSymbols)
    }
    unsafe fn monthSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, monthSymbols)
    }
    unsafe fn setMonthSymbols_(&self, monthSymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMonthSymbols: monthSymbols)
    }
    unsafe fn shortMonthSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shortMonthSymbols)
    }
    unsafe fn setShortMonthSymbols_(&self, shortMonthSymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setShortMonthSymbols: shortMonthSymbols)
    }
    unsafe fn weekdaySymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, weekdaySymbols)
    }
    unsafe fn setWeekdaySymbols_(&self, weekdaySymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setWeekdaySymbols: weekdaySymbols)
    }
    unsafe fn shortWeekdaySymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shortWeekdaySymbols)
    }
    unsafe fn setShortWeekdaySymbols_(&self, shortWeekdaySymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setShortWeekdaySymbols: shortWeekdaySymbols)
    }
    unsafe fn AMSymbol(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, AMSymbol)
    }
    unsafe fn setAMSymbol_(&self, AMSymbol: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setAMSymbol: AMSymbol)
    }
    unsafe fn PMSymbol(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, PMSymbol)
    }
    unsafe fn setPMSymbol_(&self, PMSymbol: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setPMSymbol: PMSymbol)
    }
    unsafe fn longEraSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, longEraSymbols)
    }
    unsafe fn setLongEraSymbols_(&self, longEraSymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setLongEraSymbols: longEraSymbols)
    }
    unsafe fn veryShortMonthSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, veryShortMonthSymbols)
    }
    unsafe fn setVeryShortMonthSymbols_(&self, veryShortMonthSymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setVeryShortMonthSymbols: veryShortMonthSymbols)
    }
    unsafe fn standaloneMonthSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, standaloneMonthSymbols)
    }
    unsafe fn setStandaloneMonthSymbols_(&self, standaloneMonthSymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setStandaloneMonthSymbols: standaloneMonthSymbols)
    }
    unsafe fn shortStandaloneMonthSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shortStandaloneMonthSymbols)
    }
    unsafe fn setShortStandaloneMonthSymbols_(&self, shortStandaloneMonthSymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setShortStandaloneMonthSymbols: shortStandaloneMonthSymbols
        )
    }
    unsafe fn veryShortStandaloneMonthSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, veryShortStandaloneMonthSymbols)
    }
    unsafe fn setVeryShortStandaloneMonthSymbols_(&self, veryShortStandaloneMonthSymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setVeryShortStandaloneMonthSymbols: veryShortStandaloneMonthSymbols
        )
    }
    unsafe fn veryShortWeekdaySymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, veryShortWeekdaySymbols)
    }
    unsafe fn setVeryShortWeekdaySymbols_(&self, veryShortWeekdaySymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setVeryShortWeekdaySymbols: veryShortWeekdaySymbols)
    }
    unsafe fn standaloneWeekdaySymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, standaloneWeekdaySymbols)
    }
    unsafe fn setStandaloneWeekdaySymbols_(&self, standaloneWeekdaySymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setStandaloneWeekdaySymbols: standaloneWeekdaySymbols)
    }
    unsafe fn shortStandaloneWeekdaySymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shortStandaloneWeekdaySymbols)
    }
    unsafe fn setShortStandaloneWeekdaySymbols_(&self, shortStandaloneWeekdaySymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setShortStandaloneWeekdaySymbols: shortStandaloneWeekdaySymbols
        )
    }
    unsafe fn veryShortStandaloneWeekdaySymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, veryShortStandaloneWeekdaySymbols)
    }
    unsafe fn setVeryShortStandaloneWeekdaySymbols_(
        &self,
        veryShortStandaloneWeekdaySymbols: NSArray,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setVeryShortStandaloneWeekdaySymbols: veryShortStandaloneWeekdaySymbols
        )
    }
    unsafe fn quarterSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, quarterSymbols)
    }
    unsafe fn setQuarterSymbols_(&self, quarterSymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setQuarterSymbols: quarterSymbols)
    }
    unsafe fn shortQuarterSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shortQuarterSymbols)
    }
    unsafe fn setShortQuarterSymbols_(&self, shortQuarterSymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setShortQuarterSymbols: shortQuarterSymbols)
    }
    unsafe fn standaloneQuarterSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, standaloneQuarterSymbols)
    }
    unsafe fn setStandaloneQuarterSymbols_(&self, standaloneQuarterSymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setStandaloneQuarterSymbols: standaloneQuarterSymbols)
    }
    unsafe fn shortStandaloneQuarterSymbols(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, shortStandaloneQuarterSymbols)
    }
    unsafe fn setShortStandaloneQuarterSymbols_(&self, shortStandaloneQuarterSymbols: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setShortStandaloneQuarterSymbols: shortStandaloneQuarterSymbols
        )
    }
    unsafe fn gregorianStartDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, gregorianStartDate)
    }
    unsafe fn setGregorianStartDate_(&self, gregorianStartDate: NSDate)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setGregorianStartDate: gregorianStartDate)
    }
    unsafe fn doesRelativeDateFormatting(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, doesRelativeDateFormatting)
    }
    unsafe fn setDoesRelativeDateFormatting_(&self, doesRelativeDateFormatting: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setDoesRelativeDateFormatting: doesRelativeDateFormatting
        )
    }
    unsafe fn localizedStringFromDate_dateStyle_timeStyle_(
        date: NSDate,
        dstyle: NSDateFormatterStyle,
        tstyle: NSDateFormatterStyle,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSDateFormatter) , localizedStringFromDate : date dateStyle : dstyle timeStyle : tstyle)
    }
    unsafe fn dateFormatFromTemplate_options_locale_(
        tmplate: NSString,
        opts: NSUInteger,
        locale: NSLocale,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSDateFormatter) , dateFormatFromTemplate : tmplate options : opts locale : locale)
    }
    unsafe fn defaultFormatterBehavior() -> NSDateFormatterBehavior
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDateFormatter), defaultFormatterBehavior)
    }
    unsafe fn setDefaultFormatterBehavior_(defaultFormatterBehavior: NSDateFormatterBehavior)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSDateFormatter),
            setDefaultFormatterBehavior: defaultFormatterBehavior
        )
    }
}
pub const NSDateFormatterStyle_NSDateFormatterNoStyle: NSDateFormatterStyle = 0;
pub const NSDateFormatterStyle_NSDateFormatterShortStyle: NSDateFormatterStyle = 1;
pub const NSDateFormatterStyle_NSDateFormatterMediumStyle: NSDateFormatterStyle = 2;
pub const NSDateFormatterStyle_NSDateFormatterLongStyle: NSDateFormatterStyle = 3;
pub const NSDateFormatterStyle_NSDateFormatterFullStyle: NSDateFormatterStyle = 4;
pub type NSDateFormatterStyle = NSUInteger;
pub const NSDateFormatterBehavior_NSDateFormatterBehaviorDefault: NSDateFormatterBehavior = 0;
pub const NSDateFormatterBehavior_NSDateFormatterBehavior10_0: NSDateFormatterBehavior = 1000;
pub const NSDateFormatterBehavior_NSDateFormatterBehavior10_4: NSDateFormatterBehavior = 1040;
pub type NSDateFormatterBehavior = NSUInteger;
impl NSDateFormatter_NSDateFormatterCompatibility for NSDateFormatter {}
pub trait NSDateFormatter_NSDateFormatterCompatibility: Sized + std::ops::Deref {
    unsafe fn initWithDateFormat_allowNaturalLanguage_(&self, format: NSString, flag: BOOL) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithDateFormat : format allowNaturalLanguage : flag)
    }
    unsafe fn allowsNaturalLanguage(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowsNaturalLanguage)
    }
}
pub const NSDateIntervalFormatterStyle_NSDateIntervalFormatterNoStyle:
    NSDateIntervalFormatterStyle = 0;
pub const NSDateIntervalFormatterStyle_NSDateIntervalFormatterShortStyle:
    NSDateIntervalFormatterStyle = 1;
pub const NSDateIntervalFormatterStyle_NSDateIntervalFormatterMediumStyle:
    NSDateIntervalFormatterStyle = 2;
pub const NSDateIntervalFormatterStyle_NSDateIntervalFormatterLongStyle:
    NSDateIntervalFormatterStyle = 3;
pub const NSDateIntervalFormatterStyle_NSDateIntervalFormatterFullStyle:
    NSDateIntervalFormatterStyle = 4;
pub type NSDateIntervalFormatterStyle = NSUInteger;
#[repr(transparent)]
#[derive(Clone)]
pub struct NSDateIntervalFormatter(pub id);
impl std::ops::Deref for NSDateIntervalFormatter {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDateIntervalFormatter {}
impl NSDateIntervalFormatter {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSDateIntervalFormatter), alloc) })
    }
}
impl INSFormatter for NSDateIntervalFormatter {}
impl PNSCopying for NSDateIntervalFormatter {}
impl PNSCoding for NSDateIntervalFormatter {}
impl From<NSDateIntervalFormatter> for NSFormatter {
    fn from(child: NSDateIntervalFormatter) -> NSFormatter {
        NSFormatter(child.0)
    }
}
impl std::convert::TryFrom<NSFormatter> for NSDateIntervalFormatter {
    type Error = &'static str;
    fn try_from(parent: NSFormatter) -> Result<NSDateIntervalFormatter, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSDateIntervalFormatter)) };
        if is_kind_of {
            Ok(NSDateIntervalFormatter(parent.0))
        } else {
            Err("This NSFormatter cannot be downcasted to NSDateIntervalFormatter")
        }
    }
}
impl INSObject for NSDateIntervalFormatter {}
impl PNSObject for NSDateIntervalFormatter {}
impl From<NSDateIntervalFormatter> for NSObject {
    fn from(child: NSDateIntervalFormatter) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSDateIntervalFormatter {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSDateIntervalFormatter, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSDateIntervalFormatter)) };
        if is_kind_of {
            Ok(NSDateIntervalFormatter(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSDateIntervalFormatter")
        }
    }
}
impl INSDateIntervalFormatter for NSDateIntervalFormatter {}
pub trait INSDateIntervalFormatter: Sized + std::ops::Deref {
    unsafe fn stringFromDate_toDate_(&self, fromDate: NSDate, toDate: NSDate) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , stringFromDate : fromDate toDate : toDate)
    }
    unsafe fn stringFromDateInterval_(&self, dateInterval: NSDateInterval) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringFromDateInterval: dateInterval)
    }
    unsafe fn locale(&self) -> NSLocale
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, locale)
    }
    unsafe fn setLocale_(&self, locale: NSLocale)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setLocale: locale)
    }
    unsafe fn calendar(&self) -> NSCalendar
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, calendar)
    }
    unsafe fn setCalendar_(&self, calendar: NSCalendar)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCalendar: calendar)
    }
    unsafe fn timeZone(&self) -> NSTimeZone
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeZone)
    }
    unsafe fn setTimeZone_(&self, timeZone: NSTimeZone)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTimeZone: timeZone)
    }
    unsafe fn dateTemplate(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dateTemplate)
    }
    unsafe fn setDateTemplate_(&self, dateTemplate: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDateTemplate: dateTemplate)
    }
    unsafe fn dateStyle(&self) -> NSDateIntervalFormatterStyle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dateStyle)
    }
    unsafe fn setDateStyle_(&self, dateStyle: NSDateIntervalFormatterStyle)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDateStyle: dateStyle)
    }
    unsafe fn timeStyle(&self) -> NSDateIntervalFormatterStyle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeStyle)
    }
    unsafe fn setTimeStyle_(&self, timeStyle: NSDateIntervalFormatterStyle)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTimeStyle: timeStyle)
    }
}
pub type NSLocaleKey = NSString;
#[repr(transparent)]
#[derive(Clone)]
pub struct NSLocale(pub id);
impl std::ops::Deref for NSLocale {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSLocale {}
impl NSLocale {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSLocale), alloc) })
    }
}
impl PNSCopying for NSLocale {}
impl PNSSecureCoding for NSLocale {}
impl INSObject for NSLocale {}
impl PNSObject for NSLocale {}
impl From<NSLocale> for NSObject {
    fn from(child: NSLocale) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSLocale {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSLocale, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSLocale)) };
        if is_kind_of {
            Ok(NSLocale(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSLocale")
        }
    }
}
impl INSLocale for NSLocale {}
pub trait INSLocale: Sized + std::ops::Deref {
    unsafe fn objectForKey_(&self, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectForKey: key)
    }
    unsafe fn displayNameForKey_value_(&self, key: NSString, value: id) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , displayNameForKey : key value : value)
    }
    unsafe fn initWithLocaleIdentifier_(&self, string: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithLocaleIdentifier: string)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
}
pub type NSErrorDomain = NSString;
pub type NSErrorUserInfoKey = NSString;
#[repr(transparent)]
#[derive(Clone)]
pub struct NSError(pub id);
impl std::ops::Deref for NSError {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSError {}
impl NSError {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSError), alloc) })
    }
}
impl PNSCopying for NSError {}
impl PNSSecureCoding for NSError {}
impl INSObject for NSError {}
impl PNSObject for NSError {}
impl From<NSError> for NSObject {
    fn from(child: NSError) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSError {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSError, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSError)) };
        if is_kind_of {
            Ok(NSError(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSError")
        }
    }
}
impl INSError for NSError {}
pub trait INSError: Sized + std::ops::Deref {
    unsafe fn initWithDomain_code_userInfo_(
        &self,
        domain: NSString,
        code: NSInteger,
        dict: NSDictionary,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithDomain : domain code : code userInfo : dict)
    }
    unsafe fn domain(&self) -> NSErrorDomain
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, domain)
    }
    unsafe fn code(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, code)
    }
    unsafe fn userInfo(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, userInfo)
    }
    unsafe fn localizedDescription(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedDescription)
    }
    unsafe fn localizedFailureReason(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedFailureReason)
    }
    unsafe fn localizedRecoverySuggestion(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedRecoverySuggestion)
    }
    unsafe fn localizedRecoveryOptions(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localizedRecoveryOptions)
    }
    unsafe fn recoveryAttempter(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, recoveryAttempter)
    }
    unsafe fn helpAnchor(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, helpAnchor)
    }
    unsafe fn underlyingErrors(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, underlyingErrors)
    }
    unsafe fn errorWithDomain_code_userInfo_(
        domain: NSString,
        code: NSInteger,
        dict: NSDictionary,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSError) , errorWithDomain : domain code : code userInfo : dict)
    }
    unsafe fn setUserInfoValueProviderForDomain_provider_(
        errorDomain: NSString,
        provider: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSError) , setUserInfoValueProviderForDomain : errorDomain provider : provider)
    }
    unsafe fn userInfoValueProviderForDomain_(errorDomain: NSString) -> *mut ::std::os::raw::c_void
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSError), userInfoValueProviderForDomain: errorDomain)
    }
}
impl NSObject_NSErrorRecoveryAttempting for NSObject {}
pub trait NSObject_NSErrorRecoveryAttempting: Sized + std::ops::Deref {
    unsafe fn attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo_(
        &self,
        error: NSError,
        recoveryOptionIndex: NSUInteger,
        delegate: id,
        didRecoverSelector: objc::runtime::Sel,
        contextInfo: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , attemptRecoveryFromError : error optionIndex : recoveryOptionIndex delegate : delegate didRecoverSelector : didRecoverSelector contextInfo : contextInfo)
    }
    unsafe fn attemptRecoveryFromError_optionIndex_(
        &self,
        error: NSError,
        recoveryOptionIndex: NSUInteger,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , attemptRecoveryFromError : error optionIndex : recoveryOptionIndex)
    }
}
extern "C" {
    pub static NSDefaultRunLoopMode: NSRunLoopMode;
}
extern "C" {
    pub static NSRunLoopCommonModes: NSRunLoopMode;
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSRunLoop(pub id);
impl std::ops::Deref for NSRunLoop {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSRunLoop {}
impl NSRunLoop {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSRunLoop), alloc) })
    }
}
impl INSObject for NSRunLoop {}
impl PNSObject for NSRunLoop {}
impl From<NSRunLoop> for NSObject {
    fn from(child: NSRunLoop) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSRunLoop {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSRunLoop, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSRunLoop)) };
        if is_kind_of {
            Ok(NSRunLoop(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSRunLoop")
        }
    }
}
impl INSRunLoop for NSRunLoop {}
pub trait INSRunLoop: Sized + std::ops::Deref {
    unsafe fn getCFRunLoop(&self) -> CFRunLoopRef
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, getCFRunLoop)
    }
    unsafe fn addTimer_forMode_(&self, timer: NSTimer, mode: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , addTimer : timer forMode : mode)
    }
    unsafe fn addPort_forMode_(&self, aPort: NSPort, mode: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , addPort : aPort forMode : mode)
    }
    unsafe fn removePort_forMode_(&self, aPort: NSPort, mode: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removePort : aPort forMode : mode)
    }
    unsafe fn limitDateForMode_(&self, mode: NSString) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, limitDateForMode: mode)
    }
    unsafe fn acceptInputForMode_beforeDate_(&self, mode: NSString, limitDate: NSDate)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , acceptInputForMode : mode beforeDate : limitDate)
    }
    unsafe fn currentMode(&self) -> NSRunLoopMode
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, currentMode)
    }
    unsafe fn currentRunLoop() -> NSRunLoop
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSRunLoop), currentRunLoop)
    }
    unsafe fn mainRunLoop() -> NSRunLoop
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSRunLoop), mainRunLoop)
    }
}
impl NSRunLoop_NSRunLoopConveniences for NSRunLoop {}
pub trait NSRunLoop_NSRunLoopConveniences: Sized + std::ops::Deref {
    unsafe fn run(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, run)
    }
    unsafe fn runUntilDate_(&self, limitDate: NSDate)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, runUntilDate: limitDate)
    }
    unsafe fn runMode_beforeDate_(&self, mode: NSString, limitDate: NSDate) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , runMode : mode beforeDate : limitDate)
    }
    unsafe fn configureAsServer(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, configureAsServer)
    }
    unsafe fn performInModes_block_(&self, modes: NSArray, block: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performInModes : modes block : block)
    }
    unsafe fn performBlock_(&self, block: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, performBlock: block)
    }
}
impl NSObject_NSDelayedPerforming for NSObject {}
pub trait NSObject_NSDelayedPerforming: Sized + std::ops::Deref {
    unsafe fn performSelector_withObject_afterDelay_inModes_(
        &self,
        aSelector: objc::runtime::Sel,
        anArgument: id,
        delay: NSTimeInterval,
        modes: NSArray,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performSelector : aSelector withObject : anArgument afterDelay : delay inModes : modes)
    }
    unsafe fn performSelector_withObject_afterDelay_(
        &self,
        aSelector: objc::runtime::Sel,
        anArgument: id,
        delay: NSTimeInterval,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performSelector : aSelector withObject : anArgument afterDelay : delay)
    }
    unsafe fn cancelPreviousPerformRequestsWithTarget_selector_object_(
        aTarget: id,
        aSelector: objc::runtime::Sel,
        anArgument: id,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSObject) , cancelPreviousPerformRequestsWithTarget : aTarget selector : aSelector object : anArgument)
    }
    unsafe fn cancelPreviousPerformRequestsWithTarget_(aTarget: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSObject),
            cancelPreviousPerformRequestsWithTarget: aTarget
        )
    }
}
impl NSRunLoop_NSOrderedPerform for NSRunLoop {}
pub trait NSRunLoop_NSOrderedPerform: Sized + std::ops::Deref {
    unsafe fn performSelector_target_argument_order_modes_(
        &self,
        aSelector: objc::runtime::Sel,
        target: id,
        arg: id,
        order: NSUInteger,
        modes: NSArray,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performSelector : aSelector target : target argument : arg order : order modes : modes)
    }
    unsafe fn cancelPerformSelector_target_argument_(
        &self,
        aSelector: objc::runtime::Sel,
        target: id,
        arg: id,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , cancelPerformSelector : aSelector target : target argument : arg)
    }
    unsafe fn cancelPerformSelectorsWithTarget_(&self, target: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, cancelPerformSelectorsWithTarget: target)
    }
}
pub const NSSearchPathDirectory_NSApplicationDirectory: NSSearchPathDirectory = 1;
pub const NSSearchPathDirectory_NSDemoApplicationDirectory: NSSearchPathDirectory = 2;
pub const NSSearchPathDirectory_NSDeveloperApplicationDirectory: NSSearchPathDirectory = 3;
pub const NSSearchPathDirectory_NSAdminApplicationDirectory: NSSearchPathDirectory = 4;
pub const NSSearchPathDirectory_NSLibraryDirectory: NSSearchPathDirectory = 5;
pub const NSSearchPathDirectory_NSDeveloperDirectory: NSSearchPathDirectory = 6;
pub const NSSearchPathDirectory_NSUserDirectory: NSSearchPathDirectory = 7;
pub const NSSearchPathDirectory_NSDocumentationDirectory: NSSearchPathDirectory = 8;
pub const NSSearchPathDirectory_NSDocumentDirectory: NSSearchPathDirectory = 9;
pub const NSSearchPathDirectory_NSCoreServiceDirectory: NSSearchPathDirectory = 10;
pub const NSSearchPathDirectory_NSAutosavedInformationDirectory: NSSearchPathDirectory = 11;
pub const NSSearchPathDirectory_NSDesktopDirectory: NSSearchPathDirectory = 12;
pub const NSSearchPathDirectory_NSCachesDirectory: NSSearchPathDirectory = 13;
pub const NSSearchPathDirectory_NSApplicationSupportDirectory: NSSearchPathDirectory = 14;
pub const NSSearchPathDirectory_NSDownloadsDirectory: NSSearchPathDirectory = 15;
pub const NSSearchPathDirectory_NSInputMethodsDirectory: NSSearchPathDirectory = 16;
pub const NSSearchPathDirectory_NSMoviesDirectory: NSSearchPathDirectory = 17;
pub const NSSearchPathDirectory_NSMusicDirectory: NSSearchPathDirectory = 18;
pub const NSSearchPathDirectory_NSPicturesDirectory: NSSearchPathDirectory = 19;
pub const NSSearchPathDirectory_NSPrinterDescriptionDirectory: NSSearchPathDirectory = 20;
pub const NSSearchPathDirectory_NSSharedPublicDirectory: NSSearchPathDirectory = 21;
pub const NSSearchPathDirectory_NSPreferencePanesDirectory: NSSearchPathDirectory = 22;
pub const NSSearchPathDirectory_NSApplicationScriptsDirectory: NSSearchPathDirectory = 23;
pub const NSSearchPathDirectory_NSItemReplacementDirectory: NSSearchPathDirectory = 99;
pub const NSSearchPathDirectory_NSAllApplicationsDirectory: NSSearchPathDirectory = 100;
pub const NSSearchPathDirectory_NSAllLibrariesDirectory: NSSearchPathDirectory = 101;
pub const NSSearchPathDirectory_NSTrashDirectory: NSSearchPathDirectory = 102;
pub type NSSearchPathDirectory = NSUInteger;
pub const NSSearchPathDomainMask_NSUserDomainMask: NSSearchPathDomainMask = 1;
pub const NSSearchPathDomainMask_NSLocalDomainMask: NSSearchPathDomainMask = 2;
pub const NSSearchPathDomainMask_NSNetworkDomainMask: NSSearchPathDomainMask = 4;
pub const NSSearchPathDomainMask_NSSystemDomainMask: NSSearchPathDomainMask = 8;
pub const NSSearchPathDomainMask_NSAllDomainsMask: NSSearchPathDomainMask = 65535;
pub type NSSearchPathDomainMask = NSUInteger;
pub type NSURLResourceKey = NSString;
#[repr(transparent)]
#[derive(Clone)]
pub struct NSURL(pub id);
impl std::ops::Deref for NSURL {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSURL {}
impl NSURL {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSURL), alloc) })
    }
}
impl PNSSecureCoding for NSURL {}
impl PNSCopying for NSURL {}
impl INSObject for NSURL {}
impl PNSObject for NSURL {}
impl From<NSURL> for NSObject {
    fn from(child: NSURL) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSURL {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSURL, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSURL)) };
        if is_kind_of {
            Ok(NSURL(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSURL")
        }
    }
}
impl INSURL for NSURL {}
pub trait INSURL: Sized + std::ops::Deref {
    unsafe fn initWithScheme_host_path_(
        &self,
        scheme: NSString,
        host: NSString,
        path: NSString,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithScheme : scheme host : host path : path)
    }
    unsafe fn initFileURLWithPath_isDirectory_relativeToURL_(
        &self,
        path: NSString,
        isDir: BOOL,
        baseURL: NSURL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initFileURLWithPath : path isDirectory : isDir relativeToURL : baseURL)
    }
    unsafe fn initFileURLWithPath_relativeToURL_(
        &self,
        path: NSString,
        baseURL: NSURL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initFileURLWithPath : path relativeToURL : baseURL)
    }
    unsafe fn initFileURLWithPath_isDirectory_(&self, path: NSString, isDir: BOOL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initFileURLWithPath : path isDirectory : isDir)
    }
    unsafe fn initFileURLWithPath_(&self, path: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initFileURLWithPath: path)
    }
    unsafe fn initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL_(
        &self,
        path: *const ::std::os::raw::c_char,
        isDir: BOOL,
        baseURL: NSURL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initFileURLWithFileSystemRepresentation : path isDirectory : isDir relativeToURL : baseURL)
    }
    unsafe fn initWithString_(&self, URLString: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithString: URLString)
    }
    unsafe fn initWithString_relativeToURL_(
        &self,
        URLString: NSString,
        baseURL: NSURL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithString : URLString relativeToURL : baseURL)
    }
    unsafe fn initWithDataRepresentation_relativeToURL_(
        &self,
        data: NSData,
        baseURL: NSURL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithDataRepresentation : data relativeToURL : baseURL)
    }
    unsafe fn initAbsoluteURLWithDataRepresentation_relativeToURL_(
        &self,
        data: NSData,
        baseURL: NSURL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initAbsoluteURLWithDataRepresentation : data relativeToURL : baseURL)
    }
    unsafe fn getFileSystemRepresentation_maxLength_(
        &self,
        buffer: *mut ::std::os::raw::c_char,
        maxBufferLength: NSUInteger,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getFileSystemRepresentation : buffer maxLength : maxBufferLength)
    }
    unsafe fn checkResourceIsReachableAndReturnError_(&self, error: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, checkResourceIsReachableAndReturnError: error)
    }
    unsafe fn isFileReferenceURL(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isFileReferenceURL)
    }
    unsafe fn fileReferenceURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileReferenceURL)
    }
    unsafe fn getResourceValue_forKey_error_(
        &self,
        value: *mut id,
        key: NSString,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getResourceValue : value forKey : key error : error)
    }
    unsafe fn resourceValuesForKeys_error_(
        &self,
        keys: NSArray,
        error: *mut NSError,
    ) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , resourceValuesForKeys : keys error : error)
    }
    unsafe fn setResourceValue_forKey_error_(
        &self,
        value: id,
        key: NSString,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setResourceValue : value forKey : key error : error)
    }
    unsafe fn setResourceValues_error_(
        &self,
        keyedValues: NSDictionary,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setResourceValues : keyedValues error : error)
    }
    unsafe fn removeCachedResourceValueForKey_(&self, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeCachedResourceValueForKey: key)
    }
    unsafe fn removeAllCachedResourceValues(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeAllCachedResourceValues)
    }
    unsafe fn setTemporaryResourceValue_forKey_(&self, value: id, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setTemporaryResourceValue : value forKey : key)
    }
    unsafe fn bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error_(
        &self,
        options: NSURLBookmarkCreationOptions,
        keys: NSArray,
        relativeURL: NSURL,
        error: *mut NSError,
    ) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , bookmarkDataWithOptions : options includingResourceValuesForKeys : keys relativeToURL : relativeURL error : error)
    }
    unsafe fn initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_(
        &self,
        bookmarkData: NSData,
        options: NSURLBookmarkResolutionOptions,
        relativeURL: NSURL,
        isStale: *mut BOOL,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initByResolvingBookmarkData : bookmarkData options : options relativeToURL : relativeURL bookmarkDataIsStale : isStale error : error)
    }
    unsafe fn startAccessingSecurityScopedResource(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, startAccessingSecurityScopedResource)
    }
    unsafe fn stopAccessingSecurityScopedResource(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stopAccessingSecurityScopedResource)
    }
    unsafe fn dataRepresentation(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dataRepresentation)
    }
    unsafe fn absoluteString(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, absoluteString)
    }
    unsafe fn relativeString(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, relativeString)
    }
    unsafe fn baseURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, baseURL)
    }
    unsafe fn absoluteURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, absoluteURL)
    }
    unsafe fn scheme(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scheme)
    }
    unsafe fn resourceSpecifier(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, resourceSpecifier)
    }
    unsafe fn host(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, host)
    }
    unsafe fn port(&self) -> NSNumber
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, port)
    }
    unsafe fn user(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, user)
    }
    unsafe fn password(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, password)
    }
    unsafe fn path(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, path)
    }
    unsafe fn fragment(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fragment)
    }
    unsafe fn parameterString(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, parameterString)
    }
    unsafe fn query(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, query)
    }
    unsafe fn relativePath(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, relativePath)
    }
    unsafe fn hasDirectoryPath(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hasDirectoryPath)
    }
    unsafe fn fileSystemRepresentation(&self) -> *const ::std::os::raw::c_char
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileSystemRepresentation)
    }
    unsafe fn isFileURL(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isFileURL)
    }
    unsafe fn standardizedURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, standardizedURL)
    }
    unsafe fn filePathURL(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, filePathURL)
    }
    unsafe fn fileURLWithPath_isDirectory_relativeToURL_(
        path: NSString,
        isDir: BOOL,
        baseURL: NSURL,
    ) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURL) , fileURLWithPath : path isDirectory : isDir relativeToURL : baseURL)
    }
    unsafe fn fileURLWithPath_relativeToURL_(path: NSString, baseURL: NSURL) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURL) , fileURLWithPath : path relativeToURL : baseURL)
    }
    unsafe fn fileURLWithPath_isDirectory_(path: NSString, isDir: BOOL) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURL) , fileURLWithPath : path isDirectory : isDir)
    }
    unsafe fn fileURLWithPath_(path: NSString) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURL), fileURLWithPath: path)
    }
    unsafe fn fileURLWithFileSystemRepresentation_isDirectory_relativeToURL_(
        path: *const ::std::os::raw::c_char,
        isDir: BOOL,
        baseURL: NSURL,
    ) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURL) , fileURLWithFileSystemRepresentation : path isDirectory : isDir relativeToURL : baseURL)
    }
    unsafe fn URLWithString_(URLString: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSURL), URLWithString: URLString)
    }
    unsafe fn URLWithString_relativeToURL_(URLString: NSString, baseURL: NSURL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURL) , URLWithString : URLString relativeToURL : baseURL)
    }
    unsafe fn URLWithDataRepresentation_relativeToURL_(data: NSData, baseURL: NSURL) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURL) , URLWithDataRepresentation : data relativeToURL : baseURL)
    }
    unsafe fn absoluteURLWithDataRepresentation_relativeToURL_(
        data: NSData,
        baseURL: NSURL,
    ) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURL) , absoluteURLWithDataRepresentation : data relativeToURL : baseURL)
    }
    unsafe fn URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_(
        bookmarkData: NSData,
        options: NSURLBookmarkResolutionOptions,
        relativeURL: NSURL,
        isStale: *mut BOOL,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURL) , URLByResolvingBookmarkData : bookmarkData options : options relativeToURL : relativeURL bookmarkDataIsStale : isStale error : error)
    }
    unsafe fn resourceValuesForKeys_fromBookmarkData_(
        keys: NSArray,
        bookmarkData: NSData,
    ) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURL) , resourceValuesForKeys : keys fromBookmarkData : bookmarkData)
    }
    unsafe fn writeBookmarkData_toURL_options_error_(
        bookmarkData: NSData,
        bookmarkFileURL: NSURL,
        options: NSURLBookmarkFileCreationOptions,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURL) , writeBookmarkData : bookmarkData toURL : bookmarkFileURL options : options error : error)
    }
    unsafe fn bookmarkDataWithContentsOfURL_error_(
        bookmarkFileURL: NSURL,
        error: *mut NSError,
    ) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURL) , bookmarkDataWithContentsOfURL : bookmarkFileURL error : error)
    }
    unsafe fn URLByResolvingAliasFileAtURL_options_error_(
        url: NSURL,
        options: NSURLBookmarkResolutionOptions,
        error: *mut NSError,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSURL) , URLByResolvingAliasFileAtURL : url options : options error : error)
    }
}
pub const NSURLBookmarkCreationOptions_NSURLBookmarkCreationPreferFileIDResolution:
    NSURLBookmarkCreationOptions = 256;
pub const NSURLBookmarkCreationOptions_NSURLBookmarkCreationMinimalBookmark:
    NSURLBookmarkCreationOptions = 512;
pub const NSURLBookmarkCreationOptions_NSURLBookmarkCreationSuitableForBookmarkFile:
    NSURLBookmarkCreationOptions = 1024;
pub const NSURLBookmarkCreationOptions_NSURLBookmarkCreationWithSecurityScope:
    NSURLBookmarkCreationOptions = 2048;
pub const NSURLBookmarkCreationOptions_NSURLBookmarkCreationSecurityScopeAllowOnlyReadAccess:
    NSURLBookmarkCreationOptions = 4096;
pub type NSURLBookmarkCreationOptions = NSUInteger;
pub const NSURLBookmarkResolutionOptions_NSURLBookmarkResolutionWithoutUI:
    NSURLBookmarkResolutionOptions = 256;
pub const NSURLBookmarkResolutionOptions_NSURLBookmarkResolutionWithoutMounting:
    NSURLBookmarkResolutionOptions = 512;
pub const NSURLBookmarkResolutionOptions_NSURLBookmarkResolutionWithSecurityScope:
    NSURLBookmarkResolutionOptions = 1024;
pub type NSURLBookmarkResolutionOptions = NSUInteger;
pub type NSURLBookmarkFileCreationOptions = NSUInteger;
impl NSObject_NSURLClient for NSObject {}
pub trait NSObject_NSURLClient: Sized + std::ops::Deref {
    unsafe fn URL_resourceDataDidBecomeAvailable_(&self, sender: NSURL, newBytes: NSData)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URL : sender resourceDataDidBecomeAvailable : newBytes)
    }
    unsafe fn URLResourceDidFinishLoading_(&self, sender: NSURL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, URLResourceDidFinishLoading: sender)
    }
    unsafe fn URLResourceDidCancelLoading_(&self, sender: NSURL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, URLResourceDidCancelLoading: sender)
    }
    unsafe fn URL_resourceDidFailLoadingWithReason_(&self, sender: NSURL, reason: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URL : sender resourceDidFailLoadingWithReason : reason)
    }
}
pub const NSVolumeEnumerationOptions_NSVolumeEnumerationSkipHiddenVolumes:
    NSVolumeEnumerationOptions = 2;
pub const NSVolumeEnumerationOptions_NSVolumeEnumerationProduceFileReferenceURLs:
    NSVolumeEnumerationOptions = 4;
pub type NSVolumeEnumerationOptions = NSUInteger;
pub const NSDirectoryEnumerationOptions_NSDirectoryEnumerationSkipsSubdirectoryDescendants:
    NSDirectoryEnumerationOptions = 1;
pub const NSDirectoryEnumerationOptions_NSDirectoryEnumerationSkipsPackageDescendants:
    NSDirectoryEnumerationOptions = 2;
pub const NSDirectoryEnumerationOptions_NSDirectoryEnumerationSkipsHiddenFiles:
    NSDirectoryEnumerationOptions = 4;
pub const NSDirectoryEnumerationOptions_NSDirectoryEnumerationIncludesDirectoriesPostOrder:
    NSDirectoryEnumerationOptions = 8;
pub const NSDirectoryEnumerationOptions_NSDirectoryEnumerationProducesRelativePathURLs:
    NSDirectoryEnumerationOptions = 16;
pub type NSDirectoryEnumerationOptions = NSUInteger;
pub const NSFileManagerItemReplacementOptions_NSFileManagerItemReplacementUsingNewMetadataOnly:
    NSFileManagerItemReplacementOptions = 1;
pub const NSFileManagerItemReplacementOptions_NSFileManagerItemReplacementWithoutDeletingBackupItem : NSFileManagerItemReplacementOptions = 2 ;
pub type NSFileManagerItemReplacementOptions = NSUInteger;
pub const NSURLRelationship_NSURLRelationshipContains: NSURLRelationship = 0;
pub const NSURLRelationship_NSURLRelationshipSame: NSURLRelationship = 1;
pub const NSURLRelationship_NSURLRelationshipOther: NSURLRelationship = 2;
pub type NSURLRelationship = NSInteger;
pub const NSFileManagerUnmountOptions_NSFileManagerUnmountAllPartitionsAndEjectDisk:
    NSFileManagerUnmountOptions = 1;
pub const NSFileManagerUnmountOptions_NSFileManagerUnmountWithoutUI: NSFileManagerUnmountOptions =
    2;
pub type NSFileManagerUnmountOptions = NSUInteger;
#[repr(transparent)]
#[derive(Clone)]
pub struct NSFileManager(pub id);
impl std::ops::Deref for NSFileManager {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSFileManager {}
impl NSFileManager {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSFileManager), alloc) })
    }
}
impl INSObject for NSFileManager {}
impl PNSObject for NSFileManager {}
impl From<NSFileManager> for NSObject {
    fn from(child: NSFileManager) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSFileManager {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSFileManager, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSFileManager)) };
        if is_kind_of {
            Ok(NSFileManager(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSFileManager")
        }
    }
}
impl INSFileManager for NSFileManager {}
pub trait INSFileManager: Sized + std::ops::Deref {
    unsafe fn mountedVolumeURLsIncludingResourceValuesForKeys_options_(
        &self,
        propertyKeys: NSArray,
        options: NSVolumeEnumerationOptions,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , mountedVolumeURLsIncludingResourceValuesForKeys : propertyKeys options : options)
    }
    unsafe fn unmountVolumeAtURL_options_completionHandler_(
        &self,
        url: NSURL,
        mask: NSFileManagerUnmountOptions,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , unmountVolumeAtURL : url options : mask completionHandler : completionHandler)
    }
    unsafe fn contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_(
        &self,
        url: NSURL,
        keys: NSArray,
        mask: NSDirectoryEnumerationOptions,
        error: *mut NSError,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , contentsOfDirectoryAtURL : url includingPropertiesForKeys : keys options : mask error : error)
    }
    unsafe fn URLsForDirectory_inDomains_(
        &self,
        directory: NSSearchPathDirectory,
        domainMask: NSSearchPathDomainMask,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLsForDirectory : directory inDomains : domainMask)
    }
    unsafe fn URLForDirectory_inDomain_appropriateForURL_create_error_(
        &self,
        directory: NSSearchPathDirectory,
        domain: NSSearchPathDomainMask,
        url: NSURL,
        shouldCreate: BOOL,
        error: *mut NSError,
    ) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLForDirectory : directory inDomain : domain appropriateForURL : url create : shouldCreate error : error)
    }
    unsafe fn getRelationship_ofDirectoryAtURL_toItemAtURL_error_(
        &self,
        outRelationship: *mut NSURLRelationship,
        directoryURL: NSURL,
        otherURL: NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getRelationship : outRelationship ofDirectoryAtURL : directoryURL toItemAtURL : otherURL error : error)
    }
    unsafe fn getRelationship_ofDirectory_inDomain_toItemAtURL_error_(
        &self,
        outRelationship: *mut NSURLRelationship,
        directory: NSSearchPathDirectory,
        domainMask: NSSearchPathDomainMask,
        url: NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getRelationship : outRelationship ofDirectory : directory inDomain : domainMask toItemAtURL : url error : error)
    }
    unsafe fn createDirectoryAtURL_withIntermediateDirectories_attributes_error_(
        &self,
        url: NSURL,
        createIntermediates: BOOL,
        attributes: NSDictionary,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , createDirectoryAtURL : url withIntermediateDirectories : createIntermediates attributes : attributes error : error)
    }
    unsafe fn createSymbolicLinkAtURL_withDestinationURL_error_(
        &self,
        url: NSURL,
        destURL: NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , createSymbolicLinkAtURL : url withDestinationURL : destURL error : error)
    }
    unsafe fn setAttributes_ofItemAtPath_error_(
        &self,
        attributes: NSDictionary,
        path: NSString,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setAttributes : attributes ofItemAtPath : path error : error)
    }
    unsafe fn createDirectoryAtPath_withIntermediateDirectories_attributes_error_(
        &self,
        path: NSString,
        createIntermediates: BOOL,
        attributes: NSDictionary,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , createDirectoryAtPath : path withIntermediateDirectories : createIntermediates attributes : attributes error : error)
    }
    unsafe fn contentsOfDirectoryAtPath_error_(
        &self,
        path: NSString,
        error: *mut NSError,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , contentsOfDirectoryAtPath : path error : error)
    }
    unsafe fn subpathsOfDirectoryAtPath_error_(
        &self,
        path: NSString,
        error: *mut NSError,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , subpathsOfDirectoryAtPath : path error : error)
    }
    unsafe fn attributesOfItemAtPath_error_(
        &self,
        path: NSString,
        error: *mut NSError,
    ) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , attributesOfItemAtPath : path error : error)
    }
    unsafe fn attributesOfFileSystemForPath_error_(
        &self,
        path: NSString,
        error: *mut NSError,
    ) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , attributesOfFileSystemForPath : path error : error)
    }
    unsafe fn createSymbolicLinkAtPath_withDestinationPath_error_(
        &self,
        path: NSString,
        destPath: NSString,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , createSymbolicLinkAtPath : path withDestinationPath : destPath error : error)
    }
    unsafe fn destinationOfSymbolicLinkAtPath_error_(
        &self,
        path: NSString,
        error: *mut NSError,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , destinationOfSymbolicLinkAtPath : path error : error)
    }
    unsafe fn copyItemAtPath_toPath_error_(
        &self,
        srcPath: NSString,
        dstPath: NSString,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , copyItemAtPath : srcPath toPath : dstPath error : error)
    }
    unsafe fn moveItemAtPath_toPath_error_(
        &self,
        srcPath: NSString,
        dstPath: NSString,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , moveItemAtPath : srcPath toPath : dstPath error : error)
    }
    unsafe fn linkItemAtPath_toPath_error_(
        &self,
        srcPath: NSString,
        dstPath: NSString,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , linkItemAtPath : srcPath toPath : dstPath error : error)
    }
    unsafe fn removeItemAtPath_error_(&self, path: NSString, error: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeItemAtPath : path error : error)
    }
    unsafe fn copyItemAtURL_toURL_error_(
        &self,
        srcURL: NSURL,
        dstURL: NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , copyItemAtURL : srcURL toURL : dstURL error : error)
    }
    unsafe fn moveItemAtURL_toURL_error_(
        &self,
        srcURL: NSURL,
        dstURL: NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , moveItemAtURL : srcURL toURL : dstURL error : error)
    }
    unsafe fn linkItemAtURL_toURL_error_(
        &self,
        srcURL: NSURL,
        dstURL: NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , linkItemAtURL : srcURL toURL : dstURL error : error)
    }
    unsafe fn removeItemAtURL_error_(&self, URL: NSURL, error: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeItemAtURL : URL error : error)
    }
    unsafe fn trashItemAtURL_resultingItemURL_error_(
        &self,
        url: NSURL,
        outResultingURL: *mut NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , trashItemAtURL : url resultingItemURL : outResultingURL error : error)
    }
    unsafe fn fileAttributesAtPath_traverseLink_(&self, path: NSString, yorn: BOOL) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , fileAttributesAtPath : path traverseLink : yorn)
    }
    unsafe fn changeFileAttributes_atPath_(&self, attributes: NSDictionary, path: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , changeFileAttributes : attributes atPath : path)
    }
    unsafe fn directoryContentsAtPath_(&self, path: NSString) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, directoryContentsAtPath: path)
    }
    unsafe fn fileSystemAttributesAtPath_(&self, path: NSString) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileSystemAttributesAtPath: path)
    }
    unsafe fn pathContentOfSymbolicLinkAtPath_(&self, path: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, pathContentOfSymbolicLinkAtPath: path)
    }
    unsafe fn createSymbolicLinkAtPath_pathContent_(
        &self,
        path: NSString,
        otherpath: NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , createSymbolicLinkAtPath : path pathContent : otherpath)
    }
    unsafe fn createDirectoryAtPath_attributes_(
        &self,
        path: NSString,
        attributes: NSDictionary,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , createDirectoryAtPath : path attributes : attributes)
    }
    unsafe fn linkPath_toPath_handler_(&self, src: NSString, dest: NSString, handler: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , linkPath : src toPath : dest handler : handler)
    }
    unsafe fn copyPath_toPath_handler_(&self, src: NSString, dest: NSString, handler: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , copyPath : src toPath : dest handler : handler)
    }
    unsafe fn movePath_toPath_handler_(&self, src: NSString, dest: NSString, handler: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , movePath : src toPath : dest handler : handler)
    }
    unsafe fn removeFileAtPath_handler_(&self, path: NSString, handler: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeFileAtPath : path handler : handler)
    }
    unsafe fn changeCurrentDirectoryPath_(&self, path: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, changeCurrentDirectoryPath: path)
    }
    unsafe fn fileExistsAtPath_(&self, path: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileExistsAtPath: path)
    }
    unsafe fn fileExistsAtPath_isDirectory_(&self, path: NSString, isDirectory: *mut BOOL) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , fileExistsAtPath : path isDirectory : isDirectory)
    }
    unsafe fn isReadableFileAtPath_(&self, path: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isReadableFileAtPath: path)
    }
    unsafe fn isWritableFileAtPath_(&self, path: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isWritableFileAtPath: path)
    }
    unsafe fn isExecutableFileAtPath_(&self, path: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isExecutableFileAtPath: path)
    }
    unsafe fn isDeletableFileAtPath_(&self, path: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isDeletableFileAtPath: path)
    }
    unsafe fn contentsEqualAtPath_andPath_(&self, path1: NSString, path2: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , contentsEqualAtPath : path1 andPath : path2)
    }
    unsafe fn displayNameAtPath_(&self, path: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, displayNameAtPath: path)
    }
    unsafe fn componentsToDisplayForPath_(&self, path: NSString) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, componentsToDisplayForPath: path)
    }
    unsafe fn enumeratorAtPath_(&self, path: NSString) -> NSDirectoryEnumerator
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, enumeratorAtPath: path)
    }
    unsafe fn enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_(
        &self,
        url: NSURL,
        keys: NSArray,
        mask: NSDirectoryEnumerationOptions,
        handler: *mut ::std::os::raw::c_void,
    ) -> NSDirectoryEnumerator
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumeratorAtURL : url includingPropertiesForKeys : keys options : mask errorHandler : handler)
    }
    unsafe fn subpathsAtPath_(&self, path: NSString) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, subpathsAtPath: path)
    }
    unsafe fn contentsAtPath_(&self, path: NSString) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, contentsAtPath: path)
    }
    unsafe fn createFileAtPath_contents_attributes_(
        &self,
        path: NSString,
        data: NSData,
        attr: NSDictionary,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , createFileAtPath : path contents : data attributes : attr)
    }
    unsafe fn fileSystemRepresentationWithPath_(
        &self,
        path: NSString,
    ) -> *const ::std::os::raw::c_char
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileSystemRepresentationWithPath: path)
    }
    unsafe fn stringWithFileSystemRepresentation_length_(
        &self,
        str_: *const ::std::os::raw::c_char,
        len: NSUInteger,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , stringWithFileSystemRepresentation : str_ length : len)
    }
    unsafe fn replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error_(
        &self,
        originalItemURL: NSURL,
        newItemURL: NSURL,
        backupItemName: NSString,
        options: NSFileManagerItemReplacementOptions,
        resultingURL: *mut NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , replaceItemAtURL : originalItemURL withItemAtURL : newItemURL backupItemName : backupItemName options : options resultingItemURL : resultingURL error : error)
    }
    unsafe fn setUbiquitous_itemAtURL_destinationURL_error_(
        &self,
        flag: BOOL,
        url: NSURL,
        destinationURL: NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setUbiquitous : flag itemAtURL : url destinationURL : destinationURL error : error)
    }
    unsafe fn isUbiquitousItemAtURL_(&self, url: NSURL) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isUbiquitousItemAtURL: url)
    }
    unsafe fn startDownloadingUbiquitousItemAtURL_error_(
        &self,
        url: NSURL,
        error: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , startDownloadingUbiquitousItemAtURL : url error : error)
    }
    unsafe fn evictUbiquitousItemAtURL_error_(&self, url: NSURL, error: *mut NSError) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , evictUbiquitousItemAtURL : url error : error)
    }
    unsafe fn URLForUbiquityContainerIdentifier_(&self, containerIdentifier: NSString) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            URLForUbiquityContainerIdentifier: containerIdentifier
        )
    }
    unsafe fn URLForPublishingUbiquitousItemAtURL_expirationDate_error_(
        &self,
        url: NSURL,
        outDate: *mut NSDate,
        error: *mut NSError,
    ) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , URLForPublishingUbiquitousItemAtURL : url expirationDate : outDate error : error)
    }
    unsafe fn getFileProviderServicesForItemAtURL_completionHandler_(
        &self,
        url: NSURL,
        completionHandler: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getFileProviderServicesForItemAtURL : url completionHandler : completionHandler)
    }
    unsafe fn containerURLForSecurityApplicationGroupIdentifier_(
        &self,
        groupIdentifier: NSString,
    ) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            containerURLForSecurityApplicationGroupIdentifier: groupIdentifier
        )
    }
    unsafe fn delegate(&self) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, delegate)
    }
    unsafe fn setDelegate_(&self, delegate: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDelegate: delegate)
    }
    unsafe fn currentDirectoryPath(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, currentDirectoryPath)
    }
    unsafe fn ubiquityIdentityToken(&self) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, ubiquityIdentityToken)
    }
    unsafe fn defaultManager() -> NSFileManager
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSFileManager), defaultManager)
    }
}
impl NSObject_NSCopyLinkMoveHandler for NSObject {}
pub trait NSObject_NSCopyLinkMoveHandler: Sized + std::ops::Deref {
    unsafe fn fileManager_shouldProceedAfterError_(
        &self,
        fm: NSFileManager,
        errorInfo: NSDictionary,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , fileManager : fm shouldProceedAfterError : errorInfo)
    }
    unsafe fn fileManager_willProcessPath_(&self, fm: NSFileManager, path: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , fileManager : fm willProcessPath : path)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSDirectoryEnumerator(pub id);
impl std::ops::Deref for NSDirectoryEnumerator {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDirectoryEnumerator {}
impl NSDirectoryEnumerator {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSDirectoryEnumerator), alloc) })
    }
}
impl<ObjectType: 'static> INSEnumerator<ObjectType> for NSDirectoryEnumerator {}
impl PNSFastEnumeration for NSDirectoryEnumerator {}
impl INSObject for NSDirectoryEnumerator {}
impl PNSObject for NSDirectoryEnumerator {}
impl From<NSDirectoryEnumerator> for NSObject {
    fn from(child: NSDirectoryEnumerator) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSDirectoryEnumerator {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSDirectoryEnumerator, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSDirectoryEnumerator)) };
        if is_kind_of {
            Ok(NSDirectoryEnumerator(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSDirectoryEnumerator")
        }
    }
}
impl<ObjectType: 'static> INSDirectoryEnumerator<ObjectType> for NSDirectoryEnumerator {}
pub trait INSDirectoryEnumerator<ObjectType>: Sized + std::ops::Deref {
    unsafe fn skipDescendents(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, skipDescendents)
    }
    unsafe fn skipDescendants(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, skipDescendants)
    }
    unsafe fn fileAttributes(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileAttributes)
    }
    unsafe fn directoryAttributes(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, directoryAttributes)
    }
    unsafe fn isEnumeratingDirectoryPostOrder(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEnumeratingDirectoryPostOrder)
    }
    unsafe fn level(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, level)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSInvocation(pub id);
impl std::ops::Deref for NSInvocation {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSInvocation {}
impl NSInvocation {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSInvocation), alloc) })
    }
}
impl INSObject for NSInvocation {}
impl PNSObject for NSInvocation {}
impl From<NSInvocation> for NSObject {
    fn from(child: NSInvocation) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSInvocation {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSInvocation, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSInvocation)) };
        if is_kind_of {
            Ok(NSInvocation(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSInvocation")
        }
    }
}
impl INSInvocation for NSInvocation {}
pub trait INSInvocation: Sized + std::ops::Deref {
    unsafe fn retainArguments(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, retainArguments)
    }
    unsafe fn getReturnValue_(&self, retLoc: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, getReturnValue: retLoc)
    }
    unsafe fn setReturnValue_(&self, retLoc: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setReturnValue: retLoc)
    }
    unsafe fn getArgument_atIndex_(
        &self,
        argumentLocation: *mut ::std::os::raw::c_void,
        idx: NSInteger,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getArgument : argumentLocation atIndex : idx)
    }
    unsafe fn setArgument_atIndex_(
        &self,
        argumentLocation: *mut ::std::os::raw::c_void,
        idx: NSInteger,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setArgument : argumentLocation atIndex : idx)
    }
    unsafe fn invoke(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, invoke)
    }
    unsafe fn invokeWithTarget_(&self, target: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, invokeWithTarget: target)
    }
    unsafe fn methodSignature(&self) -> NSMethodSignature
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, methodSignature)
    }
    unsafe fn argumentsRetained(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, argumentsRetained)
    }
    unsafe fn target(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, target)
    }
    unsafe fn setTarget_(&self, target: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTarget: target)
    }
    unsafe fn selector(&self) -> objc::runtime::Sel
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, selector)
    }
    unsafe fn setSelector_(&self, selector: objc::runtime::Sel)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setSelector: selector)
    }
    unsafe fn invocationWithMethodSignature_(sig: NSMethodSignature) -> NSInvocation
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSInvocation), invocationWithMethodSignature: sig)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSOrderedSet(pub id);
impl std::ops::Deref for NSOrderedSet {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSOrderedSet {}
impl NSOrderedSet {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSOrderedSet), alloc) })
    }
}
impl PNSCopying for NSOrderedSet {}
impl PNSMutableCopying for NSOrderedSet {}
impl PNSSecureCoding for NSOrderedSet {}
impl PNSFastEnumeration for NSOrderedSet {}
impl INSObject for NSOrderedSet {}
impl PNSObject for NSOrderedSet {}
impl From<NSOrderedSet> for NSObject {
    fn from(child: NSOrderedSet) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSOrderedSet {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSOrderedSet, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSOrderedSet)) };
        if is_kind_of {
            Ok(NSOrderedSet(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSOrderedSet")
        }
    }
}
impl<ObjectType: 'static> INSOrderedSet<ObjectType> for NSOrderedSet {}
pub trait INSOrderedSet<ObjectType>: Sized + std::ops::Deref {
    unsafe fn objectAtIndex_(&self, idx: NSUInteger) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectAtIndex: idx)
    }
    unsafe fn indexOfObject_(&self, object: id) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, indexOfObject: object)
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithObjects_count_(&self, objects: *mut id, cnt: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithObjects : objects count : cnt)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn count(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, count)
    }
}
impl<ObjectType: 'static> NSOrderedSet_NSExtendedOrderedSet<ObjectType> for NSOrderedSet {}
pub trait NSOrderedSet_NSExtendedOrderedSet<ObjectType>: Sized + std::ops::Deref {
    unsafe fn getObjects_range_(&self, objects: *mut id, range: NSRange)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getObjects : objects range : range)
    }
    unsafe fn objectsAtIndexes_(&self, indexes: NSIndexSet) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectsAtIndexes: indexes)
    }
    unsafe fn isEqualToOrderedSet_(&self, other: NSOrderedSet) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEqualToOrderedSet: other)
    }
    unsafe fn containsObject_(&self, object: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, containsObject: object)
    }
    unsafe fn intersectsOrderedSet_(&self, other: NSOrderedSet) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, intersectsOrderedSet: other)
    }
    unsafe fn intersectsSet_(&self, set: NSSet) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, intersectsSet: set)
    }
    unsafe fn isSubsetOfOrderedSet_(&self, other: NSOrderedSet) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isSubsetOfOrderedSet: other)
    }
    unsafe fn isSubsetOfSet_(&self, set: NSSet) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isSubsetOfSet: set)
    }
    unsafe fn objectAtIndexedSubscript_(&self, idx: NSUInteger) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectAtIndexedSubscript: idx)
    }
    unsafe fn objectEnumerator(&self) -> NSEnumerator
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectEnumerator)
    }
    unsafe fn reverseObjectEnumerator(&self) -> NSEnumerator
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, reverseObjectEnumerator)
    }
    unsafe fn enumerateObjectsUsingBlock_(&self, block: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, enumerateObjectsUsingBlock: block)
    }
    unsafe fn enumerateObjectsWithOptions_usingBlock_(
        &self,
        opts: NSEnumerationOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumerateObjectsWithOptions : opts usingBlock : block)
    }
    unsafe fn enumerateObjectsAtIndexes_options_usingBlock_(
        &self,
        s: NSIndexSet,
        opts: NSEnumerationOptions,
        block: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , enumerateObjectsAtIndexes : s options : opts usingBlock : block)
    }
    unsafe fn indexOfObjectPassingTest_(&self, predicate: *mut ::std::os::raw::c_void) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, indexOfObjectPassingTest: predicate)
    }
    unsafe fn indexOfObjectWithOptions_passingTest_(
        &self,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , indexOfObjectWithOptions : opts passingTest : predicate)
    }
    unsafe fn indexOfObjectAtIndexes_options_passingTest_(
        &self,
        s: NSIndexSet,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , indexOfObjectAtIndexes : s options : opts passingTest : predicate)
    }
    unsafe fn indexesOfObjectsPassingTest_(
        &self,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSIndexSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, indexesOfObjectsPassingTest: predicate)
    }
    unsafe fn indexesOfObjectsWithOptions_passingTest_(
        &self,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSIndexSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , indexesOfObjectsWithOptions : opts passingTest : predicate)
    }
    unsafe fn indexesOfObjectsAtIndexes_options_passingTest_(
        &self,
        s: NSIndexSet,
        opts: NSEnumerationOptions,
        predicate: *mut ::std::os::raw::c_void,
    ) -> NSIndexSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , indexesOfObjectsAtIndexes : s options : opts passingTest : predicate)
    }
    unsafe fn indexOfObject_inSortedRange_options_usingComparator_(
        &self,
        object: id,
        range: NSRange,
        opts: NSBinarySearchingOptions,
        cmp: NSComparator,
    ) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , indexOfObject : object inSortedRange : range options : opts usingComparator : cmp)
    }
    unsafe fn sortedArrayUsingComparator_(&self, cmptr: NSComparator) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sortedArrayUsingComparator: cmptr)
    }
    unsafe fn sortedArrayWithOptions_usingComparator_(
        &self,
        opts: NSSortOptions,
        cmptr: NSComparator,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , sortedArrayWithOptions : opts usingComparator : cmptr)
    }
    unsafe fn descriptionWithLocale_(&self, locale: id) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, descriptionWithLocale: locale)
    }
    unsafe fn descriptionWithLocale_indent_(&self, locale: id, level: NSUInteger) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , descriptionWithLocale : locale indent : level)
    }
    unsafe fn firstObject(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, firstObject)
    }
    unsafe fn lastObject(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, lastObject)
    }
    unsafe fn reversedOrderedSet(&self) -> NSOrderedSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, reversedOrderedSet)
    }
    unsafe fn array(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, array)
    }
    unsafe fn set(&self) -> NSSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, set)
    }
    unsafe fn description(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, description)
    }
}
impl<ObjectType: 'static> NSOrderedSet_NSOrderedSetCreation<ObjectType> for NSOrderedSet {}
pub trait NSOrderedSet_NSOrderedSetCreation<ObjectType>: Sized + std::ops::Deref {
    unsafe fn initWithObject_(&self, object: id) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithObject: object)
    }
    unsafe fn initWithObjects_(&self, firstObj: id) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithObjects: firstObj)
    }
    unsafe fn initWithOrderedSet_(&self, set: NSOrderedSet) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithOrderedSet: set)
    }
    unsafe fn initWithOrderedSet_copyItems_(&self, set: NSOrderedSet, flag: BOOL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithOrderedSet : set copyItems : flag)
    }
    unsafe fn initWithOrderedSet_range_copyItems_(
        &self,
        set: NSOrderedSet,
        range: NSRange,
        flag: BOOL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithOrderedSet : set range : range copyItems : flag)
    }
    unsafe fn initWithArray_(&self, array: NSArray) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithArray: array)
    }
    unsafe fn initWithArray_copyItems_(&self, set: NSArray, flag: BOOL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithArray : set copyItems : flag)
    }
    unsafe fn initWithArray_range_copyItems_(
        &self,
        set: NSArray,
        range: NSRange,
        flag: BOOL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithArray : set range : range copyItems : flag)
    }
    unsafe fn initWithSet_(&self, set: NSSet) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithSet: set)
    }
    unsafe fn initWithSet_copyItems_(&self, set: NSSet, flag: BOOL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithSet : set copyItems : flag)
    }
    unsafe fn orderedSet() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSOrderedSet), orderedSet)
    }
    unsafe fn orderedSetWithObject_(object: id) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSOrderedSet), orderedSetWithObject: object)
    }
    unsafe fn orderedSetWithObjects_count_(objects: *mut id, cnt: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSOrderedSet) , orderedSetWithObjects : objects count : cnt)
    }
    unsafe fn orderedSetWithObjects_(firstObj: id) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSOrderedSet), orderedSetWithObjects: firstObj)
    }
    unsafe fn orderedSetWithOrderedSet_(set: NSOrderedSet) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSOrderedSet), orderedSetWithOrderedSet: set)
    }
    unsafe fn orderedSetWithOrderedSet_range_copyItems_(
        set: NSOrderedSet,
        range: NSRange,
        flag: BOOL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSOrderedSet) , orderedSetWithOrderedSet : set range : range copyItems : flag)
    }
    unsafe fn orderedSetWithArray_(array: NSArray) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSOrderedSet), orderedSetWithArray: array)
    }
    unsafe fn orderedSetWithArray_range_copyItems_(
        array: NSArray,
        range: NSRange,
        flag: BOOL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSOrderedSet) , orderedSetWithArray : array range : range copyItems : flag)
    }
    unsafe fn orderedSetWithSet_(set: NSSet) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSOrderedSet), orderedSetWithSet: set)
    }
    unsafe fn orderedSetWithSet_copyItems_(set: NSSet, flag: BOOL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSOrderedSet) , orderedSetWithSet : set copyItems : flag)
    }
}
impl<ObjectType: 'static> NSOrderedSet_NSOrderedSetDiffing<ObjectType> for NSOrderedSet {}
pub trait NSOrderedSet_NSOrderedSetDiffing<ObjectType>: Sized + std::ops::Deref {
    unsafe fn differenceFromOrderedSet_withOptions_usingEquivalenceTest_(
        &self,
        other: NSOrderedSet,
        options: NSOrderedCollectionDifferenceCalculationOptions,
        block: *mut ::std::os::raw::c_void,
    ) -> NSOrderedCollectionDifference
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , differenceFromOrderedSet : other withOptions : options usingEquivalenceTest : block)
    }
    unsafe fn differenceFromOrderedSet_withOptions_(
        &self,
        other: NSOrderedSet,
        options: NSOrderedCollectionDifferenceCalculationOptions,
    ) -> NSOrderedCollectionDifference
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , differenceFromOrderedSet : other withOptions : options)
    }
    unsafe fn differenceFromOrderedSet_(&self, other: NSOrderedSet) -> NSOrderedCollectionDifference
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, differenceFromOrderedSet: other)
    }
    unsafe fn orderedSetByApplyingDifference_(
        &self,
        difference: NSOrderedCollectionDifference,
    ) -> NSOrderedSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, orderedSetByApplyingDifference: difference)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSMutableOrderedSet(pub id);
impl std::ops::Deref for NSMutableOrderedSet {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMutableOrderedSet {}
impl NSMutableOrderedSet {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSMutableOrderedSet), alloc) })
    }
}
impl<ObjectType: 'static> INSOrderedSet<ObjectType> for NSMutableOrderedSet {}
impl PNSCopying for NSMutableOrderedSet {}
impl PNSMutableCopying for NSMutableOrderedSet {}
impl PNSSecureCoding for NSMutableOrderedSet {}
impl PNSFastEnumeration for NSMutableOrderedSet {}
impl INSObject for NSMutableOrderedSet {}
impl PNSObject for NSMutableOrderedSet {}
impl From<NSMutableOrderedSet> for NSObject {
    fn from(child: NSMutableOrderedSet) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMutableOrderedSet {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMutableOrderedSet, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSMutableOrderedSet)) };
        if is_kind_of {
            Ok(NSMutableOrderedSet(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMutableOrderedSet")
        }
    }
}
impl<ObjectType: 'static> INSMutableOrderedSet<ObjectType> for NSMutableOrderedSet {}
pub trait INSMutableOrderedSet<ObjectType>: Sized + std::ops::Deref {
    unsafe fn insertObject_atIndex_(&self, object: id, idx: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , insertObject : object atIndex : idx)
    }
    unsafe fn removeObjectAtIndex_(&self, idx: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeObjectAtIndex: idx)
    }
    unsafe fn replaceObjectAtIndex_withObject_(&self, idx: NSUInteger, object: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , replaceObjectAtIndex : idx withObject : object)
    }
    unsafe fn initWithCoder_(&self, coder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: coder)
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithCapacity_(&self, numItems: NSUInteger) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCapacity: numItems)
    }
}
impl NSObject_NSKeyValueCoding for NSObject {}
pub trait NSObject_NSKeyValueCoding: Sized + std::ops::Deref {
    unsafe fn valueForKey_(&self, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, valueForKey: key)
    }
    unsafe fn setValue_forKey_(&self, value: id, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setValue : value forKey : key)
    }
    unsafe fn validateValue_forKey_error_(
        &self,
        ioValue: *mut id,
        inKey: NSString,
        outError: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , validateValue : ioValue forKey : inKey error : outError)
    }
    unsafe fn mutableArrayValueForKey_(&self, key: NSString) -> NSMutableArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, mutableArrayValueForKey: key)
    }
    unsafe fn mutableOrderedSetValueForKey_(&self, key: NSString) -> NSMutableOrderedSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, mutableOrderedSetValueForKey: key)
    }
    unsafe fn mutableSetValueForKey_(&self, key: NSString) -> NSMutableSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, mutableSetValueForKey: key)
    }
    unsafe fn valueForKeyPath_(&self, keyPath: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, valueForKeyPath: keyPath)
    }
    unsafe fn setValue_forKeyPath_(&self, value: id, keyPath: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setValue : value forKeyPath : keyPath)
    }
    unsafe fn validateValue_forKeyPath_error_(
        &self,
        ioValue: *mut id,
        inKeyPath: NSString,
        outError: *mut NSError,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , validateValue : ioValue forKeyPath : inKeyPath error : outError)
    }
    unsafe fn mutableArrayValueForKeyPath_(&self, keyPath: NSString) -> NSMutableArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, mutableArrayValueForKeyPath: keyPath)
    }
    unsafe fn mutableOrderedSetValueForKeyPath_(&self, keyPath: NSString) -> NSMutableOrderedSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, mutableOrderedSetValueForKeyPath: keyPath)
    }
    unsafe fn mutableSetValueForKeyPath_(&self, keyPath: NSString) -> NSMutableSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, mutableSetValueForKeyPath: keyPath)
    }
    unsafe fn valueForUndefinedKey_(&self, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, valueForUndefinedKey: key)
    }
    unsafe fn setValue_forUndefinedKey_(&self, value: id, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setValue : value forUndefinedKey : key)
    }
    unsafe fn setNilValueForKey_(&self, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setNilValueForKey: key)
    }
    unsafe fn dictionaryWithValuesForKeys_(&self, keys: NSArray) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dictionaryWithValuesForKeys: keys)
    }
    unsafe fn setValuesForKeysWithDictionary_(&self, keyedValues: NSDictionary)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setValuesForKeysWithDictionary: keyedValues)
    }
    unsafe fn accessInstanceVariablesDirectly() -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), accessInstanceVariablesDirectly)
    }
}
impl<ObjectType: 'static> NSOrderedSet_NSKeyValueCoding<ObjectType> for NSOrderedSet {}
pub trait NSOrderedSet_NSKeyValueCoding<ObjectType>: Sized + std::ops::Deref {
    unsafe fn valueForKey_(&self, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, valueForKey: key)
    }
    unsafe fn setValue_forKey_(&self, value: id, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setValue : value forKey : key)
    }
}
impl NSObject_NSDeprecatedKeyValueCoding for NSObject {}
pub trait NSObject_NSDeprecatedKeyValueCoding: Sized + std::ops::Deref {
    unsafe fn storedValueForKey_(&self, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, storedValueForKey: key)
    }
    unsafe fn takeStoredValue_forKey_(&self, value: id, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , takeStoredValue : value forKey : key)
    }
    unsafe fn takeValue_forKey_(&self, value: id, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , takeValue : value forKey : key)
    }
    unsafe fn takeValue_forKeyPath_(&self, value: id, keyPath: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , takeValue : value forKeyPath : keyPath)
    }
    unsafe fn handleQueryWithUnboundKey_(&self, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, handleQueryWithUnboundKey: key)
    }
    unsafe fn handleTakeValue_forUnboundKey_(&self, value: id, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , handleTakeValue : value forUnboundKey : key)
    }
    unsafe fn unableToSetNilForKey_(&self, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unableToSetNilForKey: key)
    }
    unsafe fn valuesForKeys_(&self, keys: NSArray) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, valuesForKeys: keys)
    }
    unsafe fn takeValuesFromDictionary_(&self, properties: NSDictionary)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, takeValuesFromDictionary: properties)
    }
    unsafe fn useStoredAccessor() -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), useStoredAccessor)
    }
}
pub const NSKeyValueObservingOptions_NSKeyValueObservingOptionNew: NSKeyValueObservingOptions = 1;
pub const NSKeyValueObservingOptions_NSKeyValueObservingOptionOld: NSKeyValueObservingOptions = 2;
pub const NSKeyValueObservingOptions_NSKeyValueObservingOptionInitial: NSKeyValueObservingOptions =
    4;
pub const NSKeyValueObservingOptions_NSKeyValueObservingOptionPrior: NSKeyValueObservingOptions = 8;
pub type NSKeyValueObservingOptions = NSUInteger;
pub const NSKeyValueChange_NSKeyValueChangeSetting: NSKeyValueChange = 1;
pub const NSKeyValueChange_NSKeyValueChangeInsertion: NSKeyValueChange = 2;
pub const NSKeyValueChange_NSKeyValueChangeRemoval: NSKeyValueChange = 3;
pub const NSKeyValueChange_NSKeyValueChangeReplacement: NSKeyValueChange = 4;
pub type NSKeyValueChange = NSUInteger;
pub const NSKeyValueSetMutationKind_NSKeyValueUnionSetMutation: NSKeyValueSetMutationKind = 1;
pub const NSKeyValueSetMutationKind_NSKeyValueMinusSetMutation: NSKeyValueSetMutationKind = 2;
pub const NSKeyValueSetMutationKind_NSKeyValueIntersectSetMutation: NSKeyValueSetMutationKind = 3;
pub const NSKeyValueSetMutationKind_NSKeyValueSetSetMutation: NSKeyValueSetMutationKind = 4;
pub type NSKeyValueSetMutationKind = NSUInteger;
impl NSObject_NSKeyValueObserving for NSObject {}
pub trait NSObject_NSKeyValueObserving: Sized + std::ops::Deref {
    unsafe fn observeValueForKeyPath_ofObject_change_context_(
        &self,
        keyPath: NSString,
        object: id,
        change: NSDictionary,
        context: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , observeValueForKeyPath : keyPath ofObject : object change : change context : context)
    }
}
impl NSObject_NSKeyValueObserverRegistration for NSObject {}
pub trait NSObject_NSKeyValueObserverRegistration: Sized + std::ops::Deref {
    unsafe fn addObserver_forKeyPath_options_context_(
        &self,
        observer: NSObject,
        keyPath: NSString,
        options: NSKeyValueObservingOptions,
        context: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , addObserver : observer forKeyPath : keyPath options : options context : context)
    }
    unsafe fn removeObserver_forKeyPath_context_(
        &self,
        observer: NSObject,
        keyPath: NSString,
        context: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeObserver : observer forKeyPath : keyPath context : context)
    }
    unsafe fn removeObserver_forKeyPath_(&self, observer: NSObject, keyPath: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeObserver : observer forKeyPath : keyPath)
    }
}
impl<ObjectType: 'static> NSOrderedSet_NSKeyValueObserverRegistration<ObjectType> for NSOrderedSet {}
pub trait NSOrderedSet_NSKeyValueObserverRegistration<ObjectType>: Sized + std::ops::Deref {
    unsafe fn addObserver_forKeyPath_options_context_(
        &self,
        observer: NSObject,
        keyPath: NSString,
        options: NSKeyValueObservingOptions,
        context: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , addObserver : observer forKeyPath : keyPath options : options context : context)
    }
    unsafe fn removeObserver_forKeyPath_context_(
        &self,
        observer: NSObject,
        keyPath: NSString,
        context: *mut ::std::os::raw::c_void,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeObserver : observer forKeyPath : keyPath context : context)
    }
    unsafe fn removeObserver_forKeyPath_(&self, observer: NSObject, keyPath: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeObserver : observer forKeyPath : keyPath)
    }
}
impl NSObject_NSKeyValueObserverNotification for NSObject {}
pub trait NSObject_NSKeyValueObserverNotification: Sized + std::ops::Deref {
    unsafe fn willChangeValueForKey_(&self, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, willChangeValueForKey: key)
    }
    unsafe fn didChangeValueForKey_(&self, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, didChangeValueForKey: key)
    }
    unsafe fn willChange_valuesAtIndexes_forKey_(
        &self,
        changeKind: NSKeyValueChange,
        indexes: NSIndexSet,
        key: NSString,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , willChange : changeKind valuesAtIndexes : indexes forKey : key)
    }
    unsafe fn didChange_valuesAtIndexes_forKey_(
        &self,
        changeKind: NSKeyValueChange,
        indexes: NSIndexSet,
        key: NSString,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , didChange : changeKind valuesAtIndexes : indexes forKey : key)
    }
    unsafe fn willChangeValueForKey_withSetMutation_usingObjects_(
        &self,
        key: NSString,
        mutationKind: NSKeyValueSetMutationKind,
        objects: NSSet,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , willChangeValueForKey : key withSetMutation : mutationKind usingObjects : objects)
    }
    unsafe fn didChangeValueForKey_withSetMutation_usingObjects_(
        &self,
        key: NSString,
        mutationKind: NSKeyValueSetMutationKind,
        objects: NSSet,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , didChangeValueForKey : key withSetMutation : mutationKind usingObjects : objects)
    }
}
impl NSObject_NSKeyValueObservingCustomization for NSObject {}
pub trait NSObject_NSKeyValueObservingCustomization: Sized + std::ops::Deref {
    unsafe fn observationInfo(&self) -> *mut ::std::os::raw::c_void
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, observationInfo)
    }
    unsafe fn setObservationInfo_(&self, observationInfo: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setObservationInfo: observationInfo)
    }
    unsafe fn keyPathsForValuesAffectingValueForKey_(key: NSString) -> NSSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), keyPathsForValuesAffectingValueForKey: key)
    }
    unsafe fn automaticallyNotifiesObserversForKey_(key: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), automaticallyNotifiesObserversForKey: key)
    }
}
impl NSObject_NSDeprecatedKeyValueObservingCustomization for NSObject {}
pub trait NSObject_NSDeprecatedKeyValueObservingCustomization: Sized + std::ops::Deref {
    unsafe fn setKeys_triggerChangeNotificationsForDependentKey_(
        keys: NSArray,
        dependentKey: NSString,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSObject) , setKeys : keys triggerChangeNotificationsForDependentKey : dependentKey)
    }
}
pub const NSPropertyListFormat_NSPropertyListOpenStepFormat: NSPropertyListFormat = 1;
pub const NSPropertyListFormat_NSPropertyListXMLFormat_v1_0: NSPropertyListFormat = 100;
pub const NSPropertyListFormat_NSPropertyListBinaryFormat_v1_0: NSPropertyListFormat = 200;
pub type NSPropertyListFormat = NSUInteger;
pub type CGFloat = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGPoint {
    pub x: CGFloat,
    pub y: CGFloat,
}
#[test]
fn bindgen_test_layout_CGPoint() {
    assert_eq!(
        ::std::mem::size_of::<CGPoint>(),
        16usize,
        concat!("Size of: ", stringify!(CGPoint))
    );
    assert_eq!(
        ::std::mem::align_of::<CGPoint>(),
        8usize,
        concat!("Alignment of ", stringify!(CGPoint))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CGPoint>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CGPoint),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CGPoint>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CGPoint),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGSize {
    pub width: CGFloat,
    pub height: CGFloat,
}
#[test]
fn bindgen_test_layout_CGSize() {
    assert_eq!(
        ::std::mem::size_of::<CGSize>(),
        16usize,
        concat!("Size of: ", stringify!(CGSize))
    );
    assert_eq!(
        ::std::mem::align_of::<CGSize>(),
        8usize,
        concat!("Alignment of ", stringify!(CGSize))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CGSize>())).width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CGSize),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CGSize>())).height as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CGSize),
            "::",
            stringify!(height)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGRect {
    pub origin: CGPoint,
    pub size: CGSize,
}
#[test]
fn bindgen_test_layout_CGRect() {
    assert_eq!(
        ::std::mem::size_of::<CGRect>(),
        32usize,
        concat!("Size of: ", stringify!(CGRect))
    );
    assert_eq!(
        ::std::mem::align_of::<CGRect>(),
        8usize,
        concat!("Alignment of ", stringify!(CGRect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CGRect>())).origin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CGRect),
            "::",
            stringify!(origin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<CGRect>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CGRect),
            "::",
            stringify!(size)
        )
    );
}
pub type NSPoint = CGPoint;
pub type NSSize = CGSize;
pub type NSRect = CGRect;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NSEdgeInsets {
    pub top: CGFloat,
    pub left: CGFloat,
    pub bottom: CGFloat,
    pub right: CGFloat,
}
#[test]
fn bindgen_test_layout_NSEdgeInsets() {
    assert_eq!(
        ::std::mem::size_of::<NSEdgeInsets>(),
        32usize,
        concat!("Size of: ", stringify!(NSEdgeInsets))
    );
    assert_eq!(
        ::std::mem::align_of::<NSEdgeInsets>(),
        8usize,
        concat!("Alignment of ", stringify!(NSEdgeInsets))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NSEdgeInsets>())).top as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NSEdgeInsets),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NSEdgeInsets>())).left as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NSEdgeInsets),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NSEdgeInsets>())).bottom as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NSEdgeInsets),
            "::",
            stringify!(bottom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NSEdgeInsets>())).right as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NSEdgeInsets),
            "::",
            stringify!(right)
        )
    );
}
impl NSValue_NSValueGeometryExtensions for NSValue {}
pub trait NSValue_NSValueGeometryExtensions: Sized + std::ops::Deref {
    unsafe fn pointValue(&self) -> NSPoint
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, pointValue)
    }
    unsafe fn sizeValue(&self) -> NSSize
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sizeValue)
    }
    unsafe fn rectValue(&self) -> NSRect
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, rectValue)
    }
    unsafe fn edgeInsetsValue(&self) -> NSEdgeInsets
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, edgeInsetsValue)
    }
    unsafe fn valueWithPoint_(point: NSPoint) -> NSValue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSValue), valueWithPoint: point)
    }
    unsafe fn valueWithSize_(size: NSSize) -> NSValue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSValue), valueWithSize: size)
    }
    unsafe fn valueWithRect_(rect: NSRect) -> NSValue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSValue), valueWithRect: rect)
    }
    unsafe fn valueWithEdgeInsets_(insets: NSEdgeInsets) -> NSValue
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSValue), valueWithEdgeInsets: insets)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSKeyedArchiver(pub id);
impl std::ops::Deref for NSKeyedArchiver {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSKeyedArchiver {}
impl NSKeyedArchiver {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSKeyedArchiver), alloc) })
    }
}
impl INSCoder for NSKeyedArchiver {}
impl From<NSKeyedArchiver> for NSCoder {
    fn from(child: NSKeyedArchiver) -> NSCoder {
        NSCoder(child.0)
    }
}
impl std::convert::TryFrom<NSCoder> for NSKeyedArchiver {
    type Error = &'static str;
    fn try_from(parent: NSCoder) -> Result<NSKeyedArchiver, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSKeyedArchiver)) };
        if is_kind_of {
            Ok(NSKeyedArchiver(parent.0))
        } else {
            Err("This NSCoder cannot be downcasted to NSKeyedArchiver")
        }
    }
}
impl INSObject for NSKeyedArchiver {}
impl PNSObject for NSKeyedArchiver {}
impl From<NSKeyedArchiver> for NSObject {
    fn from(child: NSKeyedArchiver) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSKeyedArchiver {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSKeyedArchiver, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSKeyedArchiver)) };
        if is_kind_of {
            Ok(NSKeyedArchiver(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSKeyedArchiver")
        }
    }
}
impl INSKeyedArchiver for NSKeyedArchiver {}
pub trait INSKeyedArchiver: Sized + std::ops::Deref {
    unsafe fn initRequiringSecureCoding_(&self, requiresSecureCoding: BOOL) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initRequiringSecureCoding: requiresSecureCoding)
    }
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initForWritingWithMutableData_(&self, data: NSMutableData) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initForWritingWithMutableData: data)
    }
    unsafe fn finishEncoding(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, finishEncoding)
    }
    unsafe fn setClassName_forClass_(&self, codedName: NSString, cls: Class)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setClassName : codedName forClass : cls)
    }
    unsafe fn classNameForClass_(&self, cls: Class) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, classNameForClass: cls)
    }
    unsafe fn encodeObject_forKey_(&self, object: id, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeObject : object forKey : key)
    }
    unsafe fn encodeConditionalObject_forKey_(&self, object: id, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeConditionalObject : object forKey : key)
    }
    unsafe fn encodeBool_forKey_(&self, value: BOOL, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeBool : value forKey : key)
    }
    unsafe fn encodeInt_forKey_(&self, value: ::std::os::raw::c_int, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeInt : value forKey : key)
    }
    unsafe fn encodeInt32_forKey_(&self, value: i32, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeInt32 : value forKey : key)
    }
    unsafe fn encodeInt64_forKey_(&self, value: i64, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeInt64 : value forKey : key)
    }
    unsafe fn encodeFloat_forKey_(&self, value: f32, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeFloat : value forKey : key)
    }
    unsafe fn encodeDouble_forKey_(&self, value: f64, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeDouble : value forKey : key)
    }
    unsafe fn encodeBytes_length_forKey_(&self, bytes: *const u8, length: NSUInteger, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeBytes : bytes length : length forKey : key)
    }
    unsafe fn delegate(&self) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, delegate)
    }
    unsafe fn setDelegate_(&self, delegate: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDelegate: delegate)
    }
    unsafe fn outputFormat(&self) -> NSPropertyListFormat
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, outputFormat)
    }
    unsafe fn setOutputFormat_(&self, outputFormat: NSPropertyListFormat)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setOutputFormat: outputFormat)
    }
    unsafe fn encodedData(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, encodedData)
    }
    unsafe fn requiresSecureCoding(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, requiresSecureCoding)
    }
    unsafe fn setRequiresSecureCoding_(&self, requiresSecureCoding: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setRequiresSecureCoding: requiresSecureCoding)
    }
    unsafe fn archivedDataWithRootObject_requiringSecureCoding_error_(
        object: id,
        requiresSecureCoding: BOOL,
        error: *mut NSError,
    ) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSKeyedArchiver) , archivedDataWithRootObject : object requiringSecureCoding : requiresSecureCoding error : error)
    }
    unsafe fn archivedDataWithRootObject_(rootObject: id) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSKeyedArchiver),
            archivedDataWithRootObject: rootObject
        )
    }
    unsafe fn archiveRootObject_toFile_(rootObject: id, path: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSKeyedArchiver) , archiveRootObject : rootObject toFile : path)
    }
    unsafe fn class_setClassName_forClass_(codedName: NSString, cls: Class)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSKeyedArchiver) , setClassName : codedName forClass : cls)
    }
    unsafe fn class_classNameForClass_(cls: Class) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSKeyedArchiver), classNameForClass: cls)
    }
}
impl NSObject_NSKeyedArchiverObjectSubstitution for NSObject {}
pub trait NSObject_NSKeyedArchiverObjectSubstitution: Sized + std::ops::Deref {
    unsafe fn replacementObjectForKeyedArchiver_(&self, archiver: NSKeyedArchiver) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, replacementObjectForKeyedArchiver: archiver)
    }
    unsafe fn classForKeyedArchiver(&self) -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, classForKeyedArchiver)
    }
    unsafe fn classFallbacksForKeyedArchiver() -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), classFallbacksForKeyedArchiver)
    }
}
impl NSObject_NSKeyedUnarchiverObjectSubstitution for NSObject {}
pub trait NSObject_NSKeyedUnarchiverObjectSubstitution: Sized + std::ops::Deref {
    unsafe fn classForKeyedUnarchiver() -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSObject), classForKeyedUnarchiver)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSMethodSignature(pub id);
impl std::ops::Deref for NSMethodSignature {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSMethodSignature {}
impl NSMethodSignature {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSMethodSignature), alloc) })
    }
}
impl INSObject for NSMethodSignature {}
impl PNSObject for NSMethodSignature {}
impl From<NSMethodSignature> for NSObject {
    fn from(child: NSMethodSignature) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSMethodSignature {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSMethodSignature, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSMethodSignature)) };
        if is_kind_of {
            Ok(NSMethodSignature(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSMethodSignature")
        }
    }
}
impl INSMethodSignature for NSMethodSignature {}
pub trait INSMethodSignature: Sized + std::ops::Deref {
    unsafe fn getArgumentTypeAtIndex_(&self, idx: NSUInteger) -> *const ::std::os::raw::c_char
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, getArgumentTypeAtIndex: idx)
    }
    unsafe fn isOneway(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isOneway)
    }
    unsafe fn numberOfArguments(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, numberOfArguments)
    }
    unsafe fn frameLength(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, frameLength)
    }
    unsafe fn methodReturnType(&self) -> *const ::std::os::raw::c_char
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, methodReturnType)
    }
    unsafe fn methodReturnLength(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, methodReturnLength)
    }
    unsafe fn signatureWithObjCTypes_(types: *const ::std::os::raw::c_char) -> NSMethodSignature
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSMethodSignature), signatureWithObjCTypes: types)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSPort(pub id);
impl std::ops::Deref for NSPort {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSPort {}
impl NSPort {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSPort), alloc) })
    }
}
impl PNSCopying for NSPort {}
impl PNSCoding for NSPort {}
impl INSObject for NSPort {}
impl PNSObject for NSPort {}
impl From<NSPort> for NSObject {
    fn from(child: NSPort) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSPort {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSPort, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSPort)) };
        if is_kind_of {
            Ok(NSPort(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSPort")
        }
    }
}
impl INSPort for NSPort {}
pub trait INSPort: Sized + std::ops::Deref {
    unsafe fn invalidate(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, invalidate)
    }
    unsafe fn setDelegate_(&self, anObject: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDelegate: anObject)
    }
    unsafe fn delegate(&self) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, delegate)
    }
    unsafe fn scheduleInRunLoop_forMode_(&self, runLoop: NSRunLoop, mode: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , scheduleInRunLoop : runLoop forMode : mode)
    }
    unsafe fn removeFromRunLoop_forMode_(&self, runLoop: NSRunLoop, mode: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeFromRunLoop : runLoop forMode : mode)
    }
    unsafe fn sendBeforeDate_components_from_reserved_(
        &self,
        limitDate: NSDate,
        components: NSMutableArray,
        receivePort: NSPort,
        headerSpaceReserved: NSUInteger,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , sendBeforeDate : limitDate components : components from : receivePort reserved : headerSpaceReserved)
    }
    unsafe fn sendBeforeDate_msgid_components_from_reserved_(
        &self,
        limitDate: NSDate,
        msgID: NSUInteger,
        components: NSMutableArray,
        receivePort: NSPort,
        headerSpaceReserved: NSUInteger,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , sendBeforeDate : limitDate msgid : msgID components : components from : receivePort reserved : headerSpaceReserved)
    }
    unsafe fn addConnection_toRunLoop_forMode_(
        &self,
        conn: NSConnection,
        runLoop: NSRunLoop,
        mode: NSString,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , addConnection : conn toRunLoop : runLoop forMode : mode)
    }
    unsafe fn removeConnection_fromRunLoop_forMode_(
        &self,
        conn: NSConnection,
        runLoop: NSRunLoop,
        mode: NSString,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeConnection : conn fromRunLoop : runLoop forMode : mode)
    }
    unsafe fn isValid(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isValid)
    }
    unsafe fn reservedSpaceLength(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, reservedSpaceLength)
    }
    unsafe fn port() -> NSPort
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSPort), port)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSProxy(pub id);
impl std::ops::Deref for NSProxy {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSProxy {}
impl NSProxy {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSProxy), alloc) })
    }
}
impl PNSObject for NSProxy {}
impl INSProxy for NSProxy {}
pub trait INSProxy: Sized + std::ops::Deref {
    unsafe fn forwardInvocation_(&self, invocation: NSInvocation)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, forwardInvocation: invocation)
    }
    unsafe fn methodSignatureForSelector_(&self, sel: objc::runtime::Sel) -> NSMethodSignature
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, methodSignatureForSelector: sel)
    }
    unsafe fn dealloc(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dealloc)
    }
    unsafe fn finalize(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, finalize)
    }
    unsafe fn allowsWeakReference(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowsWeakReference)
    }
    unsafe fn retainWeakReference(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, retainWeakReference)
    }
    unsafe fn description(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, description)
    }
    unsafe fn debugDescription(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, debugDescription)
    }
    unsafe fn alloc() -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSProxy), alloc)
    }
    unsafe fn allocWithZone_(zone: *mut NSZone) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSProxy), allocWithZone: zone)
    }
    unsafe fn class() -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSProxy), class)
    }
    unsafe fn respondsToSelector_(aSelector: objc::runtime::Sel) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSProxy), respondsToSelector: aSelector)
    }
}
impl<ObjectType: 'static> NSOrderedSet_NSKeyValueSorting<ObjectType> for NSOrderedSet {}
pub trait NSOrderedSet_NSKeyValueSorting<ObjectType>: Sized + std::ops::Deref {
    unsafe fn sortedArrayUsingDescriptors_(&self, sortDescriptors: NSArray) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sortedArrayUsingDescriptors: sortDescriptors)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSThread(pub id);
impl std::ops::Deref for NSThread {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSThread {}
impl NSThread {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSThread), alloc) })
    }
}
impl INSObject for NSThread {}
impl PNSObject for NSThread {}
impl From<NSThread> for NSObject {
    fn from(child: NSThread) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSThread {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSThread, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSThread)) };
        if is_kind_of {
            Ok(NSThread(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSThread")
        }
    }
}
impl INSThread for NSThread {}
pub trait INSThread: Sized + std::ops::Deref {
    unsafe fn init(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithTarget_selector_object_(
        &self,
        target: id,
        selector: objc::runtime::Sel,
        argument: id,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithTarget : target selector : selector object : argument)
    }
    unsafe fn initWithBlock_(&self, block: *mut ::std::os::raw::c_void) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithBlock: block)
    }
    unsafe fn cancel(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, cancel)
    }
    unsafe fn start(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, start)
    }
    unsafe fn main(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, main)
    }
    unsafe fn threadDictionary(&self) -> NSMutableDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, threadDictionary)
    }
    unsafe fn threadPriority(&self) -> f64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, threadPriority)
    }
    unsafe fn setThreadPriority_(&self, threadPriority: f64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setThreadPriority: threadPriority)
    }
    unsafe fn qualityOfService(&self) -> NSQualityOfService
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, qualityOfService)
    }
    unsafe fn setQualityOfService_(&self, qualityOfService: NSQualityOfService)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setQualityOfService: qualityOfService)
    }
    unsafe fn name(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, name)
    }
    unsafe fn setName_(&self, name: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setName: name)
    }
    unsafe fn stackSize(&self) -> NSUInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stackSize)
    }
    unsafe fn setStackSize_(&self, stackSize: NSUInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setStackSize: stackSize)
    }
    unsafe fn isMainThread(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isMainThread)
    }
    unsafe fn isExecuting(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isExecuting)
    }
    unsafe fn isFinished(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isFinished)
    }
    unsafe fn isCancelled(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isCancelled)
    }
    unsafe fn detachNewThreadWithBlock_(block: *mut ::std::os::raw::c_void)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSThread), detachNewThreadWithBlock: block)
    }
    unsafe fn detachNewThreadSelector_toTarget_withObject_(
        selector: objc::runtime::Sel,
        target: id,
        argument: id,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSThread) , detachNewThreadSelector : selector toTarget : target withObject : argument)
    }
    unsafe fn isMultiThreaded() -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSThread), isMultiThreaded)
    }
    unsafe fn sleepUntilDate_(date: NSDate)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSThread), sleepUntilDate: date)
    }
    unsafe fn sleepForTimeInterval_(ti: NSTimeInterval)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSThread), sleepForTimeInterval: ti)
    }
    unsafe fn exit()
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSThread), exit)
    }
    unsafe fn class_threadPriority() -> f64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSThread), threadPriority)
    }
    unsafe fn class_setThreadPriority_(p: f64) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSThread), setThreadPriority: p)
    }
    unsafe fn currentThread() -> NSThread
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSThread), currentThread)
    }
    unsafe fn callStackReturnAddresses() -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSThread), callStackReturnAddresses)
    }
    unsafe fn callStackSymbols() -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSThread), callStackSymbols)
    }
    unsafe fn class_isMainThread() -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSThread), isMainThread)
    }
    unsafe fn mainThread() -> NSThread
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSThread), mainThread)
    }
}
impl NSObject_NSThreadPerformAdditions for NSObject {}
pub trait NSObject_NSThreadPerformAdditions: Sized + std::ops::Deref {
    unsafe fn performSelectorOnMainThread_withObject_waitUntilDone_modes_(
        &self,
        aSelector: objc::runtime::Sel,
        arg: id,
        wait: BOOL,
        array: NSArray,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performSelectorOnMainThread : aSelector withObject : arg waitUntilDone : wait modes : array)
    }
    unsafe fn performSelectorOnMainThread_withObject_waitUntilDone_(
        &self,
        aSelector: objc::runtime::Sel,
        arg: id,
        wait: BOOL,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performSelectorOnMainThread : aSelector withObject : arg waitUntilDone : wait)
    }
    unsafe fn performSelector_onThread_withObject_waitUntilDone_modes_(
        &self,
        aSelector: objc::runtime::Sel,
        thr: NSThread,
        arg: id,
        wait: BOOL,
        array: NSArray,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performSelector : aSelector onThread : thr withObject : arg waitUntilDone : wait modes : array)
    }
    unsafe fn performSelector_onThread_withObject_waitUntilDone_(
        &self,
        aSelector: objc::runtime::Sel,
        thr: NSThread,
        arg: id,
        wait: BOOL,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performSelector : aSelector onThread : thr withObject : arg waitUntilDone : wait)
    }
    unsafe fn performSelectorInBackground_withObject_(&self, aSelector: objc::runtime::Sel, arg: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , performSelectorInBackground : aSelector withObject : arg)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSTimeZone(pub id);
impl std::ops::Deref for NSTimeZone {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSTimeZone {}
impl NSTimeZone {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSTimeZone), alloc) })
    }
}
impl PNSCopying for NSTimeZone {}
impl PNSSecureCoding for NSTimeZone {}
impl INSObject for NSTimeZone {}
impl PNSObject for NSTimeZone {}
impl From<NSTimeZone> for NSObject {
    fn from(child: NSTimeZone) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSTimeZone {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSTimeZone, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSTimeZone)) };
        if is_kind_of {
            Ok(NSTimeZone(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSTimeZone")
        }
    }
}
impl INSTimeZone for NSTimeZone {}
pub trait INSTimeZone: Sized + std::ops::Deref {
    unsafe fn secondsFromGMTForDate_(&self, aDate: NSDate) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, secondsFromGMTForDate: aDate)
    }
    unsafe fn abbreviationForDate_(&self, aDate: NSDate) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, abbreviationForDate: aDate)
    }
    unsafe fn isDaylightSavingTimeForDate_(&self, aDate: NSDate) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isDaylightSavingTimeForDate: aDate)
    }
    unsafe fn daylightSavingTimeOffsetForDate_(&self, aDate: NSDate) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, daylightSavingTimeOffsetForDate: aDate)
    }
    unsafe fn nextDaylightSavingTimeTransitionAfterDate_(&self, aDate: NSDate) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, nextDaylightSavingTimeTransitionAfterDate: aDate)
    }
    unsafe fn name(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, name)
    }
    unsafe fn data(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, data)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSTimer(pub id);
impl std::ops::Deref for NSTimer {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSTimer {}
impl NSTimer {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSTimer), alloc) })
    }
}
impl INSObject for NSTimer {}
impl PNSObject for NSTimer {}
impl From<NSTimer> for NSObject {
    fn from(child: NSTimer) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSTimer {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSTimer, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSTimer)) };
        if is_kind_of {
            Ok(NSTimer(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSTimer")
        }
    }
}
impl INSTimer for NSTimer {}
pub trait INSTimer: Sized + std::ops::Deref {
    unsafe fn initWithFireDate_interval_repeats_block_(
        &self,
        date: NSDate,
        interval: NSTimeInterval,
        repeats: BOOL,
        block: *mut ::std::os::raw::c_void,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithFireDate : date interval : interval repeats : repeats block : block)
    }
    unsafe fn initWithFireDate_interval_target_selector_userInfo_repeats_(
        &self,
        date: NSDate,
        ti: NSTimeInterval,
        t: id,
        s: objc::runtime::Sel,
        ui: id,
        rep: BOOL,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithFireDate : date interval : ti target : t selector : s userInfo : ui repeats : rep)
    }
    unsafe fn fire(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fire)
    }
    unsafe fn invalidate(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, invalidate)
    }
    unsafe fn fireDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fireDate)
    }
    unsafe fn setFireDate_(&self, fireDate: NSDate)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setFireDate: fireDate)
    }
    unsafe fn timeInterval(&self) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeInterval)
    }
    unsafe fn tolerance(&self) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, tolerance)
    }
    unsafe fn setTolerance_(&self, tolerance: NSTimeInterval)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTolerance: tolerance)
    }
    unsafe fn isValid(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isValid)
    }
    unsafe fn userInfo(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, userInfo)
    }
    unsafe fn timerWithTimeInterval_invocation_repeats_(
        ti: NSTimeInterval,
        invocation: NSInvocation,
        yesOrNo: BOOL,
    ) -> NSTimer
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSTimer) , timerWithTimeInterval : ti invocation : invocation repeats : yesOrNo)
    }
    unsafe fn scheduledTimerWithTimeInterval_invocation_repeats_(
        ti: NSTimeInterval,
        invocation: NSInvocation,
        yesOrNo: BOOL,
    ) -> NSTimer
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSTimer) , scheduledTimerWithTimeInterval : ti invocation : invocation repeats : yesOrNo)
    }
    unsafe fn timerWithTimeInterval_target_selector_userInfo_repeats_(
        ti: NSTimeInterval,
        aTarget: id,
        aSelector: objc::runtime::Sel,
        userInfo: id,
        yesOrNo: BOOL,
    ) -> NSTimer
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSTimer) , timerWithTimeInterval : ti target : aTarget selector : aSelector userInfo : userInfo repeats : yesOrNo)
    }
    unsafe fn scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(
        ti: NSTimeInterval,
        aTarget: id,
        aSelector: objc::runtime::Sel,
        userInfo: id,
        yesOrNo: BOOL,
    ) -> NSTimer
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSTimer) , scheduledTimerWithTimeInterval : ti target : aTarget selector : aSelector userInfo : userInfo repeats : yesOrNo)
    }
    unsafe fn timerWithTimeInterval_repeats_block_(
        interval: NSTimeInterval,
        repeats: BOOL,
        block: *mut ::std::os::raw::c_void,
    ) -> NSTimer
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSTimer) , timerWithTimeInterval : interval repeats : repeats block : block)
    }
    unsafe fn scheduledTimerWithTimeInterval_repeats_block_(
        interval: NSTimeInterval,
        repeats: BOOL,
        block: *mut ::std::os::raw::c_void,
    ) -> NSTimer
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSTimer) , scheduledTimerWithTimeInterval : interval repeats : repeats block : block)
    }
}
pub type DescType = ResType;
pub type AEKeyword = FourCharCode;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpaqueAEDataStorageType {
    _unused: [u8; 0],
}
pub type AEDataStorageType = *mut OpaqueAEDataStorageType;
pub type AEDataStorage = *mut AEDataStorageType;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct AEDesc {
    pub descriptorType: DescType,
    pub dataHandle: AEDataStorage,
}
#[test]
fn bindgen_test_layout_AEDesc() {
    assert_eq!(
        ::std::mem::size_of::<AEDesc>(),
        12usize,
        concat!("Size of: ", stringify!(AEDesc))
    );
    assert_eq!(
        ::std::mem::align_of::<AEDesc>(),
        2usize,
        concat!("Alignment of ", stringify!(AEDesc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AEDesc>())).descriptorType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AEDesc),
            "::",
            stringify!(descriptorType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<AEDesc>())).dataHandle as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AEDesc),
            "::",
            stringify!(dataHandle)
        )
    );
}
pub type AEReturnID = SInt16;
pub type AETransactionID = SInt32;
pub type AEEventClass = FourCharCode;
pub type AEEventID = FourCharCode;
pub type NSValueTransformerName = NSString;
#[repr(transparent)]
#[derive(Clone)]
pub struct NSValueTransformer(pub id);
impl std::ops::Deref for NSValueTransformer {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSValueTransformer {}
impl NSValueTransformer {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSValueTransformer), alloc) })
    }
}
impl INSObject for NSValueTransformer {}
impl PNSObject for NSValueTransformer {}
impl From<NSValueTransformer> for NSObject {
    fn from(child: NSValueTransformer) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSValueTransformer {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSValueTransformer, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSValueTransformer)) };
        if is_kind_of {
            Ok(NSValueTransformer(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSValueTransformer")
        }
    }
}
impl INSValueTransformer for NSValueTransformer {}
pub trait INSValueTransformer: Sized + std::ops::Deref {
    unsafe fn transformedValue_(&self, value: id) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, transformedValue: value)
    }
    unsafe fn reverseTransformedValue_(&self, value: id) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, reverseTransformedValue: value)
    }
    unsafe fn setValueTransformer_forName_(transformer: NSValueTransformer, name: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSValueTransformer) , setValueTransformer : transformer forName : name)
    }
    unsafe fn valueTransformerForName_(name: NSString) -> NSValueTransformer
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSValueTransformer), valueTransformerForName: name)
    }
    unsafe fn valueTransformerNames() -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSValueTransformer), valueTransformerNames)
    }
    unsafe fn transformedValueClass() -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSValueTransformer), transformedValueClass)
    }
    unsafe fn allowsReverseTransformation() -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSValueTransformer), allowsReverseTransformation)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSPredicate(pub id);
impl std::ops::Deref for NSPredicate {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSPredicate {}
impl NSPredicate {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSPredicate), alloc) })
    }
}
impl PNSSecureCoding for NSPredicate {}
impl PNSCopying for NSPredicate {}
impl INSObject for NSPredicate {}
impl PNSObject for NSPredicate {}
impl From<NSPredicate> for NSObject {
    fn from(child: NSPredicate) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSPredicate {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSPredicate, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSPredicate)) };
        if is_kind_of {
            Ok(NSPredicate(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSPredicate")
        }
    }
}
impl INSPredicate for NSPredicate {}
pub trait INSPredicate: Sized + std::ops::Deref {
    unsafe fn predicateWithSubstitutionVariables_(&self, variables: NSDictionary) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, predicateWithSubstitutionVariables: variables)
    }
    unsafe fn evaluateWithObject_(&self, object: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, evaluateWithObject: object)
    }
    unsafe fn evaluateWithObject_substitutionVariables_(
        &self,
        object: id,
        bindings: NSDictionary,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , evaluateWithObject : object substitutionVariables : bindings)
    }
    unsafe fn allowEvaluation(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowEvaluation)
    }
    unsafe fn predicateFormat(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, predicateFormat)
    }
    unsafe fn predicateWithFormat_argumentArray_(
        predicateFormat: NSString,
        arguments: NSArray,
    ) -> NSPredicate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSPredicate) , predicateWithFormat : predicateFormat argumentArray : arguments)
    }
    unsafe fn predicateWithFormat_(predicateFormat: NSString) -> NSPredicate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSPredicate), predicateWithFormat: predicateFormat)
    }
    unsafe fn predicateWithFormat_arguments_(
        predicateFormat: NSString,
        argList: *mut __va_list_tag,
    ) -> NSPredicate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSPredicate) , predicateWithFormat : predicateFormat arguments : argList)
    }
    unsafe fn predicateFromMetadataQueryString_(queryString: NSString) -> NSPredicate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSPredicate),
            predicateFromMetadataQueryString: queryString
        )
    }
    unsafe fn predicateWithValue_(value: BOOL) -> NSPredicate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSPredicate), predicateWithValue: value)
    }
    unsafe fn predicateWithBlock_(block: *mut ::std::os::raw::c_void) -> NSPredicate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSPredicate), predicateWithBlock: block)
    }
}
impl<ObjectType: 'static> NSOrderedSet_NSPredicateSupport<ObjectType> for NSOrderedSet {}
pub trait NSOrderedSet_NSPredicateSupport<ObjectType>: Sized + std::ops::Deref {
    unsafe fn filteredOrderedSetUsingPredicate_(&self, p: NSPredicate) -> NSOrderedSet
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, filteredOrderedSetUsingPredicate: p)
    }
}
pub const NSDateComponentsFormatterUnitsStyle_NSDateComponentsFormatterUnitsStylePositional:
    NSDateComponentsFormatterUnitsStyle = 0;
pub const NSDateComponentsFormatterUnitsStyle_NSDateComponentsFormatterUnitsStyleAbbreviated:
    NSDateComponentsFormatterUnitsStyle = 1;
pub const NSDateComponentsFormatterUnitsStyle_NSDateComponentsFormatterUnitsStyleShort:
    NSDateComponentsFormatterUnitsStyle = 2;
pub const NSDateComponentsFormatterUnitsStyle_NSDateComponentsFormatterUnitsStyleFull:
    NSDateComponentsFormatterUnitsStyle = 3;
pub const NSDateComponentsFormatterUnitsStyle_NSDateComponentsFormatterUnitsStyleSpellOut:
    NSDateComponentsFormatterUnitsStyle = 4;
pub const NSDateComponentsFormatterUnitsStyle_NSDateComponentsFormatterUnitsStyleBrief:
    NSDateComponentsFormatterUnitsStyle = 5;
pub type NSDateComponentsFormatterUnitsStyle = NSInteger;
pub const NSDateComponentsFormatterZeroFormattingBehavior_NSDateComponentsFormatterZeroFormattingBehaviorNone : NSDateComponentsFormatterZeroFormattingBehavior = 0 ;
pub const NSDateComponentsFormatterZeroFormattingBehavior_NSDateComponentsFormatterZeroFormattingBehaviorDefault : NSDateComponentsFormatterZeroFormattingBehavior = 1 ;
pub const NSDateComponentsFormatterZeroFormattingBehavior_NSDateComponentsFormatterZeroFormattingBehaviorDropLeading : NSDateComponentsFormatterZeroFormattingBehavior = 2 ;
pub const NSDateComponentsFormatterZeroFormattingBehavior_NSDateComponentsFormatterZeroFormattingBehaviorDropMiddle : NSDateComponentsFormatterZeroFormattingBehavior = 4 ;
pub const NSDateComponentsFormatterZeroFormattingBehavior_NSDateComponentsFormatterZeroFormattingBehaviorDropTrailing : NSDateComponentsFormatterZeroFormattingBehavior = 8 ;
pub const NSDateComponentsFormatterZeroFormattingBehavior_NSDateComponentsFormatterZeroFormattingBehaviorDropAll : NSDateComponentsFormatterZeroFormattingBehavior = 14 ;
pub const NSDateComponentsFormatterZeroFormattingBehavior_NSDateComponentsFormatterZeroFormattingBehaviorPad : NSDateComponentsFormatterZeroFormattingBehavior = 65536 ;
pub type NSDateComponentsFormatterZeroFormattingBehavior = NSUInteger;
#[repr(transparent)]
#[derive(Clone)]
pub struct NSDateComponentsFormatter(pub id);
impl std::ops::Deref for NSDateComponentsFormatter {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDateComponentsFormatter {}
impl NSDateComponentsFormatter {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSDateComponentsFormatter), alloc) })
    }
}
impl INSFormatter for NSDateComponentsFormatter {}
impl PNSCopying for NSDateComponentsFormatter {}
impl PNSCoding for NSDateComponentsFormatter {}
impl From<NSDateComponentsFormatter> for NSFormatter {
    fn from(child: NSDateComponentsFormatter) -> NSFormatter {
        NSFormatter(child.0)
    }
}
impl std::convert::TryFrom<NSFormatter> for NSDateComponentsFormatter {
    type Error = &'static str;
    fn try_from(parent: NSFormatter) -> Result<NSDateComponentsFormatter, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSDateComponentsFormatter)) };
        if is_kind_of {
            Ok(NSDateComponentsFormatter(parent.0))
        } else {
            Err("This NSFormatter cannot be downcasted to NSDateComponentsFormatter")
        }
    }
}
impl INSObject for NSDateComponentsFormatter {}
impl PNSObject for NSDateComponentsFormatter {}
impl From<NSDateComponentsFormatter> for NSObject {
    fn from(child: NSDateComponentsFormatter) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSDateComponentsFormatter {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSDateComponentsFormatter, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSDateComponentsFormatter)) };
        if is_kind_of {
            Ok(NSDateComponentsFormatter(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSDateComponentsFormatter")
        }
    }
}
impl INSDateComponentsFormatter for NSDateComponentsFormatter {}
pub trait INSDateComponentsFormatter: Sized + std::ops::Deref {
    unsafe fn stringForObjectValue_(&self, obj: id) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringForObjectValue: obj)
    }
    unsafe fn stringFromDateComponents_(&self, components: NSDateComponents) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringFromDateComponents: components)
    }
    unsafe fn stringFromDate_toDate_(&self, startDate: NSDate, endDate: NSDate) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , stringFromDate : startDate toDate : endDate)
    }
    unsafe fn stringFromTimeInterval_(&self, ti: NSTimeInterval) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringFromTimeInterval: ti)
    }
    unsafe fn getObjectValue_forString_errorDescription_(
        &self,
        obj: *mut id,
        string: NSString,
        error: *mut NSString,
    ) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , getObjectValue : obj forString : string errorDescription : error)
    }
    unsafe fn unitsStyle(&self) -> NSDateComponentsFormatterUnitsStyle
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, unitsStyle)
    }
    unsafe fn setUnitsStyle_(&self, unitsStyle: NSDateComponentsFormatterUnitsStyle)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setUnitsStyle: unitsStyle)
    }
    unsafe fn allowedUnits(&self) -> NSCalendarUnit
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowedUnits)
    }
    unsafe fn setAllowedUnits_(&self, allowedUnits: NSCalendarUnit)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setAllowedUnits: allowedUnits)
    }
    unsafe fn zeroFormattingBehavior(&self) -> NSDateComponentsFormatterZeroFormattingBehavior
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, zeroFormattingBehavior)
    }
    unsafe fn setZeroFormattingBehavior_(
        &self,
        zeroFormattingBehavior: NSDateComponentsFormatterZeroFormattingBehavior,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setZeroFormattingBehavior: zeroFormattingBehavior)
    }
    unsafe fn calendar(&self) -> NSCalendar
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, calendar)
    }
    unsafe fn setCalendar_(&self, calendar: NSCalendar)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCalendar: calendar)
    }
    unsafe fn referenceDate(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, referenceDate)
    }
    unsafe fn setReferenceDate_(&self, referenceDate: NSDate)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setReferenceDate: referenceDate)
    }
    unsafe fn allowsFractionalUnits(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, allowsFractionalUnits)
    }
    unsafe fn setAllowsFractionalUnits_(&self, allowsFractionalUnits: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setAllowsFractionalUnits: allowsFractionalUnits)
    }
    unsafe fn maximumUnitCount(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, maximumUnitCount)
    }
    unsafe fn setMaximumUnitCount_(&self, maximumUnitCount: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setMaximumUnitCount: maximumUnitCount)
    }
    unsafe fn collapsesLargestUnit(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, collapsesLargestUnit)
    }
    unsafe fn setCollapsesLargestUnit_(&self, collapsesLargestUnit: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCollapsesLargestUnit: collapsesLargestUnit)
    }
    unsafe fn includesApproximationPhrase(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, includesApproximationPhrase)
    }
    unsafe fn setIncludesApproximationPhrase_(&self, includesApproximationPhrase: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setIncludesApproximationPhrase: includesApproximationPhrase
        )
    }
    unsafe fn includesTimeRemainingPhrase(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, includesTimeRemainingPhrase)
    }
    unsafe fn setIncludesTimeRemainingPhrase_(&self, includesTimeRemainingPhrase: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setIncludesTimeRemainingPhrase: includesTimeRemainingPhrase
        )
    }
    unsafe fn formattingContext(&self) -> NSFormattingContext
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, formattingContext)
    }
    unsafe fn setFormattingContext_(&self, formattingContext: NSFormattingContext)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setFormattingContext: formattingContext)
    }
    unsafe fn localizedStringFromDateComponents_unitsStyle_(
        components: NSDateComponents,
        unitsStyle: NSDateComponentsFormatterUnitsStyle,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSDateComponentsFormatter) , localizedStringFromDateComponents : components unitsStyle : unitsStyle)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSArchiver(pub id);
impl std::ops::Deref for NSArchiver {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSArchiver {}
impl NSArchiver {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSArchiver), alloc) })
    }
}
impl INSCoder for NSArchiver {}
impl From<NSArchiver> for NSCoder {
    fn from(child: NSArchiver) -> NSCoder {
        NSCoder(child.0)
    }
}
impl std::convert::TryFrom<NSCoder> for NSArchiver {
    type Error = &'static str;
    fn try_from(parent: NSCoder) -> Result<NSArchiver, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSArchiver)) };
        if is_kind_of {
            Ok(NSArchiver(parent.0))
        } else {
            Err("This NSCoder cannot be downcasted to NSArchiver")
        }
    }
}
impl INSObject for NSArchiver {}
impl PNSObject for NSArchiver {}
impl From<NSArchiver> for NSObject {
    fn from(child: NSArchiver) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSArchiver {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSArchiver, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSArchiver)) };
        if is_kind_of {
            Ok(NSArchiver(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSArchiver")
        }
    }
}
impl INSArchiver for NSArchiver {}
pub trait INSArchiver: Sized + std::ops::Deref {
    unsafe fn initForWritingWithMutableData_(&self, mdata: NSMutableData) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initForWritingWithMutableData: mdata)
    }
    unsafe fn encodeRootObject_(&self, rootObject: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, encodeRootObject: rootObject)
    }
    unsafe fn encodeConditionalObject_(&self, object: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, encodeConditionalObject: object)
    }
    unsafe fn encodeClassName_intoClassName_(&self, trueName: NSString, inArchiveName: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , encodeClassName : trueName intoClassName : inArchiveName)
    }
    unsafe fn classNameEncodedForTrueClassName_(&self, trueName: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, classNameEncodedForTrueClassName: trueName)
    }
    unsafe fn replaceObject_withObject_(&self, object: id, newObject: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , replaceObject : object withObject : newObject)
    }
    unsafe fn archiverData(&self) -> NSMutableData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, archiverData)
    }
    unsafe fn archivedDataWithRootObject_(rootObject: id) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSArchiver), archivedDataWithRootObject: rootObject)
    }
    unsafe fn archiveRootObject_toFile_(rootObject: id, path: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSArchiver) , archiveRootObject : rootObject toFile : path)
    }
}
impl NSObject_NSArchiverCallback for NSObject {}
pub trait NSObject_NSArchiverCallback: Sized + std::ops::Deref {
    unsafe fn replacementObjectForArchiver_(&self, archiver: NSArchiver) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, replacementObjectForArchiver: archiver)
    }
    unsafe fn classForArchiver(&self) -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, classForArchiver)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSCalendarDate(pub id);
impl std::ops::Deref for NSCalendarDate {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSCalendarDate {}
impl NSCalendarDate {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSCalendarDate), alloc) })
    }
}
impl INSDate for NSCalendarDate {}
impl PNSCopying for NSCalendarDate {}
impl PNSSecureCoding for NSCalendarDate {}
impl From<NSCalendarDate> for NSDate {
    fn from(child: NSCalendarDate) -> NSDate {
        NSDate(child.0)
    }
}
impl std::convert::TryFrom<NSDate> for NSCalendarDate {
    type Error = &'static str;
    fn try_from(parent: NSDate) -> Result<NSCalendarDate, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSCalendarDate)) };
        if is_kind_of {
            Ok(NSCalendarDate(parent.0))
        } else {
            Err("This NSDate cannot be downcasted to NSCalendarDate")
        }
    }
}
impl INSObject for NSCalendarDate {}
impl PNSObject for NSCalendarDate {}
impl From<NSCalendarDate> for NSObject {
    fn from(child: NSCalendarDate) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSCalendarDate {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSCalendarDate, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSCalendarDate)) };
        if is_kind_of {
            Ok(NSCalendarDate(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSCalendarDate")
        }
    }
}
impl INSCalendarDate for NSCalendarDate {}
pub trait INSCalendarDate: Sized + std::ops::Deref {
    unsafe fn dateByAddingYears_months_days_hours_minutes_seconds_(
        &self,
        year: NSInteger,
        month: NSInteger,
        day: NSInteger,
        hour: NSInteger,
        minute: NSInteger,
        second: NSInteger,
    ) -> NSCalendarDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , dateByAddingYears : year months : month days : day hours : hour minutes : minute seconds : second)
    }
    unsafe fn dayOfCommonEra(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dayOfCommonEra)
    }
    unsafe fn dayOfMonth(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dayOfMonth)
    }
    unsafe fn dayOfWeek(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dayOfWeek)
    }
    unsafe fn dayOfYear(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dayOfYear)
    }
    unsafe fn hourOfDay(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hourOfDay)
    }
    unsafe fn minuteOfHour(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, minuteOfHour)
    }
    unsafe fn monthOfYear(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, monthOfYear)
    }
    unsafe fn secondOfMinute(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, secondOfMinute)
    }
    unsafe fn yearOfCommonEra(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, yearOfCommonEra)
    }
    unsafe fn calendarFormat(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, calendarFormat)
    }
    unsafe fn descriptionWithCalendarFormat_locale_(&self, format: NSString, locale: id) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , descriptionWithCalendarFormat : format locale : locale)
    }
    unsafe fn descriptionWithCalendarFormat_(&self, format: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, descriptionWithCalendarFormat: format)
    }
    unsafe fn descriptionWithLocale_(&self, locale: id) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, descriptionWithLocale: locale)
    }
    unsafe fn timeZone(&self) -> NSTimeZone
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, timeZone)
    }
    unsafe fn initWithString_calendarFormat_locale_(
        &self,
        description: NSString,
        format: NSString,
        locale: id,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithString : description calendarFormat : format locale : locale)
    }
    unsafe fn initWithString_calendarFormat_(&self, description: NSString, format: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithString : description calendarFormat : format)
    }
    unsafe fn initWithString_(&self, description: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithString: description)
    }
    unsafe fn initWithYear_month_day_hour_minute_second_timeZone_(
        &self,
        year: NSInteger,
        month: NSUInteger,
        day: NSUInteger,
        hour: NSUInteger,
        minute: NSUInteger,
        second: NSUInteger,
        aTimeZone: NSTimeZone,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithYear : year month : month day : day hour : hour minute : minute second : second timeZone : aTimeZone)
    }
    unsafe fn setCalendarFormat_(&self, format: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setCalendarFormat: format)
    }
    unsafe fn setTimeZone_(&self, aTimeZone: NSTimeZone)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setTimeZone: aTimeZone)
    }
    unsafe fn years_months_days_hours_minutes_seconds_sinceDate_(
        &self,
        yp: *mut NSInteger,
        mop: *mut NSInteger,
        dp: *mut NSInteger,
        hp: *mut NSInteger,
        mip: *mut NSInteger,
        sp: *mut NSInteger,
        date: NSCalendarDate,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , years : yp months : mop days : dp hours : hp minutes : mip seconds : sp sinceDate : date)
    }
    unsafe fn calendarDate() -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCalendarDate), calendarDate)
    }
    unsafe fn dateWithString_calendarFormat_locale_(
        description: NSString,
        format: NSString,
        locale: id,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSCalendarDate) , dateWithString : description calendarFormat : format locale : locale)
    }
    unsafe fn dateWithString_calendarFormat_(description: NSString, format: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSCalendarDate) , dateWithString : description calendarFormat : format)
    }
    unsafe fn dateWithYear_month_day_hour_minute_second_timeZone_(
        year: NSInteger,
        month: NSUInteger,
        day: NSUInteger,
        hour: NSUInteger,
        minute: NSUInteger,
        second: NSUInteger,
        aTimeZone: NSTimeZone,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSCalendarDate) , dateWithYear : year month : month day : day hour : hour minute : minute second : second timeZone : aTimeZone)
    }
    unsafe fn distantFuture() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCalendarDate), distantFuture)
    }
    unsafe fn distantPast() -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSCalendarDate), distantPast)
    }
}
impl NSDate_NSCalendarDateExtras for NSDate {}
pub trait NSDate_NSCalendarDateExtras: Sized + std::ops::Deref {
    unsafe fn dateWithCalendarFormat_timeZone_(
        &self,
        format: NSString,
        aTimeZone: NSTimeZone,
    ) -> NSCalendarDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , dateWithCalendarFormat : format timeZone : aTimeZone)
    }
    unsafe fn descriptionWithCalendarFormat_timeZone_locale_(
        &self,
        format: NSString,
        aTimeZone: NSTimeZone,
        locale: id,
    ) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , descriptionWithCalendarFormat : format timeZone : aTimeZone locale : locale)
    }
    unsafe fn initWithString_(&self, description: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithString: description)
    }
    unsafe fn dateWithNaturalLanguageString_locale_(string: NSString, locale: id) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSDate) , dateWithNaturalLanguageString : string locale : locale)
    }
    unsafe fn dateWithNaturalLanguageString_(string: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDate), dateWithNaturalLanguageString: string)
    }
    unsafe fn dateWithString_(aString: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSDate), dateWithString: aString)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSConnection(pub id);
impl std::ops::Deref for NSConnection {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSConnection {}
impl NSConnection {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSConnection), alloc) })
    }
}
impl INSObject for NSConnection {}
impl PNSObject for NSConnection {}
impl From<NSConnection> for NSObject {
    fn from(child: NSConnection) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSConnection {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSConnection, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSConnection)) };
        if is_kind_of {
            Ok(NSConnection(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSConnection")
        }
    }
}
impl INSConnection for NSConnection {}
pub trait INSConnection: Sized + std::ops::Deref {
    unsafe fn invalidate(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, invalidate)
    }
    unsafe fn addRequestMode_(&self, rmode: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addRequestMode: rmode)
    }
    unsafe fn removeRequestMode_(&self, rmode: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeRequestMode: rmode)
    }
    unsafe fn registerName_(&self, name: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, registerName: name)
    }
    unsafe fn registerName_withNameServer_(&self, name: NSString, server: NSPortNameServer) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , registerName : name withNameServer : server)
    }
    unsafe fn initWithReceivePort_sendPort_(
        &self,
        receivePort: NSPort,
        sendPort: NSPort,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithReceivePort : receivePort sendPort : sendPort)
    }
    unsafe fn enableMultipleThreads(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, enableMultipleThreads)
    }
    unsafe fn addRunLoop_(&self, runloop: NSRunLoop)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, addRunLoop: runloop)
    }
    unsafe fn removeRunLoop_(&self, runloop: NSRunLoop)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeRunLoop: runloop)
    }
    unsafe fn runInNewThread(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, runInNewThread)
    }
    unsafe fn dispatchWithComponents_(&self, components: NSArray)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dispatchWithComponents: components)
    }
    unsafe fn statistics(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, statistics)
    }
    unsafe fn requestTimeout(&self) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, requestTimeout)
    }
    unsafe fn setRequestTimeout_(&self, requestTimeout: NSTimeInterval)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setRequestTimeout: requestTimeout)
    }
    unsafe fn replyTimeout(&self) -> NSTimeInterval
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, replyTimeout)
    }
    unsafe fn setReplyTimeout_(&self, replyTimeout: NSTimeInterval)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setReplyTimeout: replyTimeout)
    }
    unsafe fn rootObject(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, rootObject)
    }
    unsafe fn setRootObject_(&self, rootObject: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setRootObject: rootObject)
    }
    unsafe fn delegate(&self) -> *mut u64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, delegate)
    }
    unsafe fn setDelegate_(&self, delegate: *mut u64)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDelegate: delegate)
    }
    unsafe fn independentConversationQueueing(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, independentConversationQueueing)
    }
    unsafe fn setIndependentConversationQueueing_(&self, independentConversationQueueing: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setIndependentConversationQueueing: independentConversationQueueing
        )
    }
    unsafe fn isValid(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isValid)
    }
    unsafe fn rootProxy(&self) -> NSDistantObject
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, rootProxy)
    }
    unsafe fn requestModes(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, requestModes)
    }
    unsafe fn sendPort(&self) -> NSPort
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, sendPort)
    }
    unsafe fn receivePort(&self) -> NSPort
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, receivePort)
    }
    unsafe fn multipleThreadsEnabled(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, multipleThreadsEnabled)
    }
    unsafe fn remoteObjects(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, remoteObjects)
    }
    unsafe fn localObjects(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, localObjects)
    }
    unsafe fn allConnections() -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSConnection), allConnections)
    }
    unsafe fn defaultConnection() -> NSConnection
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSConnection), defaultConnection)
    }
    unsafe fn connectionWithRegisteredName_host_(name: NSString, hostName: NSString) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSConnection) , connectionWithRegisteredName : name host : hostName)
    }
    unsafe fn connectionWithRegisteredName_host_usingNameServer_(
        name: NSString,
        hostName: NSString,
        server: NSPortNameServer,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSConnection) , connectionWithRegisteredName : name host : hostName usingNameServer : server)
    }
    unsafe fn rootProxyForConnectionWithRegisteredName_host_(
        name: NSString,
        hostName: NSString,
    ) -> NSDistantObject
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSConnection) , rootProxyForConnectionWithRegisteredName : name host : hostName)
    }
    unsafe fn rootProxyForConnectionWithRegisteredName_host_usingNameServer_(
        name: NSString,
        hostName: NSString,
        server: NSPortNameServer,
    ) -> NSDistantObject
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSConnection) , rootProxyForConnectionWithRegisteredName : name host : hostName usingNameServer : server)
    }
    unsafe fn serviceConnectionWithName_rootObject_usingNameServer_(
        name: NSString,
        root: id,
        server: NSPortNameServer,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSConnection) , serviceConnectionWithName : name rootObject : root usingNameServer : server)
    }
    unsafe fn serviceConnectionWithName_rootObject_(name: NSString, root: id) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSConnection) , serviceConnectionWithName : name rootObject : root)
    }
    unsafe fn connectionWithReceivePort_sendPort_(
        receivePort: NSPort,
        sendPort: NSPort,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSConnection) , connectionWithReceivePort : receivePort sendPort : sendPort)
    }
    unsafe fn currentConversation() -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSConnection), currentConversation)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSDistantObject(pub id);
impl std::ops::Deref for NSDistantObject {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSDistantObject {}
impl NSDistantObject {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSDistantObject), alloc) })
    }
}
impl PNSCoding for NSDistantObject {}
impl INSProxy for NSDistantObject {}
impl PNSObject for NSDistantObject {}
impl From<NSDistantObject> for NSProxy {
    fn from(child: NSDistantObject) -> NSProxy {
        NSProxy(child.0)
    }
}
impl std::convert::TryFrom<NSProxy> for NSDistantObject {
    type Error = &'static str;
    fn try_from(parent: NSProxy) -> Result<NSDistantObject, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSDistantObject)) };
        if is_kind_of {
            Ok(NSDistantObject(parent.0))
        } else {
            Err("This NSProxy cannot be downcasted to NSDistantObject")
        }
    }
}
impl INSDistantObject for NSDistantObject {}
pub trait INSDistantObject: Sized + std::ops::Deref {
    unsafe fn initWithTarget_connection_(
        &self,
        target: id,
        connection: NSConnection,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithTarget : target connection : connection)
    }
    unsafe fn initWithLocal_connection_(&self, target: id, connection: NSConnection) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithLocal : target connection : connection)
    }
    unsafe fn initWithCoder_(&self, inCoder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: inCoder)
    }
    unsafe fn setProtocolForProxy_(&self, proto: Protocol)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setProtocolForProxy: proto)
    }
    unsafe fn connectionForProxy(&self) -> NSConnection
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, connectionForProxy)
    }
    unsafe fn proxyWithTarget_connection_(target: id, connection: NSConnection) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSDistantObject) , proxyWithTarget : target connection : connection)
    }
    unsafe fn proxyWithLocal_connection_(target: id, connection: NSConnection) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSDistantObject) , proxyWithLocal : target connection : connection)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSPortCoder(pub id);
impl std::ops::Deref for NSPortCoder {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSPortCoder {}
impl NSPortCoder {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSPortCoder), alloc) })
    }
}
impl INSCoder for NSPortCoder {}
impl From<NSPortCoder> for NSCoder {
    fn from(child: NSPortCoder) -> NSCoder {
        NSCoder(child.0)
    }
}
impl std::convert::TryFrom<NSCoder> for NSPortCoder {
    type Error = &'static str;
    fn try_from(parent: NSCoder) -> Result<NSPortCoder, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSPortCoder)) };
        if is_kind_of {
            Ok(NSPortCoder(parent.0))
        } else {
            Err("This NSCoder cannot be downcasted to NSPortCoder")
        }
    }
}
impl INSObject for NSPortCoder {}
impl PNSObject for NSPortCoder {}
impl From<NSPortCoder> for NSObject {
    fn from(child: NSPortCoder) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSPortCoder {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSPortCoder, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSPortCoder)) };
        if is_kind_of {
            Ok(NSPortCoder(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSPortCoder")
        }
    }
}
impl INSPortCoder for NSPortCoder {}
pub trait INSPortCoder: Sized + std::ops::Deref {
    unsafe fn isBycopy(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isBycopy)
    }
    unsafe fn isByref(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isByref)
    }
    unsafe fn encodePortObject_(&self, aport: NSPort)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, encodePortObject: aport)
    }
    unsafe fn decodePortObject(&self) -> NSPort
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, decodePortObject)
    }
    unsafe fn connection(&self) -> NSConnection
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, connection)
    }
    unsafe fn initWithReceivePort_sendPort_components_(
        &self,
        rcvPort: NSPort,
        sndPort: NSPort,
        comps: NSArray,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithReceivePort : rcvPort sendPort : sndPort components : comps)
    }
    unsafe fn dispatch(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dispatch)
    }
    unsafe fn portCoderWithReceivePort_sendPort_components_(
        rcvPort: NSPort,
        sndPort: NSPort,
        comps: NSArray,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSPortCoder) , portCoderWithReceivePort : rcvPort sendPort : sndPort components : comps)
    }
}
impl NSObject_NSDistributedObjects for NSObject {}
pub trait NSObject_NSDistributedObjects: Sized + std::ops::Deref {
    unsafe fn replacementObjectForPortCoder_(&self, coder: NSPortCoder) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, replacementObjectForPortCoder: coder)
    }
    unsafe fn classForPortCoder(&self) -> Class
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, classForPortCoder)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSPortNameServer(pub id);
impl std::ops::Deref for NSPortNameServer {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSPortNameServer {}
impl NSPortNameServer {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSPortNameServer), alloc) })
    }
}
impl INSObject for NSPortNameServer {}
impl PNSObject for NSPortNameServer {}
impl From<NSPortNameServer> for NSObject {
    fn from(child: NSPortNameServer) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSPortNameServer {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSPortNameServer, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSPortNameServer)) };
        if is_kind_of {
            Ok(NSPortNameServer(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSPortNameServer")
        }
    }
}
impl INSPortNameServer for NSPortNameServer {}
pub trait INSPortNameServer: Sized + std::ops::Deref {
    unsafe fn portForName_(&self, name: NSString) -> NSPort
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, portForName: name)
    }
    unsafe fn portForName_host_(&self, name: NSString, host: NSString) -> NSPort
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , portForName : name host : host)
    }
    unsafe fn registerPort_name_(&self, port: NSPort, name: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , registerPort : port name : name)
    }
    unsafe fn removePortForName_(&self, name: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removePortForName: name)
    }
    unsafe fn systemDefaultPortNameServer() -> NSPortNameServer
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSPortNameServer), systemDefaultPortNameServer)
    }
}
pub const NSAppleEventSendOptions_NSAppleEventSendNoReply: NSAppleEventSendOptions = 1;
pub const NSAppleEventSendOptions_NSAppleEventSendQueueReply: NSAppleEventSendOptions = 2;
pub const NSAppleEventSendOptions_NSAppleEventSendWaitForReply: NSAppleEventSendOptions = 3;
pub const NSAppleEventSendOptions_NSAppleEventSendNeverInteract: NSAppleEventSendOptions = 16;
pub const NSAppleEventSendOptions_NSAppleEventSendCanInteract: NSAppleEventSendOptions = 32;
pub const NSAppleEventSendOptions_NSAppleEventSendAlwaysInteract: NSAppleEventSendOptions = 48;
pub const NSAppleEventSendOptions_NSAppleEventSendCanSwitchLayer: NSAppleEventSendOptions = 64;
pub const NSAppleEventSendOptions_NSAppleEventSendDontRecord: NSAppleEventSendOptions = 4096;
pub const NSAppleEventSendOptions_NSAppleEventSendDontExecute: NSAppleEventSendOptions = 8192;
pub const NSAppleEventSendOptions_NSAppleEventSendDontAnnotate: NSAppleEventSendOptions = 65536;
pub const NSAppleEventSendOptions_NSAppleEventSendDefaultOptions: NSAppleEventSendOptions = 35;
pub type NSAppleEventSendOptions = NSUInteger;
#[repr(transparent)]
#[derive(Clone)]
pub struct NSAppleEventDescriptor(pub id);
impl std::ops::Deref for NSAppleEventDescriptor {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSAppleEventDescriptor {}
impl NSAppleEventDescriptor {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSAppleEventDescriptor), alloc) })
    }
}
impl PNSCopying for NSAppleEventDescriptor {}
impl PNSSecureCoding for NSAppleEventDescriptor {}
impl INSObject for NSAppleEventDescriptor {}
impl PNSObject for NSAppleEventDescriptor {}
impl From<NSAppleEventDescriptor> for NSObject {
    fn from(child: NSAppleEventDescriptor) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSAppleEventDescriptor {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSAppleEventDescriptor, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSAppleEventDescriptor)) };
        if is_kind_of {
            Ok(NSAppleEventDescriptor(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSAppleEventDescriptor")
        }
    }
}
impl INSAppleEventDescriptor for NSAppleEventDescriptor {}
pub trait INSAppleEventDescriptor: Sized + std::ops::Deref {
    unsafe fn initWithAEDescNoCopy_(&self, aeDesc: *const AEDesc) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithAEDescNoCopy: aeDesc)
    }
    unsafe fn initWithDescriptorType_bytes_length_(
        &self,
        descriptorType: DescType,
        bytes: *const ::std::os::raw::c_void,
        byteCount: NSUInteger,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithDescriptorType : descriptorType bytes : bytes length : byteCount)
    }
    unsafe fn initWithDescriptorType_data_(
        &self,
        descriptorType: DescType,
        data: NSData,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithDescriptorType : descriptorType data : data)
    }
    unsafe fn initWithEventClass_eventID_targetDescriptor_returnID_transactionID_(
        &self,
        eventClass: AEEventClass,
        eventID: AEEventID,
        targetDescriptor: NSAppleEventDescriptor,
        returnID: AEReturnID,
        transactionID: AETransactionID,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithEventClass : eventClass eventID : eventID targetDescriptor : targetDescriptor returnID : returnID transactionID : transactionID)
    }
    unsafe fn initListDescriptor(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initListDescriptor)
    }
    unsafe fn initRecordDescriptor(&self) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initRecordDescriptor)
    }
    unsafe fn setParamDescriptor_forKeyword_(
        &self,
        descriptor: NSAppleEventDescriptor,
        keyword: AEKeyword,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setParamDescriptor : descriptor forKeyword : keyword)
    }
    unsafe fn paramDescriptorForKeyword_(&self, keyword: AEKeyword) -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, paramDescriptorForKeyword: keyword)
    }
    unsafe fn removeParamDescriptorWithKeyword_(&self, keyword: AEKeyword)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeParamDescriptorWithKeyword: keyword)
    }
    unsafe fn setAttributeDescriptor_forKeyword_(
        &self,
        descriptor: NSAppleEventDescriptor,
        keyword: AEKeyword,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setAttributeDescriptor : descriptor forKeyword : keyword)
    }
    unsafe fn attributeDescriptorForKeyword_(&self, keyword: AEKeyword) -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, attributeDescriptorForKeyword: keyword)
    }
    unsafe fn sendEventWithOptions_timeout_error_(
        &self,
        sendOptions: NSAppleEventSendOptions,
        timeoutInSeconds: NSTimeInterval,
        error: *mut NSError,
    ) -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , sendEventWithOptions : sendOptions timeout : timeoutInSeconds error : error)
    }
    unsafe fn insertDescriptor_atIndex_(&self, descriptor: NSAppleEventDescriptor, index: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , insertDescriptor : descriptor atIndex : index)
    }
    unsafe fn descriptorAtIndex_(&self, index: NSInteger) -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, descriptorAtIndex: index)
    }
    unsafe fn removeDescriptorAtIndex_(&self, index: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeDescriptorAtIndex: index)
    }
    unsafe fn setDescriptor_forKeyword_(
        &self,
        descriptor: NSAppleEventDescriptor,
        keyword: AEKeyword,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , setDescriptor : descriptor forKeyword : keyword)
    }
    unsafe fn descriptorForKeyword_(&self, keyword: AEKeyword) -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, descriptorForKeyword: keyword)
    }
    unsafe fn removeDescriptorWithKeyword_(&self, keyword: AEKeyword)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, removeDescriptorWithKeyword: keyword)
    }
    unsafe fn keywordForDescriptorAtIndex_(&self, index: NSInteger) -> AEKeyword
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, keywordForDescriptorAtIndex: index)
    }
    unsafe fn coerceToDescriptorType_(&self, descriptorType: DescType) -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, coerceToDescriptorType: descriptorType)
    }
    unsafe fn aeDesc(&self) -> *const AEDesc
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, aeDesc)
    }
    unsafe fn descriptorType(&self) -> DescType
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, descriptorType)
    }
    unsafe fn data(&self) -> NSData
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, data)
    }
    unsafe fn booleanValue(&self) -> Boolean
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, booleanValue)
    }
    unsafe fn enumCodeValue(&self) -> OSType
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, enumCodeValue)
    }
    unsafe fn int32Value(&self) -> SInt32
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, int32Value)
    }
    unsafe fn doubleValue(&self) -> f64
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, doubleValue)
    }
    unsafe fn typeCodeValue(&self) -> OSType
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, typeCodeValue)
    }
    unsafe fn stringValue(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, stringValue)
    }
    unsafe fn dateValue(&self) -> NSDate
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, dateValue)
    }
    unsafe fn fileURLValue(&self) -> NSURL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, fileURLValue)
    }
    unsafe fn eventClass(&self) -> AEEventClass
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, eventClass)
    }
    unsafe fn eventID(&self) -> AEEventID
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, eventID)
    }
    unsafe fn returnID(&self) -> AEReturnID
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, returnID)
    }
    unsafe fn transactionID(&self) -> AETransactionID
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, transactionID)
    }
    unsafe fn isRecordDescriptor(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isRecordDescriptor)
    }
    unsafe fn numberOfItems(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, numberOfItems)
    }
    unsafe fn nullDescriptor() -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSAppleEventDescriptor), nullDescriptor)
    }
    unsafe fn descriptorWithDescriptorType_bytes_length_(
        descriptorType: DescType,
        bytes: *const ::std::os::raw::c_void,
        byteCount: NSUInteger,
    ) -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSAppleEventDescriptor) , descriptorWithDescriptorType : descriptorType bytes : bytes length : byteCount)
    }
    unsafe fn descriptorWithDescriptorType_data_(
        descriptorType: DescType,
        data: NSData,
    ) -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSAppleEventDescriptor) , descriptorWithDescriptorType : descriptorType data : data)
    }
    unsafe fn descriptorWithBoolean_(boolean: Boolean) -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSAppleEventDescriptor),
            descriptorWithBoolean: boolean
        )
    }
    unsafe fn descriptorWithEnumCode_(enumerator: OSType) -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSAppleEventDescriptor),
            descriptorWithEnumCode: enumerator
        )
    }
    unsafe fn descriptorWithInt32_(signedInt: SInt32) -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSAppleEventDescriptor),
            descriptorWithInt32: signedInt
        )
    }
    unsafe fn descriptorWithDouble_(doubleValue: f64) -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSAppleEventDescriptor),
            descriptorWithDouble: doubleValue
        )
    }
    unsafe fn descriptorWithTypeCode_(typeCode: OSType) -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSAppleEventDescriptor),
            descriptorWithTypeCode: typeCode
        )
    }
    unsafe fn descriptorWithString_(string: NSString) -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSAppleEventDescriptor), descriptorWithString: string)
    }
    unsafe fn descriptorWithDate_(date: NSDate) -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSAppleEventDescriptor), descriptorWithDate: date)
    }
    unsafe fn descriptorWithFileURL_(fileURL: NSURL) -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSAppleEventDescriptor),
            descriptorWithFileURL: fileURL
        )
    }
    unsafe fn appleEventWithEventClass_eventID_targetDescriptor_returnID_transactionID_(
        eventClass: AEEventClass,
        eventID: AEEventID,
        targetDescriptor: NSAppleEventDescriptor,
        returnID: AEReturnID,
        transactionID: AETransactionID,
    ) -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSAppleEventDescriptor) , appleEventWithEventClass : eventClass eventID : eventID targetDescriptor : targetDescriptor returnID : returnID transactionID : transactionID)
    }
    unsafe fn listDescriptor() -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSAppleEventDescriptor), listDescriptor)
    }
    unsafe fn recordDescriptor() -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSAppleEventDescriptor), recordDescriptor)
    }
    unsafe fn currentProcessDescriptor() -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSAppleEventDescriptor), currentProcessDescriptor)
    }
    unsafe fn descriptorWithProcessIdentifier_(processIdentifier: pid_t) -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSAppleEventDescriptor),
            descriptorWithProcessIdentifier: processIdentifier
        )
    }
    unsafe fn descriptorWithBundleIdentifier_(bundleIdentifier: NSString) -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSAppleEventDescriptor),
            descriptorWithBundleIdentifier: bundleIdentifier
        )
    }
    unsafe fn descriptorWithApplicationURL_(applicationURL: NSURL) -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSAppleEventDescriptor),
            descriptorWithApplicationURL: applicationURL
        )
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSClassDescription(pub id);
impl std::ops::Deref for NSClassDescription {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSClassDescription {}
impl NSClassDescription {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSClassDescription), alloc) })
    }
}
impl INSObject for NSClassDescription {}
impl PNSObject for NSClassDescription {}
impl From<NSClassDescription> for NSObject {
    fn from(child: NSClassDescription) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSClassDescription {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSClassDescription, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSClassDescription)) };
        if is_kind_of {
            Ok(NSClassDescription(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSClassDescription")
        }
    }
}
impl INSClassDescription for NSClassDescription {}
pub trait INSClassDescription: Sized + std::ops::Deref {
    unsafe fn inverseForRelationshipKey_(&self, relationshipKey: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, inverseForRelationshipKey: relationshipKey)
    }
    unsafe fn attributeKeys(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, attributeKeys)
    }
    unsafe fn toOneRelationshipKeys(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, toOneRelationshipKeys)
    }
    unsafe fn toManyRelationshipKeys(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, toManyRelationshipKeys)
    }
    unsafe fn registerClassDescription_forClass_(description: NSClassDescription, aClass: Class)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (class ! (NSClassDescription) , registerClassDescription : description forClass : aClass)
    }
    unsafe fn invalidateClassDescriptionCache()
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSClassDescription), invalidateClassDescriptionCache)
    }
    unsafe fn classDescriptionForClass_(aClass: Class) -> NSClassDescription
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSClassDescription), classDescriptionForClass: aClass)
    }
}
impl NSObject_NSClassDescriptionPrimitives for NSObject {}
pub trait NSObject_NSClassDescriptionPrimitives: Sized + std::ops::Deref {
    unsafe fn inverseForRelationshipKey_(&self, relationshipKey: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, inverseForRelationshipKey: relationshipKey)
    }
    unsafe fn classDescription(&self) -> NSClassDescription
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, classDescription)
    }
    unsafe fn attributeKeys(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, attributeKeys)
    }
    unsafe fn toOneRelationshipKeys(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, toOneRelationshipKeys)
    }
    unsafe fn toManyRelationshipKeys(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, toManyRelationshipKeys)
    }
}
impl NSObject_NSScripting for NSObject {}
pub trait NSObject_NSScripting: Sized + std::ops::Deref {
    unsafe fn scriptingValueForSpecifier_(&self, objectSpecifier: NSScriptObjectSpecifier) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scriptingValueForSpecifier: objectSpecifier)
    }
    unsafe fn copyScriptingValue_forKey_withProperties_(
        &self,
        value: id,
        key: NSString,
        properties: NSDictionary,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , copyScriptingValue : value forKey : key withProperties : properties)
    }
    unsafe fn newScriptingObjectOfClass_forValueForKey_withContentsValue_properties_(
        &self,
        objectClass: Class,
        key: NSString,
        contentsValue: id,
        properties: NSDictionary,
    ) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , newScriptingObjectOfClass : objectClass forValueForKey : key withContentsValue : contentsValue properties : properties)
    }
    unsafe fn scriptingProperties(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scriptingProperties)
    }
    unsafe fn setScriptingProperties_(&self, scriptingProperties: NSDictionary)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setScriptingProperties: scriptingProperties)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSScriptClassDescription(pub id);
impl std::ops::Deref for NSScriptClassDescription {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSScriptClassDescription {}
impl NSScriptClassDescription {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSScriptClassDescription), alloc) })
    }
}
impl INSClassDescription for NSScriptClassDescription {}
impl From<NSScriptClassDescription> for NSClassDescription {
    fn from(child: NSScriptClassDescription) -> NSClassDescription {
        NSClassDescription(child.0)
    }
}
impl std::convert::TryFrom<NSClassDescription> for NSScriptClassDescription {
    type Error = &'static str;
    fn try_from(parent: NSClassDescription) -> Result<NSScriptClassDescription, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSScriptClassDescription)) };
        if is_kind_of {
            Ok(NSScriptClassDescription(parent.0))
        } else {
            Err("This NSClassDescription cannot be downcasted to NSScriptClassDescription")
        }
    }
}
impl INSObject for NSScriptClassDescription {}
impl PNSObject for NSScriptClassDescription {}
impl From<NSScriptClassDescription> for NSObject {
    fn from(child: NSScriptClassDescription) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSScriptClassDescription {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSScriptClassDescription, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSScriptClassDescription)) };
        if is_kind_of {
            Ok(NSScriptClassDescription(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSScriptClassDescription")
        }
    }
}
impl INSScriptClassDescription for NSScriptClassDescription {}
pub trait INSScriptClassDescription: Sized + std::ops::Deref {
    unsafe fn initWithSuiteName_className_dictionary_(
        &self,
        suiteName: NSString,
        className: NSString,
        classDeclaration: NSDictionary,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithSuiteName : suiteName className : className dictionary : classDeclaration)
    }
    unsafe fn matchesAppleEventCode_(&self, appleEventCode: FourCharCode) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, matchesAppleEventCode: appleEventCode)
    }
    unsafe fn supportsCommand_(&self, commandDescription: NSScriptCommandDescription) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, supportsCommand: commandDescription)
    }
    unsafe fn selectorForCommand_(
        &self,
        commandDescription: NSScriptCommandDescription,
    ) -> objc::runtime::Sel
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, selectorForCommand: commandDescription)
    }
    unsafe fn typeForKey_(&self, key: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, typeForKey: key)
    }
    unsafe fn classDescriptionForKey_(&self, key: NSString) -> NSScriptClassDescription
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, classDescriptionForKey: key)
    }
    unsafe fn appleEventCodeForKey_(&self, key: NSString) -> FourCharCode
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, appleEventCodeForKey: key)
    }
    unsafe fn keyWithAppleEventCode_(&self, appleEventCode: FourCharCode) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, keyWithAppleEventCode: appleEventCode)
    }
    unsafe fn isLocationRequiredToCreateForKey_(&self, toManyRelationshipKey: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            isLocationRequiredToCreateForKey: toManyRelationshipKey
        )
    }
    unsafe fn hasPropertyForKey_(&self, key: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hasPropertyForKey: key)
    }
    unsafe fn hasOrderedToManyRelationshipForKey_(&self, key: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hasOrderedToManyRelationshipForKey: key)
    }
    unsafe fn hasReadablePropertyForKey_(&self, key: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hasReadablePropertyForKey: key)
    }
    unsafe fn hasWritablePropertyForKey_(&self, key: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, hasWritablePropertyForKey: key)
    }
    unsafe fn suiteName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, suiteName)
    }
    unsafe fn className(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, className)
    }
    unsafe fn implementationClassName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, implementationClassName)
    }
    unsafe fn superclassDescription(&self) -> NSScriptClassDescription
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, superclassDescription)
    }
    unsafe fn appleEventCode(&self) -> FourCharCode
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, appleEventCode)
    }
    unsafe fn defaultSubcontainerAttributeKey(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, defaultSubcontainerAttributeKey)
    }
    unsafe fn classDescriptionForClass_(aClass: Class) -> NSScriptClassDescription
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSScriptClassDescription),
            classDescriptionForClass: aClass
        )
    }
}
impl NSObject_NSScriptClassDescription for NSObject {}
pub trait NSObject_NSScriptClassDescription: Sized + std::ops::Deref {
    unsafe fn classCode(&self) -> FourCharCode
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, classCode)
    }
    unsafe fn className(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, className)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSScriptCommand(pub id);
impl std::ops::Deref for NSScriptCommand {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSScriptCommand {}
impl NSScriptCommand {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSScriptCommand), alloc) })
    }
}
impl PNSCoding for NSScriptCommand {}
impl INSObject for NSScriptCommand {}
impl PNSObject for NSScriptCommand {}
impl From<NSScriptCommand> for NSObject {
    fn from(child: NSScriptCommand) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSScriptCommand {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSScriptCommand, Self::Error> {
        let is_kind_of: bool = unsafe { msg_send!(parent, isKindOfClass: class!(NSScriptCommand)) };
        if is_kind_of {
            Ok(NSScriptCommand(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSScriptCommand")
        }
    }
}
impl INSScriptCommand for NSScriptCommand {}
pub trait INSScriptCommand: Sized + std::ops::Deref {
    unsafe fn initWithCommandDescription_(
        &self,
        commandDef: NSScriptCommandDescription,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCommandDescription: commandDef)
    }
    unsafe fn initWithCoder_(&self, inCoder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: inCoder)
    }
    unsafe fn performDefaultImplementation(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, performDefaultImplementation)
    }
    unsafe fn executeCommand(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, executeCommand)
    }
    unsafe fn suspendExecution(&self)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, suspendExecution)
    }
    unsafe fn resumeExecutionWithResult_(&self, result: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, resumeExecutionWithResult: result)
    }
    unsafe fn commandDescription(&self) -> NSScriptCommandDescription
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, commandDescription)
    }
    unsafe fn directParameter(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, directParameter)
    }
    unsafe fn setDirectParameter_(&self, directParameter: id)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setDirectParameter: directParameter)
    }
    unsafe fn receiversSpecifier(&self) -> NSScriptObjectSpecifier
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, receiversSpecifier)
    }
    unsafe fn setReceiversSpecifier_(&self, receiversSpecifier: NSScriptObjectSpecifier)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setReceiversSpecifier: receiversSpecifier)
    }
    unsafe fn evaluatedReceivers(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, evaluatedReceivers)
    }
    unsafe fn arguments(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, arguments)
    }
    unsafe fn setArguments_(&self, arguments: NSDictionary)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setArguments: arguments)
    }
    unsafe fn evaluatedArguments(&self) -> NSDictionary
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, evaluatedArguments)
    }
    unsafe fn isWellFormed(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isWellFormed)
    }
    unsafe fn scriptErrorNumber(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scriptErrorNumber)
    }
    unsafe fn setScriptErrorNumber_(&self, scriptErrorNumber: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setScriptErrorNumber: scriptErrorNumber)
    }
    unsafe fn scriptErrorOffendingObjectDescriptor(&self) -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scriptErrorOffendingObjectDescriptor)
    }
    unsafe fn setScriptErrorOffendingObjectDescriptor_(
        &self,
        scriptErrorOffendingObjectDescriptor: NSAppleEventDescriptor,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setScriptErrorOffendingObjectDescriptor: scriptErrorOffendingObjectDescriptor
        )
    }
    unsafe fn scriptErrorExpectedTypeDescriptor(&self) -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scriptErrorExpectedTypeDescriptor)
    }
    unsafe fn setScriptErrorExpectedTypeDescriptor_(
        &self,
        scriptErrorExpectedTypeDescriptor: NSAppleEventDescriptor,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setScriptErrorExpectedTypeDescriptor: scriptErrorExpectedTypeDescriptor
        )
    }
    unsafe fn scriptErrorString(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scriptErrorString)
    }
    unsafe fn setScriptErrorString_(&self, scriptErrorString: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setScriptErrorString: scriptErrorString)
    }
    unsafe fn appleEvent(&self) -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, appleEvent)
    }
    unsafe fn currentCommand() -> NSScriptCommand
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(class!(NSScriptCommand), currentCommand)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSScriptCommandDescription(pub id);
impl std::ops::Deref for NSScriptCommandDescription {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSScriptCommandDescription {}
impl NSScriptCommandDescription {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSScriptCommandDescription), alloc) })
    }
}
impl PNSCoding for NSScriptCommandDescription {}
impl INSObject for NSScriptCommandDescription {}
impl PNSObject for NSScriptCommandDescription {}
impl From<NSScriptCommandDescription> for NSObject {
    fn from(child: NSScriptCommandDescription) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSScriptCommandDescription {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSScriptCommandDescription, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSScriptCommandDescription)) };
        if is_kind_of {
            Ok(NSScriptCommandDescription(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSScriptCommandDescription")
        }
    }
}
impl INSScriptCommandDescription for NSScriptCommandDescription {}
pub trait INSScriptCommandDescription: Sized + std::ops::Deref {
    unsafe fn init(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, init)
    }
    unsafe fn initWithSuiteName_commandName_dictionary_(
        &self,
        suiteName: NSString,
        commandName: NSString,
        commandDeclaration: NSDictionary,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithSuiteName : suiteName commandName : commandName dictionary : commandDeclaration)
    }
    unsafe fn initWithCoder_(&self, inCoder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: inCoder)
    }
    unsafe fn typeForArgumentWithName_(&self, argumentName: NSString) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, typeForArgumentWithName: argumentName)
    }
    unsafe fn appleEventCodeForArgumentWithName_(&self, argumentName: NSString) -> FourCharCode
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, appleEventCodeForArgumentWithName: argumentName)
    }
    unsafe fn isOptionalArgumentWithName_(&self, argumentName: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isOptionalArgumentWithName: argumentName)
    }
    unsafe fn createCommandInstance(&self) -> NSScriptCommand
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, createCommandInstance)
    }
    unsafe fn createCommandInstanceWithZone_(&self, zone: *mut NSZone) -> NSScriptCommand
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, createCommandInstanceWithZone: zone)
    }
    unsafe fn suiteName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, suiteName)
    }
    unsafe fn commandName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, commandName)
    }
    unsafe fn appleEventClassCode(&self) -> FourCharCode
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, appleEventClassCode)
    }
    unsafe fn appleEventCode(&self) -> FourCharCode
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, appleEventCode)
    }
    unsafe fn commandClassName(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, commandClassName)
    }
    unsafe fn returnType(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, returnType)
    }
    unsafe fn appleEventCodeForReturnType(&self) -> FourCharCode
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, appleEventCodeForReturnType)
    }
    unsafe fn argumentNames(&self) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, argumentNames)
    }
}
impl NSObject_NSScriptKeyValueCoding for NSObject {}
pub trait NSObject_NSScriptKeyValueCoding: Sized + std::ops::Deref {
    unsafe fn valueAtIndex_inPropertyWithKey_(&self, index: NSUInteger, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , valueAtIndex : index inPropertyWithKey : key)
    }
    unsafe fn valueWithName_inPropertyWithKey_(&self, name: NSString, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , valueWithName : name inPropertyWithKey : key)
    }
    unsafe fn valueWithUniqueID_inPropertyWithKey_(&self, uniqueID: id, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , valueWithUniqueID : uniqueID inPropertyWithKey : key)
    }
    unsafe fn insertValue_atIndex_inPropertyWithKey_(
        &self,
        value: id,
        index: NSUInteger,
        key: NSString,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , insertValue : value atIndex : index inPropertyWithKey : key)
    }
    unsafe fn removeValueAtIndex_fromPropertyWithKey_(&self, index: NSUInteger, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , removeValueAtIndex : index fromPropertyWithKey : key)
    }
    unsafe fn replaceValueAtIndex_inPropertyWithKey_withValue_(
        &self,
        index: NSUInteger,
        key: NSString,
        value: id,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , replaceValueAtIndex : index inPropertyWithKey : key withValue : value)
    }
    unsafe fn insertValue_inPropertyWithKey_(&self, value: id, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , insertValue : value inPropertyWithKey : key)
    }
    unsafe fn coerceValue_forKey_(&self, value: id, key: NSString) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , coerceValue : value forKey : key)
    }
}
#[repr(transparent)]
#[derive(Clone)]
pub struct NSScriptObjectSpecifier(pub id);
impl std::ops::Deref for NSScriptObjectSpecifier {
    type Target = objc::runtime::Object;
    fn deref(&self) -> &Self::Target {
        unsafe { &*self.0 }
    }
}
unsafe impl objc::Message for NSScriptObjectSpecifier {}
impl NSScriptObjectSpecifier {
    pub fn alloc() -> Self {
        Self(unsafe { msg_send!(objc::class!(NSScriptObjectSpecifier), alloc) })
    }
}
impl PNSCoding for NSScriptObjectSpecifier {}
impl INSObject for NSScriptObjectSpecifier {}
impl PNSObject for NSScriptObjectSpecifier {}
impl From<NSScriptObjectSpecifier> for NSObject {
    fn from(child: NSScriptObjectSpecifier) -> NSObject {
        NSObject(child.0)
    }
}
impl std::convert::TryFrom<NSObject> for NSScriptObjectSpecifier {
    type Error = &'static str;
    fn try_from(parent: NSObject) -> Result<NSScriptObjectSpecifier, Self::Error> {
        let is_kind_of: bool =
            unsafe { msg_send!(parent, isKindOfClass: class!(NSScriptObjectSpecifier)) };
        if is_kind_of {
            Ok(NSScriptObjectSpecifier(parent.0))
        } else {
            Err("This NSObject cannot be downcasted to NSScriptObjectSpecifier")
        }
    }
}
impl INSScriptObjectSpecifier for NSScriptObjectSpecifier {}
pub trait INSScriptObjectSpecifier: Sized + std::ops::Deref {
    unsafe fn initWithContainerSpecifier_key_(
        &self,
        container: NSScriptObjectSpecifier,
        property: NSString,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithContainerSpecifier : container key : property)
    }
    unsafe fn initWithContainerClassDescription_containerSpecifier_key_(
        &self,
        classDesc: NSScriptClassDescription,
        container: NSScriptObjectSpecifier,
        property: NSString,
    ) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , initWithContainerClassDescription : classDesc containerSpecifier : container key : property)
    }
    unsafe fn initWithCoder_(&self, inCoder: NSCoder) -> instancetype
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, initWithCoder: inCoder)
    }
    unsafe fn indicesOfObjectsByEvaluatingWithContainer_count_(
        &self,
        container: id,
        count: *mut NSInteger,
    ) -> *mut NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send ! (* self , indicesOfObjectsByEvaluatingWithContainer : container count : count)
    }
    unsafe fn objectsByEvaluatingWithContainers_(&self, containers: id) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectsByEvaluatingWithContainers: containers)
    }
    unsafe fn childSpecifier(&self) -> NSScriptObjectSpecifier
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, childSpecifier)
    }
    unsafe fn setChildSpecifier_(&self, childSpecifier: NSScriptObjectSpecifier)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setChildSpecifier: childSpecifier)
    }
    unsafe fn containerSpecifier(&self) -> NSScriptObjectSpecifier
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, containerSpecifier)
    }
    unsafe fn setContainerSpecifier_(&self, containerSpecifier: NSScriptObjectSpecifier)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setContainerSpecifier: containerSpecifier)
    }
    unsafe fn containerIsObjectBeingTested(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, containerIsObjectBeingTested)
    }
    unsafe fn setContainerIsObjectBeingTested_(&self, containerIsObjectBeingTested: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setContainerIsObjectBeingTested: containerIsObjectBeingTested
        )
    }
    unsafe fn containerIsRangeContainerObject(&self) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, containerIsRangeContainerObject)
    }
    unsafe fn setContainerIsRangeContainerObject_(&self, containerIsRangeContainerObject: BOOL)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setContainerIsRangeContainerObject: containerIsRangeContainerObject
        )
    }
    unsafe fn key(&self) -> NSString
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, key)
    }
    unsafe fn setKey_(&self, key: NSString)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setKey: key)
    }
    unsafe fn containerClassDescription(&self) -> NSScriptClassDescription
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, containerClassDescription)
    }
    unsafe fn setContainerClassDescription_(
        &self,
        containerClassDescription: NSScriptClassDescription,
    ) where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            setContainerClassDescription: containerClassDescription
        )
    }
    unsafe fn keyClassDescription(&self) -> NSScriptClassDescription
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, keyClassDescription)
    }
    unsafe fn objectsByEvaluatingSpecifier(&self) -> id
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectsByEvaluatingSpecifier)
    }
    unsafe fn evaluationErrorNumber(&self) -> NSInteger
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, evaluationErrorNumber)
    }
    unsafe fn setEvaluationErrorNumber_(&self, evaluationErrorNumber: NSInteger)
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, setEvaluationErrorNumber: evaluationErrorNumber)
    }
    unsafe fn evaluationErrorSpecifier(&self) -> NSScriptObjectSpecifier
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, evaluationErrorSpecifier)
    }
    unsafe fn descriptor(&self) -> NSAppleEventDescriptor
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, descriptor)
    }
    unsafe fn objectSpecifierWithDescriptor_(
        descriptor: NSAppleEventDescriptor,
    ) -> NSScriptObjectSpecifier
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            class!(NSScriptObjectSpecifier),
            objectSpecifierWithDescriptor: descriptor
        )
    }
}
impl NSObject_NSScriptObjectSpecifiers for NSObject {}
pub trait NSObject_NSScriptObjectSpecifiers: Sized + std::ops::Deref {
    unsafe fn indicesOfObjectsByEvaluatingObjectSpecifier_(
        &self,
        specifier: NSScriptObjectSpecifier,
    ) -> NSArray
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(
            *self,
            indicesOfObjectsByEvaluatingObjectSpecifier: specifier
        )
    }
    unsafe fn objectSpecifier(&self) -> NSScriptObjectSpecifier
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, objectSpecifier)
    }
}
impl NSObject_NSComparisonMethods for NSObject {}
pub trait NSObject_NSComparisonMethods: Sized + std::ops::Deref {
    unsafe fn isEqualTo_(&self, object: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isEqualTo: object)
    }
    unsafe fn isLessThanOrEqualTo_(&self, object: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isLessThanOrEqualTo: object)
    }
    unsafe fn isLessThan_(&self, object: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isLessThan: object)
    }
    unsafe fn isGreaterThanOrEqualTo_(&self, object: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isGreaterThanOrEqualTo: object)
    }
    unsafe fn isGreaterThan_(&self, object: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isGreaterThan: object)
    }
    unsafe fn isNotEqualTo_(&self, object: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isNotEqualTo: object)
    }
    unsafe fn doesContain_(&self, object: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, doesContain: object)
    }
    unsafe fn isLike_(&self, object: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isLike: object)
    }
    unsafe fn isCaseInsensitiveLike_(&self, object: NSString) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, isCaseInsensitiveLike: object)
    }
}
impl NSObject_NSScriptingComparisonMethods for NSObject {}
pub trait NSObject_NSScriptingComparisonMethods: Sized + std::ops::Deref {
    unsafe fn scriptingIsEqualTo_(&self, object: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scriptingIsEqualTo: object)
    }
    unsafe fn scriptingIsLessThanOrEqualTo_(&self, object: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scriptingIsLessThanOrEqualTo: object)
    }
    unsafe fn scriptingIsLessThan_(&self, object: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scriptingIsLessThan: object)
    }
    unsafe fn scriptingIsGreaterThanOrEqualTo_(&self, object: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scriptingIsGreaterThanOrEqualTo: object)
    }
    unsafe fn scriptingIsGreaterThan_(&self, object: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scriptingIsGreaterThan: object)
    }
    unsafe fn scriptingBeginsWith_(&self, object: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scriptingBeginsWith: object)
    }
    unsafe fn scriptingEndsWith_(&self, object: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scriptingEndsWith: object)
    }
    unsafe fn scriptingContains_(&self, object: id) -> BOOL
    where
        <Self as std::ops::Deref>::Target: objc::Message + Sized,
    {
        msg_send!(*self, scriptingContains: object)
    }
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
pub type instancetype = id;
